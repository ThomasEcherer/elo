Ext.data.JsonP.basic_01_elo_app({"guide":"<h1 id='basic_01_elo_app-section-elo-app'>ELO App</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ul>\n<li>1. <a href='#!/guide/basic_01_elo_app-section-introduction'>Introduction</a>\n </li>\n<li>2. <a href='#!/guide/basic_01_elo_app-section-app-manifest'>App Manifest</a>\n </li>\n<li>3. <a href='#!/guide/basic_01_elo_app-section-app-life-cycle'>App Life Cycle</a>\n </li>\n<li>4. <a href='#!/guide/basic_01_elo_app-section-structure'>Structure</a>\n </li>\n<li>5. <a href='#!/guide/basic_01_elo_app-section-loading-an-app'>Loading an App</a>\n </li>\n</ul></div>\n\n<h2 id='basic_01_elo_app-section-introduction'>Introduction</h2>\n\n<p>This guide explains the basic terms and technical backgrounds of an ELO App.</p>\n\n<p>An ELO App is a single page web application, that provides easy access to the ELO\nfunctionality by scripting APIs and the Indexserver JSON API. An App can be\ngenerated via the ELO App Manager by filling out the manifest containing basic\nmetadata information. Submitting the manifest will create a folder containing an\n already running app. To customize the app a developer can add JavaScript, CSS\nfiles or expand its functionality by loading ELO, third party or his own\nmodules (see below).</p>\n\n<h2 id='basic_01_elo_app-section-app-manifest'>App Manifest</h2>\n\n<p>The manifest of an app is a JSON data object holding the metadata informations\nof the app. The metadata information is:</p>\n\n<ul>\n<li><strong>[id]</strong>: A technical string to identify the app.</li>\n<li><strong>[namespace]</strong>: A dot-separated namespace string (like Java packages). Together\nwith the id it builds the unique apps full name. The namespace must be a valid JavaScript namespace (no digit after a dot).</li>\n<li><strong>[version]</strong>: The last version string used to checkin the app into the archive (see app life cycle).</li>\n<li><strong>[build]</strong>: (read-only) An internal build number.</li>\n<li><strong>[defaultLanguage]</strong>: A ISO 639-1 two letter language, that is used as default language.\nThe generated locale properties is assumed to be in that language.</li>\n<li><strong>[status]</strong>: (read-only) An internal constant holding the status of the app in the life cycle\n(it will get updated automatically, so it is possible that the value in the manifest is already out of date).</li>\n<li><strong>[supportedLocales]</strong>: (read-only) A list of ISO 639-1 two letter languages that is automatically computed by\nreading the files from the locales folder.</li>\n<li><strong>[useEloSession]</strong>: Flag to decide if a ticket should be evaluated starting the app,\nand to redirect to a login page if no ticket is available. If set to true the\nelo-session module should be used.</li>\n<li><strong>[useDefaultModules]</strong>: Flag to decide if the app uses the default frameworks (AngularJs and Bootstrap).\nIn this case additional the ng-app attribute is set in the HTML tag of the apps web page.</li>\n</ul>\n\n\n<!--- TODO What modules are used here -->\n\n\n<ul>\n<li><strong>[jsLibs]</strong>: A string array containing the relative paths (inside the app folder\nof the ELO App) of the JavaScript files that will get loaded in that order.</li>\n<li><strong>[cssLibs]</strong>: A string array containing the relative paths (inside the resources/css folder\nof the ELO App) of the CSS files that will get loaded in that order.</li>\n<li><strong>[modules]</strong>: A string array containing the id names of the modules that will get loaded in that order.\nBe aware in order for a module to get loaded it must exist and be deployed in the modules folder.</li>\n<li><strong>[configFiles]</strong>: An object array to load additional json configuration files from the archive into the app.\nThe object contains:\n\n<ul>\n<li><em>[id]</em>: A string id to identify the configuration data in the app (see <a href=\"#!/guide/core_02_app_configuration\">App specific configuration</a>).</li>\n<li><em>[name]</em>: A string name to identify the configuration file in the archive under Administration/ELOapps/Configuration.</li>\n</ul>\n</li>\n<li><strong>[concatenate]</strong>: <strong>Since 9.03.002</strong> Boolean flag to concatenate the array of <strong>jsLibs</strong> into one file during the build phase.\nThis file is then used every time the app gets loaded except if it is loaded with the debug flag.</li>\n<li><strong>[minimize]</strong>: <strong>Since 9.03.002</strong> Boolean flag to minimize the concatenated JavaScript code of this app during the build phase.\nMinimizing code can lead to errors especially when it comes to AngularJS. For an\ninstruction how to build code that can be minimized in AngularJS please\nread <a href=\"https://docs.angularjs.org/tutorial/step_05#a-note-on-minification\">here</a>.</li>\n</ul>\n\n\n<p>Here the example of the manifest file of the elo.session.Test app:\n<p><img src=\"guides/basic_01_elo_app/app_manifest.PNG\" alt=\"ELO App manifest file\" width=\"332\" height=\"489\"></p></p>\n\n<h2 id='basic_01_elo_app-section-app-life-cycle'>App Life Cycle</h2>\n\n<p>ELO apps are stored in two places:</p>\n\n<ul>\n<li>The archive under Administration/ELOapps/Apps</li>\n<li>The deployed_apps folder in the directory configured as dataDir in the ELOwf config.xml file</li>\n</ul>\n\n\n<p>ELO apps can have the following status:</p>\n\n<ul>\n<li><strong>[In development]</strong> An app always gets generated in the local dataDir folder.\nIt has the status 'in development'. If the app needs an ELO session (useEloSession\nflag is true) it can only be accessed via users holding the Administrator user right.\nThe next steps for an app in development are:\n\n<ul>\n<li><em>[Archiving]</em> This stores the app into the archive, it remains in the local data folder, the status is set to 'Installed'.</li>\n<li><em>[Removing]</em> Deletes the app from the dataDir, all data is lost.</li>\n</ul>\n</li>\n<li><strong>[Installed]</strong> Installed apps are productive ready versions. The app is located\nin the data directory and the archive (having the same build version on both locations).\nThe next steps for an installed app are:\n\n<ul>\n<li><em>[Edit]</em> Increases the internal build number and sets the status to 'in development'.</li>\n<li><em>[Deinstallation]</em> Deletes the app from the dataDir, changes its status to 'archived'.</li>\n<li><em>[Removing]</em> Deletes the app from the dataDir and the archive, all data is lost.</li>\n</ul>\n</li>\n<li><strong>[Archived]</strong> Archived apps are only located in the archive. They cannot be accessed.\nThe next steps for an archived app are:\n\n<ul>\n<li><em>[Installation]</em> Copies the app into the dataDir, changes its status to 'installed'.</li>\n<li><em>[Removing]</em> Deletes the app from the archive, all data is lost.</li>\n</ul>\n</li>\n</ul>\n\n\n<h2 id='basic_01_elo_app-section-structure'>Structure</h2>\n\n<p>An ELO App is a folder with the apps full name (i.e. the namespace plus the id).</p>\n\n<p><p><img src=\"guides/basic_01_elo_app/app_structure.PNG\" alt=\"ELO App local file structure\" width=\"255\" height=\"363\"></p></p>\n\n<p>In the local dataDir an app has the internal following structure:</p>\n\n<ul>\n<li><strong>[manifest.json]</strong>: The manifest file in json format. This file holds the metadata\ninformation like described above.</li>\n<li><strong>[&lt;app id&gt;.html]</strong>: The HTML snippet file (in the screenshot Test.html). It\ncontains html code, that gets inside the body tag of the apps web page.\nHere the user can access the properties file by using curly brackets and a key\n(e.g. {APP.NAME} to include the text with key APP.NAME from the locales properties file).\n<strong>Please note</strong>: Do not delete the predefined HTML file, also ELO cannot archive empty files.\nSo if the file is not needed just write a comment in it: <code>&lt;!-- not used --&gt;</code>.</li>\n<li><strong>[locales]</strong>: In this folder the apps locale file and all translations will be stored.\nGenerating an app the properties file gets written &lt;app id&gt;.properties. According\nto the defaultLanguage in the manifest the content of this file has to be in\nthat language. Additional .properties files can be added in other languages by\nadding <em>&lt;language&gt; to the file (e.g. &lt;app id&gt;</em>fr.properties for the french version).<br/>\n<strong>Please note</strong>: All locale files should be stored in UTF-8 encoding to ensure correct rendering of\nspecial characters.</li>\n<li><strong>[resources]</strong>: This folder contains all static resources needed in the app\nby creation it consosts of two subfolders:\n\n<ul>\n<li><strong>[css]</strong>: Holding all CSS files. Here a predefined &lt;app id&gt;.css file gets created.\nThis file will always be loaded on startup. All other style files that should be loaded\nduring startup must be registered in the manifest file.<br/>\n<strong>Please note</strong>: Do not delete the predefined css file, also ELO cannot archive empty files.\nSo if the file is not needed just write a comment in it: <code>/* not used */</code>.</li>\n<li><strong>[images]</strong>: Holding all image files. Images can be linked from the css files via relative paths.</li>\n</ul>\n</li>\n<li><strong>[app]</strong>: This folder holds all app-specific script files. Here a predefined\n&lt;app id&gt;.js file is used as entry point for script execution. This script\nwill get loaded last on page startup. All other script files that should be loaded\nduring startup must be registered in the manifest file.<br/>\n<strong>Please note</strong>: Do not delete the predefined js file, also ELO cannot archive empty files.\nSo if the file is not needed just write a comment in it: <code>/* not used */</code>.</li>\n<li><strong>[build]</strong>: The build folder (not in screenshot) is a dynamic generated folder\nthat holds all additional build data. Here the JavaScript locale files are generated\nfrom the properties files. <strong>Since 9.03.002</strong> it may hold minified versions of the\nJavaScript code. The js file using the full name of the ELO app (namespace <dot> id)\nis the concatenated JavaScript code from jsLibs. The file containing <em>.min.js</em> is the\nminimified version of the concatenated file (both only exists if the <strong>minimize</strong> flag is set in the apps manifest).\nFiles ending with an language (e.g. <em>.de.js</em>) hold the completely build JavaScript code\nfor that ELO App including all module JavaScript code. These files are created for all\nsupported language if the <strong>concatenate</strong>  flag is set in the apps manifest.</dot></li>\n</ul>\n\n\n<p>When archiving an ELO App all the above folders (except the build folder, that will be\n created every time the ELO App gets installed) will be written to the archive.\nAdditional an folder <strong>access</strong> is created. The ELO access right on this folder are\n used to decide if a user is allowed to use the ELO app.<br/>\n<strong>Please note</strong>: To check if an user is allowed to access an ELO Apps he must\nhave a valid ELO session. So only ELO Apps with the manifest flag <strong>useEloSession</strong>\nget checked.</p>\n\n<p><p><img src=\"guides/basic_01_elo_app/app_archive_structure.PNG\" alt=\"ELO App archive structure\" width=\"248\" height=\"288\"></p></p>\n\n<h2 id='basic_01_elo_app-section-loading-an-app'>Loading an App</h2>\n\n<p>When the ELO App gets loaded the html page will dynamically get created including:</p>\n\n<ul>\n<li>Dynamic JavaScript data\n\n<ul>\n<li>url parameters</li>\n<li>feature/dpi detection</li>\n<li>server settings</li>\n<li>app specific configuration JavaScript objects</li>\n</ul>\n</li>\n<li><p>The Html snippet file containing the correct language replacements</p></li>\n<li><p>The apps locale JavaScript file</p></li>\n<li>The core JavaScript files\n\n<ul>\n<li>communication</li>\n<li>helpers</li>\n<li>etc</li>\n</ul>\n</li>\n<li>The modules JavaScript files with all dependencies</li>\n<li>The apps configured script files</li>\n<li><p>The apps default JavaScript file</p></li>\n<li><p>The modules CSS files with all dependencies</p></li>\n<li>The apps configured CSS files</li>\n<li>The apps default CSS file</li>\n</ul>\n\n\n<p>Having the html page delivered will start the script loading process.\nScripts get loaded in parallel but executed in the correct sequence.</p>\n","title":"01 ELO App"});