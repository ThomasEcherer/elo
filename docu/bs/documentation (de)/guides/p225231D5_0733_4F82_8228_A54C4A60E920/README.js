Ext.data.JsonP.p225231D5_0733_4F82_8228_A54C4A60E920({"guide":"<h1 id='p225231D5_0733_4F82_8228_A54C4A60E920-section-namespaces'>Namespaces</h1>\n\n<p>Skripte einer Lösung müssen Namespaces {{NAMSPC}}} zugeordnet werden. Ein Namespace sollte sich dabei mindestens aus der Herkunft, dem zugehörigen Modul sowie einer Gruppierung zusammensetzen.</p>\n\n<pre><code>{Herkunft}.{Modul Name}.{Gruppierung}\nBspw.: sol.invoice.ix\n</code></pre>\n\n<p>ELO-intern sind Herkunftsbezeichner mit maximal drei Zeichen reserviert. Partner werden daher angewiesen, Bezeichner, die mehr als vier Zeichen enthalten, zu verwenden.</p>\n\n<p><span\nstyle='font-weight:bold'>Beispiele für ELO-interne Namespaces:</span></p>\n\n<pre><code>sol.common\nsol.invoice\nelo.apps\napi.ix\n</code></pre>\n\n<p><span\nstyle='font-weight:bold'>Beispiele für benutzerdefinierte Namespaces:</span></p>\n\n<pre><code>custom.invoice\nelopartnername.invoice\nelobp.common\n</code></pre>\n\n<h2 id='p225231D5_0733_4F82_8228_A54C4A60E920-section-erstellen-von-namespaces'>Erstellen von Namespaces</h2>\n\n<p>Namespaces {{NAMSPC}}} werden automatisch bei der Definition einer Klasse erzeugt, falls notwendig. Sollen Namespaces automatisch angelegt werden, kann die Klasse <code><a href=\"#!/api/sol.NamespaceManager\" rel=\"sol.NamespaceManager\" class=\"docClass\">sol.NamespaceManager</a></code> hierzu verwendet werden.</p>\n\n<pre><code><a href=\"#!/api/sol-static-method-ns\" rel=\"sol-static-method-ns\" class=\"docClass\">sol.ns</a>('elopartnername.invoice');\n\n// in diesem Fall wird eine Objektstruktur in JS wie folgt angelegt\nvar elopartnername = elopartnername || {};\nelopartnername.invoice= elopartnername.invoice|| {};\n</code></pre>\n","title":"Namespaces"});