Ext.data.JsonP.p4CD8E7CD_1DB7_4C67_8CA3_EC509A0D9740({"guide":"<h1 id='p4CD8E7CD_1DB7_4C67_8CA3_EC509A0D9740-section-web-performance'>Web-Performance</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ul>\n<li>1. <a href='#!/guide/p4CD8E7CD_1DB7_4C67_8CA3_EC509A0D9740-section-web-applikationen-sind-single-threaded'>Web-Applikationen sind single-threaded</a>\n </li>\n<li>2. <a href='#!/guide/p4CD8E7CD_1DB7_4C67_8CA3_EC509A0D9740-section-verwenden-der-indexserver-api'>Verwenden der Indexserver-API</a>\n </li>\n<li>3. <a href='#!/guide/p4CD8E7CD_1DB7_4C67_8CA3_EC509A0D9740-section-css-performance'>CSS-Performance</a>\n </li>\n<li>4. <a href='#!/guide/p4CD8E7CD_1DB7_4C67_8CA3_EC509A0D9740-section-dom-zugriffe-reduzieren%E2%80%8B%E2%80%8B%E2%80%8B'>DOM-Zugriffe reduzieren​​​</a>\n </li>\n</ul></div>\n\n<p>Grundlegend gelten hier ebenfalls die Hinweise zur <a\nhref=\"#!/guide/pEFE7A0EF_91BC_4B57_9E2A_F8E29745A194\">JS-Performance</a>. In Ergänzung ergeben sich im Web-Umfeld einige Besonderheiten aufgrund der Rendering-Engine des Browsers.</p>\n\n<h2 id='p4CD8E7CD_1DB7_4C67_8CA3_EC509A0D9740-section-web-applikationen-sind-single-threaded'>Web-Applikationen sind single-threaded</h2>\n\n<p><span class=\"tag_warning\">Code, der während des Layout-Prozesses oder des Renderings ausgeführt wird, muss optimiert werden. Rechenintensive Aufgaben sollten dabei vermieden werden oder müssen in einen Background-Worker ausgelagert werden.</span></p>\n\n<p>Im klassischen Fall (falls keine Web-Worker zum Einsatz kommen) läuft die gesamte Web-Applikation in einem Thread. Das schließt Rendering, Layout sowie die gesamte JS-Ausführung mit ein.</p>\n\n<blockquote><p><span\nstyle='font-weight:bold;font-style:italic'>Beispiel:</span><span\nstyle='font-style:italic'> Benötigt die Ausführung einer JS-Funktion mehrere Sekunden, friert in dieser Zeit die gesamte Oberfläche ein. Schlimmer noch: Werden ELO-Apps in bestehende Web-Applikationen eingebunden, trifft das auch auf die einbindende Applikation zu. So würde das Rechnungseingangscockpit bei teuren statistischen Auswertungen ebenfalls den Web Client blockieren.</span></p></blockquote>\n\n<h2 id='p4CD8E7CD_1DB7_4C67_8CA3_EC509A0D9740-section-verwenden-der-indexserver-api'>Verwenden der Indexserver-API</h2>\n\n<p><span class=\"tag_warning\">Werden IX-Funktionen verwendet, <span\nstyle='font-weight:bold'>müssen diese asynchron aufgerufen werden</span>, da andernfalls ebenfalls der UI-Thread blockiert wird, bis die Antwort vom Indexserver zurückgeliefert wurde.</span></p>\n\n<pre><code>api.IX.ix().checkoutSord(\"123\", api.CONST.SORD.mbAll, api.CONST.LOCK.NO, \n    function(sord) {\n      // success\n    }, function() {\n      // failure\n    });\n</code></pre>\n\n<h2 id='p4CD8E7CD_1DB7_4C67_8CA3_EC509A0D9740-section-css-performance'>CSS-Performance</h2>\n\n<p>CSS-Selektoren werden von rechts nach links aufgelöst. In diesem Fall ist zu beachten, dass folgender Selektor alle <code>span</code>-Elemente der aktuellen Webseite zurückliefert und nachfiltert:</p>\n\n<pre><code>.invoices div.invoice span {\n   font-size: 12px;\n}\n</code></pre>\n\n<p>In diesem Falle sollte besser ein einschränkender Selektor gewählt werden, der die Ergebnisliste stärker einschränkt:</p>\n\n<pre><code>div.invoice span.title {\n   font-size: 12px;\n}\n</code></pre>\n\n<h2 id='p4CD8E7CD_1DB7_4C67_8CA3_EC509A0D9740-section-dom-zugriffe-reduzieren%E2%80%8B%E2%80%8B%E2%80%8B'>DOM-Zugriffe reduzieren​​​</h2>\n\n<p><span class=\"tag_warning\">Zugriffe auf das DOM des Browsers sind extrem teuer. Werden mehrere Elemente in einem Durchlauf der Webseite hinzugefügt, müssen diese <span\nstyle='font-weight:bold'>vor</span> dem Hinzufügen zum DOM zusammengebaut werden. Nur so kann verhindert werden, dass der Browser bei jeder DOM-Operation den Rendering-Prozess anstößt.</span></p>\n\n<blockquote><p><span\nstyle='font-weight:bold;font-style:italic'>Beispiel:</span><span\nstyle='font-style:italic'> Der Aufbau einer Tabelle in Kombination mit einer Schleife geschieht hier über eine String Builder-Implementierung in JS.&nbsp;Nach Abschluss der Operationen kann die Tabelle in das DOM geschrieben werden. </span></p></blockquote>\n\n<pre><code>var tableBuilder= ['&lt;table unselectable=\"on\"&gt;'];\nfor (var i=0; i&lt;10000; i++) { \n   tableBuilder.push('&lt;tr&gt;\n   tableBuilder.push('  &lt;td&gt;1&lt;/td&gt;\n   tableBuilder.push('  &lt;td&gt;2&lt;/td&gt;\n   tableBuilder.push('&lt;/tr&gt;'); \n} \ntableBuilder.push('&lt;/table&gt;');\n\nvar table = tableBuilder.join(\"\");\ndocument.getElementById('myTableContainer').innerHTML = table;\n</code></pre>\n","title":"Web-Performance"});