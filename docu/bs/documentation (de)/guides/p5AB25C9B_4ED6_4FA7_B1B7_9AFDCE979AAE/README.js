Ext.data.JsonP.p5AB25C9B_4ED6_4FA7_B1B7_9AFDCE979AAE({"guide":"<h1 id='p5AB25C9B_4ED6_4FA7_B1B7_9AFDCE979AAE-section-js-coding-guidelines'>JS-Coding-Guidelines</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ul>\n<li>1. <a href='#!/guide/p5AB25C9B_4ED6_4FA7_B1B7_9AFDCE979AAE-section-namensgebung'>Namensgebung</a>\n </li>\n<li>2. <a href='#!/guide/p5AB25C9B_4ED6_4FA7_B1B7_9AFDCE979AAE-section-kommentare'>Kommentare</a>\n </li>\n<li>3. <a href='#!/guide/p5AB25C9B_4ED6_4FA7_B1B7_9AFDCE979AAE-section-kurznotationen-verwenden%E2%80%8B%E2%80%8B%E2%80%8B'>Kurznotationen verwenden​​​</a>\n </li>\n<li>4. <a href='#!/guide/p5AB25C9B_4ED6_4FA7_B1B7_9AFDCE979AAE-section-objekte-und-variablen%E2%80%8B'>Objekte und Variablen​</a>\n </li>\n<li>5. <a href='#!/guide/p5AB25C9B_4ED6_4FA7_B1B7_9AFDCE979AAE-section-funktionen'>Funktionen</a>\n </li>\n<li>6. <a href='#!/guide/p5AB25C9B_4ED6_4FA7_B1B7_9AFDCE979AAE-section-fehlerbehandlung'>Fehlerbehandlung</a>\n </li>\n<li>7. <a href='#!/guide/p5AB25C9B_4ED6_4FA7_B1B7_9AFDCE979AAE-section-sonstiges%E2%80%8B'>Sonstiges​</a>\n </li>\n</ul></div>\n\n<h2 id='p5AB25C9B_4ED6_4FA7_B1B7_9AFDCE979AAE-section-namensgebung'>Namensgebung</h2>\n\n<p>​Variablen und Funktionen sollten durch&nbsp;aussagekräftige, zweckbeschreibende, aussprechbare, suchbare englische Namen beschrieben werden. Hierzu gilt: lange beschreibende Namen sind besser als kurze geheimnisvolle.</p>\n\n<p>Es ist die&nbsp;​&quot;lowerCamelCase&quot;-Schreibweise zu&nbsp;verwenden, mit Ausnahme von Konstanten: diese werden GROSS geschrieben.</p>\n\n<pre><code>var MAXUSERID = 900000;\n\nfunction buildName( firstName, lastName ) {\n  var me = this;\n  return firstName + ' ' + lastName;\n}\n</code></pre>\n\n<h2 id='p5AB25C9B_4ED6_4FA7_B1B7_9AFDCE979AAE-section-kommentare'>Kommentare</h2>\n\n<p>​​Kommentare werden in Englisch geschrieben und erklären&nbsp;das Warum/Wofür, nicht das Was/Wie des Codes. Auskommentierter Code dient lediglich Test-Szenarien und sollte nicht hinterlassen werden.</p>\n\n<p>JS ist eine untypisierte Sprache;&nbsp;Kommentare sollten daher den Standards von JSDuck entsprechen. Falls möglich sollte eine Parameter-Deklaration inkl. des Typs in den Kommentar aufgenommen werden.</p>\n\n<p>Kommentare sollten durch /<em> </em>/ anstelle von // definiert werden. Ersteres sorgt für keine&nbsp;Probleme, falls Zeilenumbrüche entfernt werden.</p>\n\n<pre><code>/**\n * Represents a book.\n * @constructor\n * @param {string} title - The title of the book.\n * @param {string} author - The author of the book.\n */\nfunction Book(title, author) {\n  var me = this, \n            data;\n/* using web worker since initial calculation might be expensive. */\n  data = worker.readBook(title, author);\n}\n</code></pre>\n\n<h2 id='p5AB25C9B_4ED6_4FA7_B1B7_9AFDCE979AAE-section-kurznotationen-verwenden%E2%80%8B%E2%80%8B%E2%80%8B'>Kurznotationen verwenden​​​</h2>\n\n<p>​JS bietet eine Reihe von Kurznotationen, die zu verwenden sind.</p>\n\n<p><span\nstyle='font-weight:bold'>Definition von Arrays</span></p>\n\n<pre><code>// falsch\nvar lunch = new Array();\nlunch[0]='Dosa';\nlunch[1]='Roti';\nlunch[2]='Rice';\nlunch[3]='what the heck is this?';\n\n// richtig\nvar lunch = ['Dosa',\n   'Roti',\n   'Rice',\n   'what the heck is this?'];\n</code></pre>\n\n<p><span\nstyle='font-weight:bold'>Vereinfachte Schreibweise von if/else-Anweisungen</span></p>\n\n<pre><code>// falsch\nif(v){\n   var x = v;\n} else {\n   var x =10;\n}\n\n// richtig\nvar x = v || 10;\n</code></pre>\n\n<p><span\nstyle='font-weight:bold'>Vereinfachte Schreibweise von komplexeren if/else-Anweisungen</span></p>\n\n<pre><code>// falsch\nvar direction;\nif(x &gt; 100){\n   direction = 1;\n} else {\n   direction = -1;\n}\n\n// richtig\nvar direction = (x &gt; 100) ? 1 : -1;\n</code></pre>\n\n<h2 id='p5AB25C9B_4ED6_4FA7_B1B7_9AFDCE979AAE-section-objekte-und-variablen%E2%80%8B'>Objekte und Variablen​</h2>\n\n<ul>\n<li>Property-Schreibweise verwenden, d.h. <code>file.name</code> statt <code>file.getName()</code></li>\n<li>wenig Verkettungen benutzen</li>\n<li>keine ungarische Notation, keine Member-Präfixe</li>\n<li>Variablen nicht wiederverwenden, vor allem nicht mit anderem Typ</li>\n<li><code>i</code>, <code>j</code>, <code>k</code> als Schleifenzähler sind o.k.</li>\n</ul>\n\n\n<h2 id='p5AB25C9B_4ED6_4FA7_B1B7_9AFDCE979AAE-section-funktionen'>Funktionen</h2>\n\n<ul>\n<li>Funktionen sollen ein Verb haben (<code>postPayment</code>, <code>deletePage</code>, <code>save</code>)</li>\n<li>ein Wort pro Konzept, z.B. nicht zwischen <code>fetch</code>, <code>retrieve</code>, <code>get</code> wechseln</li>\n<li>Funktionen sollen wenige Zeilen beinhalten</li>\n<li>eine Funktion soll nur eine Aufgabe erfüllen</li>\n<li>eine Abstraktionsebene pro Funktion</li>\n<li>mehrere zusammengehörende Funktionen sollen von oben nach unten gelesen werden können, d.h. die Abstraktionstiefe wird nach unten tiefer</li>\n<li>wenige Funktionsargumente verwenden</li>\n<li>Anweisung und Abfrage sollten getrennt sein, d.h. keine Aufgabe in einer if-Abfrage erledigen</li>\n<li>auch bei einzeiligen Anweisungsblöcken geschweifte Klammern verwenden</li>\n</ul>\n\n\n<h2 id='p5AB25C9B_4ED6_4FA7_B1B7_9AFDCE979AAE-section-fehlerbehandlung'>Fehlerbehandlung</h2>\n\n<ul>\n<li>Ausnahmen statt Fehlercodes verwenden</li>\n<li>es sollte kein &quot;null&quot; zurückgeben werden</li>\n<li>&quot;null&quot; nur in Ausnahmen übergeben, als erlaubt dokumentieren</li>\n</ul>\n\n\n<h2 id='p5AB25C9B_4ED6_4FA7_B1B7_9AFDCE979AAE-section-sonstiges%E2%80%8B'>Sonstiges​</h2>\n\n<ul>\n<li>Objektorientierung sollte verwendet werden um Namespaces zu schaffen; bei Libraries ein MUSS</li>\n<li><code>Array.join</code> als String Builder-Alternative verwenden​</li>\n</ul>\n\n","title":"JS-Coding-Guidelines"});