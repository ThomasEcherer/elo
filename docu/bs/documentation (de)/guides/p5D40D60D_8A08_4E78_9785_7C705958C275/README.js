Ext.data.JsonP.p5D40D60D_8A08_4E78_9785_7C705958C275({"guide":"<h1 id='p5D40D60D_8A08_4E78_9785_7C705958C275-section-aktionstypen-und-client-implementierung'>Aktionstypen und Client-Implementierung</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ul>\n<li>1. <a href='#!/guide/p5D40D60D_8A08_4E78_9785_7C705958C275-section-einfache-aktionen-%28simple_action%29'>Einfache Aktionen (SIMPLE_ACTION)</a>\n </li>\n<li>2. <a href='#!/guide/p5D40D60D_8A08_4E78_9785_7C705958C275-section-erweiterte-aktionen-%28advanced_action%29'>Erweiterte Aktionen (ADVANCED_ACTION)</a>\n </li>\n</ul></div>\n\n<p>Aktionen beschreiben den technischen Ablauf auf der Serverseite. Für die Ausführung einer Aktion können aber zusätzlich weitere Informationen notwendig sein, die von den Clients an den Server übermittelt werden.</p>\n\n<h2 id='p5D40D60D_8A08_4E78_9785_7C705958C275-section-einfache-aktionen-%28simple_action%29'>Einfache Aktionen (SIMPLE_ACTION)</h2>\n\n<p>Diese beschreiben Aktionen für die der Client keine Vorbedingungen zum Ausführen der Aktion erledigen muss. Im einfachsten Fall wird vom Anwender ein Element im Archiv ausgewählt und die Aktion gestartet.</p>\n\n<p>Gibt die Aktion Events zurück werden diese anschließend vom Client ausgeführt.</p>\n\n<blockquote><p><span\nstyle='font-style:italic'>Ein Beispiel: Die Funktion Vertrag abgeschlossen markiert einen Vertrag als abschlossen und unterschrieben. Hierzu muss der Vertrag in ELO ausgewählt werden, anschließend wird auf Serverseite im Workflow der Status des Vertrags, die Farbe des Elements sowie ein Feed-Beitrag gesetzt.</span></p></blockquote>\n\n<p><p><img src=\"guides/p5D40D60D_8A08_4E78_9785_7C705958C275/img1.png\" alt=\"ELO contract\nVERTRÄGE\nFreigabe\nDOKUMENT\nANSICHT\nVertragsmanagement Archiv\nSuche\nDokument\nerze ugen\nDashboard\nAufgaben\n26\nNils\nMosbach\nFeed\nSTART\nVertrag\nAnlegen\nAUFGABEN\nNach Funktion suchen\nZahlungsplan\nort west\nVerh andlung\neinleiten\nDeckblatt\nerstellen\nDokumente\n9\nVertrag\nabgeschlossen\nKündigung\neinleiten\nEtikett\nerstellen\nVerhandlung\nabgebr ochen\n0er Vertrag wurde abgeschlossen\nVertragsmanagement\" width=\"1100\" height=\"209\"></p></p>\n\n<p><span\nstyle='font-weight:bold'>Nachfolgend zeigt sich der Auszug aus der <code>Action definition</code>:</span></p>\n\n<p>Die Implementierung findet hier als Index Server Aktion, repräsentiert durch die <code>registered function</code> <code>RF_sol_contract_action_ContractConcluded</code>, statt.</p>\n\n<p>Um der Aktion die benötigten Informationen mitzugeben wird ein <a\nhref=\"#!/guide/pBFB0C475_0FC1_47BA_9ABC_8E664ECC269B\">Template</a> <code>cfgTemplate</code> verwendet. Dieses muss ein valides JSON-Objekt aufbauen, welches in der Aktion verwendet werden kann. Im Template kann auf die Objekt-ID des aktuell selektierten Elements durch <code>{{objId}}</code> zugegriffen werden (Siehe auch <a\nhref=\"#!/guide/p6DAA94C6_8B8E_40E9_9D9E_E946F91F4ACF\">Aktionslogik</a>).</p>\n\n<pre><code>  \"action\": {\n    \"fct\": \"RF_sol_contract_action_ContractConcluded\",\n    \"cfgTemplate\": \"{\\\"objId\\\": \\\"{{objId}}\\\" }\"\n  }\n</code></pre>\n\n<h2 id='p5D40D60D_8A08_4E78_9785_7C705958C275-section-erweiterte-aktionen-%28advanced_action%29'>Erweiterte Aktionen (ADVANCED_ACTION)</h2>\n\n<p>Weiterführend können Clients angewiesen werden <span\nstyle='font-weight:bold'>vor dem Auslösen einer Aktion</span> weitere Schritte durchzuführen.</p>\n\n<h3 id='p5D40D60D_8A08_4E78_9785_7C705958C275-section-auswahl-eines-typs'>Auswahl eines Typs</h3>\n\n<p>Die Funktion <code>Vertrag anlegen</code> bietet beispielsweise die Möglichkeit vorab aus einer Reihe von Vertragstypen zu wählen. Der ausgewählte Typ wird anschließend an die Aktion übergeben.</p>\n\n<p><span class=\"tag_important\">Die Typauswahl gibt dem Anwender die Möglichkeit aus einer flachen Liste einen Eintrag auszuwählen.</span></p>\n\n<p><p><img src=\"guides/p5D40D60D_8A08_4E78_9785_7C705958C275/img3.png\" alt=\"ELO contract\nVERTRÄGE\nSTART\nDOKUMENT\nANSICHT\nVertragsmanagement Archiv\nSuche\nDokument\nerze ugen\nDashboard\nAufgaben\n26\nNils\nMosbach\nFeed\nAUFGABEN\nNach Funktion suchen\nZahlungsplan\nVerhandlung\neinleiten\nVertrag\nFreigabe\n9\nVertrag\nabgeschlossen\narbeiten\nKündigung\neinleiten\nDeckblatt\nerstellen\nDokumente\nEtikett\nerstellen\nVerhandlung\nabgebrochen\nLegt einen neuen Vertrag an\nVertr age\nDenstleistung\nC62-Bürom iete Standort West\nVertrag\" width=\"1100\" height=\"239\"></p></p>\n\n<p><p><img src=\"guides/p5D40D60D_8A08_4E78_9785_7C705958C275/img5.png\" alt=\"ELO\ncontract\nVertrag auswählen\nBitte Wahlen Sie den anzulegenden Vertrags typ aus\nDienstleistung\nKaufvertrag\nMietvertrag\nMitarbeitervertrag\nRahmenvertrag\nStandard-Vertrag\nWartungsvertrag\nAbbrechen\nVertragsmanagement\nD: Üienstleistung\nKaufvertrag\nMietvertrag\nHagen Inwobilien GmbH\nCS2-8üromiete Standort\nRahmenvertrag\nD: Standard-Vertrag\nD: Wartungsvertrag\nNeues Üeckblatt\" width=\"1100\" height=\"514\"></p></p>\n\n<p>Grundlage für die Typenauswahl ist ein Index Server Service, welcher eine Liste (<code>Array</code>) von Vertragstypen zurückgibt. Name und Beschreibung werden dabei im Client in einem Auswahldialog angezeigt.</p>\n\n<p><p><img src=\"guides/p5D40D60D_8A08_4E78_9785_7C705958C275/img7.png\" alt=\"Object\no\ndesc: &quot;\nname: &quot;Dienstleistung&quot;\nObject\nproto\nObject\no\ndesc: &quot;\nname: &quot;Kaufvertrag&quot;\n3223\nObject\nprota\n&lt;em&gt;Object&#39; &lt;/em&gt;Object&#39; &lt;em&gt;Object&#39; &lt;/em&gt;Object&#39; *Object)\" width=\"1346\" height=\"167\"></p></p>\n\n<p>Um die Werte an die Aktion zu übergeben kann im <code>cfgTemplate</code> auf den ausgewählten Eintrag inkl. aller Daten zugegriffen werden. Bspw.: <code>{{type.name}}</code> gibt den Namen des ausgewählten Typs zurück. Zusätzlich werden für den Typ-Auswahldialog noch Lokalisierungsinformationen benötigt.</p>\n\n<pre><code>{\n  \"type\": \"ADVANCED_ACTION\",\n  \"ribbon\": {&lt;br&gt;\n   ...\n    }\n  },\n  \"action\": {\n    \"selectType\": {\n      \"fct\": \"RF_sol_contract_service_GetContractTypes\"\n    },\n    \"fct\": \"RF_sol_contract_action_CreateContract\",\n    \"cfgTemplate\": \"{\\\"contractType\\\": \\\"{{type.name}}\\\", \\\"templateId\\\": \\\"{{type.objId}}\\\" }\",\n    \"locale\": {\n      \"errorDlgTitle\": \"sol.pubsec.client.file.create.dialog.error.title\",\n      \"typesDlgTitle\": \"sol.contract.client.contract.create.dialog.title\",\n      \"typesDlgHeader\": \"sol.contract.client.contract.create.dialog.header\",\n      \"typesDlgText\": \"sol.contract.client.contract.create.dialog.text\",\n      \"typesDlgNoTypes\": \"sol.contract.client.contract.create.msg.notype\"\n    }\n  }\n}\n</code></pre>\n\n<h3 id='p5D40D60D_8A08_4E78_9785_7C705958C275-section-auswahl-eines-elementes-aus-elo'>Auswahl eines Elementes aus ELO</h3>\n\n<p>Die Funktion <code>Dokument erzeugen</code> bietet beispielsweise die Möglichkeit vorab aus einer Reihe von Dokumentvorlagen zu wählen, die in ELO abgelegt sind. Das ausgewählte Element wird anschließend an die Aktion übergeben.</p>\n\n<p><span class=\"tag_important\">Die Tree-Auswahl gibt die Anwender die Möglichkeit aus einem Teilbereich von ELO einen Eintrag auszuwählen.</span></p>\n\n<p><p><img src=\"guides/p5D40D60D_8A08_4E78_9785_7C705958C275/img9.png\" alt=\"ELO contract\nVERTRÄGE\nFreigabe\nDOKUMENT\nANSICHT\nVertragsmanagement Archiv\nSuche\nDokument\nerze ugen\nDashboard\nAufgaben\nNils\nMosbach\nFeed\nSTART\nVertrag\nAnlegen\nAUFGABEN\nNach Funktion suchen\nZahlungsplan\nVerhandlung\neinleiten\n9\nVertrag\nabgeschlossen\nBearbeiten\nKündigung\neinleiten\nDeckblatt\nerstellen\nEtikett\nerstellen\nVerhandlung\nabgebr ochen\nErzeugt ein neues Dokument\nC62-Bürom iete Standort West\nVertragsmanagement\" width=\"1100\" height=\"202\"></p></p>\n\n<p><p><img src=\"guides/p5D40D60D_8A08_4E78_9785_7C705958C275/img11.png\" alt=\"ELO contract\nVertragsmanagement\nabgeschlossen\nTemplate\nBitte ein Template für das Dokumentauswählen\n- namenot set-\n@Test Dokument\nAufgaben 26\" width=\"1100\" height=\"200\"></p></p>\n\n<p>Um die Werte an die Aktion zu übergeben kann im <code>cfgTemplate</code> auf den ausgewählten Eintrag inkl. aller Daten zugegriffen werden. Bspw.: <code>{{tree.objId}}</code> gibt die Objekt-ID des ausgewählten Elements zurück. Zusätzlich werden für den Tree-Auswahldialog noch Lokalisierungsinformationen benötigt.</p>\n\n<pre><code>{\n  \"type\": \"ADVANCED_ACTION\",\n  \"ribbon\": {\n    …\n  },\n  \"action\": {\n    \"selectTree\": {\n       \"rootFromCfgFile\": \"ARCPATH:/Administration/Business Solutions/contract/Configuration/contract.Config\",\n       \"rootFromCfgProperty\": \"\\\"{{config.document.templateFolderId}}\\\"\"\n    },\n    \"fct\": \"sol.contract.as.actions.PrepareDocument\",\n    \"type\": \"AS\",\n    \"solution\": \"contract\",\n    \"cfgTemplate\": \"{\\\"parentId\\\": \\\"{{objId}}\\\", \\\"templateId\\\": \\\"{{tree.objId}}\\\" }\",\n    \"locale\": {\n      \"errorDlgTitle\": \"sol.pubsec.client.filecoversheet.dialog.noTemplates\",\n      \"treeDlgTitle\": \"sol.contract.client.document.selectTemplate.title\",\n      \"treeDlgHeader\": \"sol.contract.client.document.selectTemplate.text\"\n    }\n  }\n}\n</code></pre>\n\n<p>Interner Ablauf</p>\n\n<p><span class=\"tag_warning\">Nachfolgende Dokumentation soll ein tieferes Verständnis über den internen Ablauf auf Client-Seite geben.</span></p>\n\n<p>Durch diese Standardisierung ist es möglich, Aktionen im ELO Web Client sowie im ELO Java Client ohne großen Implementierungsaufwand anzubieten. Von der Klasse <code><a href=\"#!/api/sol.common.web.ActionDefinitionUtils\" rel=\"sol.common.web.ActionDefinitionUtils\" class=\"docClass\">sol.common.web.ActionDefinitionUtils</a></code>, welche bspw. die Registrierung der Buttons im Web Client vornimmt wird die Definition der Aktion an Hilfsfunktionen übergeben, welche u.a. Vorbedingungen wie die Typauswahl übernimmt.</p>\n\n<p>SIMPLE_ACTION: <a href=\"#!/api/sol.common.web.ActionHelper-method-executeSimpleAction\" rel=\"sol.common.web.ActionHelper-method-executeSimpleAction\" class=\"docClass\">sol.common.web.ActionHelper.executeSimpleAction</a>\nADVANCED_ACTION: <a href=\"#!/api/sol.common.web.ActionHelper-method-executeAdvancedAction\" rel=\"sol.common.web.ActionHelper-method-executeAdvancedAction\" class=\"docClass\">sol.common.web.ActionHelper.executeAdvancedAction</a></p>\n\n<p>Die Klassen <code><a href=\"#!/api/sol.common.jc.ActionHandler\" rel=\"sol.common.jc.ActionHandler\" class=\"docClass\">sol.common.jc.ActionHandler</a></code> sowie <code><a href=\"#!/api/sol.common.web.ActionHandler\" rel=\"sol.common.web.ActionHandler\" class=\"docClass\">sol.common.web.ActionHandler</a></code> führen anschließend die ELO Index Server oder ELO AS Aktion aus und sorgen für den Umgang mit den zurückgegebenen Verfahrensweisen (Events).</p>\n\n<h3 id='p5D40D60D_8A08_4E78_9785_7C705958C275-section-sonderf%C3%A4lle'>Sonderfälle</h3>\n\n<p>In besonderen Fällen kann es notwendig sein eine Aktion nicht über die Definition <code>Action definition</code> auszulösen. In diesem Fall können Aktionen auch direkt über das Scripting aufgerufen werden. Das erlaubt es auf besondere Anforderungen einzugehen. Nachfolgende Beispiele zeigen den direkten Aufruf von Aktionen über den ActionHandler. Zu beachten ist, dass dieser dennoch die zurückgegebenen Events verarbeitet.</p>\n\n<p><span\nstyle='font-weight:bold'>Java Client </span></p>\n\n<pre><code>//@include lib_Class.js\n\n<a href=\"#!/api/sol-static-method-define\" rel=\"sol-static-method-define\" class=\"docClass\">sol.define</a>(\"sol.pubsec.jc.FilingPlan\", {\n  singleton: true,\n\n  startChangeRequest: function (parentId) {\n    // specific Java Client scripting  \n    <a href=\"#!/api/sol.common.jc.ActionHandler-method-execute\" rel=\"sol.common.jc.ActionHandler-method-execute\" class=\"docClass\">sol.common.jc.ActionHandler.execute</a>(\"RF_sol_pubsec_action_FilingPlanChangeRequest\", {\"objId\": parentId});\n  }\n\n});\n</code></pre>\n\n<p><span\nstyle='font-weight:bold'>Web Client </span></p>\n\n<pre><code>(function () {\n  <a href=\"#!/api/sol-static-method-define\" rel=\"sol-static-method-define\" class=\"docClass\">sol.define</a>(\"sol.pubsec.web.FilingPlan\", {\n    singleton: true,\n\n    startChangeRequest : function (parentId) {            \n      // specific Web Client scripting            \n      <a href=\"#!/api/sol.common.web.ActionHandler-method-execute\" rel=\"sol.common.web.ActionHandler-method-execute\" class=\"docClass\">sol.common.web.ActionHandler.execute</a>(\"RF_sol_pubsec_action_FilingPlanChangeRequest\", {\"objId\": parentId});\n    }\n  });\n}());\n</code></pre>\n","title":"Aktionstypen und Client-Implementierung"});