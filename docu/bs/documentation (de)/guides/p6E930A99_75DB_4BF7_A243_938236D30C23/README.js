Ext.data.JsonP.p6E930A99_75DB_4BF7_A243_938236D30C23({"guide":"<h1 id='p6E930A99_75DB_4BF7_A243_938236D30C23-section-praxisbeispiele-f%C3%BCr-elo-module'>Praxisbeispiele für ELO-Module</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ul>\n<li>1. <a href='#!/guide/p6E930A99_75DB_4BF7_A243_938236D30C23-section-neue-js-klasse'>Neue JS-Klasse</a>\n </li>\n<li>2. <a href='#!/guide/p6E930A99_75DB_4BF7_A243_938236D30C23-section-utiltily-klassen-als-singleton'>Utiltily-Klassen als Singleton</a>\n </li>\n</ul></div>\n\n<p>Das Modularisieren von Funktionalität über eigene JS-Klassen ermöglicht es, Funktionalität erweiterbar und dokumentierbar zu halten. Im Folgenden sollen einige Rohlinge für das Erstellen von neuen JS-Klassen sowie Utility-Klassen gezeigt werden.</p>\n\n<h2 id='p6E930A99_75DB_4BF7_A243_938236D30C23-section-neue-js-klasse'>Neue JS-Klasse</h2>\n\n<pre><code>//@include lib_Class.js.js\n\n/**\n * Class documentation here\n *\n * @author {NAME}, ELO Digital Office GmbH\n * @version 1.0\n */\n<a href=\"#!/api/sol-static-method-define\" rel=\"sol-static-method-define\" class=\"docClass\">sol.define</a>(\"sol.common.ClassName\", {\n\n  /** \n   * @cfg {String} objId\n   */\n  objId: undefined,\n\n  /**\n   * @property {Number} myProperty\n   */\n  myProperty: 123,\n\n  initialize: function (config) {\n    var me = this;\n    me.$super(\"initialize\", [config]);\n  } \n\n});\n</code></pre>\n\n<h2 id='p6E930A99_75DB_4BF7_A243_938236D30C23-section-utiltily-klassen-als-singleton'>Utiltily-Klassen als Singleton</h2>\n\n<pre><code>//@include lib_Class.js.js\n\n/**\n * @singleton\n *\n * Class documentation here\n *\n * @author {NAME}, ELO Digital Office GmbH\n * @version 1.0\n */\n<a href=\"#!/api/sol-static-method-define\" rel=\"sol-static-method-define\" class=\"docClass\">sol.define</a>(\"sol.common.ClassName\", {\n  singleton: true,\n\n});\n</code></pre>\n","title":"Praxisbeispiele für ELO-Module"});