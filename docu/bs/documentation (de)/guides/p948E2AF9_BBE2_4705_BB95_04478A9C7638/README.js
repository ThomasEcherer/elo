Ext.data.JsonP.p948E2AF9_BBE2_4705_BB95_04478A9C7638({"guide":"<h1 id='p948E2AF9_BBE2_4705_BB95_04478A9C7638-section-indexserver-scripting'>Indexserver-Scripting</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ul>\n<li>1. <a href='#!/guide/p948E2AF9_BBE2_4705_BB95_04478A9C7638-section-ix-function-%28funktionsbaustein%29'>IX-Function (Funktionsbaustein)</a>\n </li>\n<li>2. <a href='#!/guide/p948E2AF9_BBE2_4705_BB95_04478A9C7638-section-ix-action-%28aktion%29'>IX-Action (Aktion)</a>\n </li>\n<li>3. <a href='#!/guide/p948E2AF9_BBE2_4705_BB95_04478A9C7638-section-ix-service'>IX-Service</a>\n </li>\n<li>4. <a href='#!/guide/p948E2AF9_BBE2_4705_BB95_04478A9C7638-section-dynamische-stichwortlisten'>Dynamische Stichwortlisten</a>\n </li>\n</ul></div>\n\n<p>Im Folgenden sollen einige Best Practices zum Erstellen von Funktionalität mithilfe des ELO Indexservers gegeben werden.</p>\n\n<h2 id='p948E2AF9_BBE2_4705_BB95_04478A9C7638-section-ix-function-%28funktionsbaustein%29'>IX-Function (Funktionsbaustein)</h2>\n\n<p>Indexserver-Funktionalität sollte soweit möglich und sinnvoll als <code><a href=\"#!/api/sol.common.ix.FunctionBase\" rel=\"sol.common.ix.FunctionBase\" class=\"docClass\">sol.common.ix.FunctionBase</a></code> implementiert werden. Dies stellt grundlegend sicher, dass die implementierte Funktion als Baustein im Workflow sowie eigenständig über die IX-Schnittstelle aufgerufen werden kann.</p>\n\n<pre><code>importPackage(Packages.de.elo.ix.client);\n\n//@include lib_Class.js\n//@include lib_sol.common.ix.FunctionBase.js\n// further includes\n\nvar logger = <a href=\"#!/api/sol-static-method-create\" rel=\"sol-static-method-create\" class=\"docClass\">sol.create</a>(\"<a href=\"#!/api/sol.Logger\" rel=\"sol.Logger\" class=\"docClass\">sol.Logger</a>\", { scope: \"{{namespace}}.ix.functions.{{className}}\" });\n\n/**\n * {{description}}\n *\n * @author {{author}}, {{company}}\n * @version 1.00.000\n *\n * @eloix\n * @requires <a href=\"#!/api/sol.common.Config\" rel=\"sol.common.Config\" class=\"docClass\">sol.common.Config</a>\n * @requires <a href=\"#!/api/sol.common.ConfigMixin\" rel=\"sol.common.ConfigMixin\" class=\"docClass\">sol.common.ConfigMixin</a>\n * @requires sol.common.ObjectUtils.js\n * @requires sol.common.StringUtils.js\n * @requires sol.common.JsonUtils.js\n * @requires sol.common.RepoUtils.js\n * @requires sol.common.WfUtils.js\n * @requires sol.common.ix.RfUtils.js\n * @requires <a href=\"#!/api/sol.common.ix.FunctionBase\" rel=\"sol.common.ix.FunctionBase\" class=\"docClass\">sol.common.ix.FunctionBase</a>\n */\n<a href=\"#!/api/sol-static-method-define\" rel=\"sol-static-method-define\" class=\"docClass\">sol.define</a>(\"{{namespace}}.ix.functions.{{className}}\", {\n  extend: \"<a href=\"#!/api/sol.common.ix.FunctionBase\" rel=\"sol.common.ix.FunctionBase\" class=\"docClass\">sol.common.ix.FunctionBase</a>\",\n\n  // you might add required configuration here //\n  //requiredConfig: [],\n\n  // configuration section //\n  /** \n   * @cfg {Type} exampleCfg\n   */\n\n  // property section //\n  /**\n   * @private\n   * @property {Type} exampleProperty\n   */\n\n  initialize: function (config) {\n    var me = this;\n    me.$super(\"<a href=\"#!/api/sol.common.ix.FunctionBase\" rel=\"sol.common.ix.FunctionBase\" class=\"docClass\">sol.common.ix.FunctionBase</a>\", \"initialize\", [config]);\n    // do your initialization //\n  },\n\n  /**\n   * {{description}}\n   */\n  process: function () {\n    var me = this;\n    // do your processing //\n  }\n\n  // add your internal methods //\n\n});\n\n/**\n * @member {{namespace}}.ix.functions.{{className}}\n * @static\n * @inheritdoc <a href=\"#!/api/sol.common.ix.FunctionBase-static-method-onEnterNode\" rel=\"sol.common.ix.FunctionBase-static-method-onEnterNode\" class=\"docClass\">sol.common.ix.FunctionBase.onEnterNode</a>\n */\nfunction onEnterNode(ci, userId, wfDiagram, nodeId) {\n  logger.enter(\"onEnterNode_{{className}}\", { \"flowId\": wfDiagram.id, \"nodeId\": nodeId });\n  var config = <a href=\"#!/api/sol.common.WfUtils-method-parseAndCheckParams\" rel=\"sol.common.WfUtils-method-parseAndCheckParams\" class=\"docClass\">sol.common.WfUtils.parseAndCheckParams</a>(wfDiagram, nodeId), // you might add required properties here\n      module;\n\n  // These might be usefull in your class //\n  //config.objId = wfDiagram.objId;\n  //config.ci = ci;\n  module = <a href=\"#!/api/sol-static-method-create\" rel=\"sol-static-method-create\" class=\"docClass\">sol.create</a>(\"{{namespace}}.ix.functions.{{className}}\", config);\n\n  module.process();\n\n  logger.exit(\"onEnterNode_{{className}}\");\n}\n\n/**\n * @member {{namespace}}.ix.functions.{{className}}\n * @static\n * @inheritdoc <a href=\"#!/api/sol.common.ix.FunctionBase-static-method-onExitNode\" rel=\"sol.common.ix.FunctionBase-static-method-onExitNode\" class=\"docClass\">sol.common.ix.FunctionBase.onExitNode</a>\n */\nfunction onExitNode(ci, userId, wfDiagram, nodeId) {\n  logger.enter(\"onExitNode_{{className}}\", { \"flowId\": wfDiagram.id, \"nodeId\": nodeId });\n  var config = <a href=\"#!/api/sol.common.WfUtils-method-parseAndCheckParams\" rel=\"sol.common.WfUtils-method-parseAndCheckParams\" class=\"docClass\">sol.common.WfUtils.parseAndCheckParams</a>(wfDiagram, nodeId), // you might add required properties here\n      module;\n\n  // These might be usefull in your class //\n  //config.objId = wfDiagram.objId;\n  //config.ci = ci;\n  module = <a href=\"#!/api/sol-static-method-create\" rel=\"sol-static-method-create\" class=\"docClass\">sol.create</a>(\"{{namespace}}.ix.functions.{{className}}\", config);\n\n  module.process();\n\n  logger.exit(\"onExitNode_{{className}}\");\n}\n\n/**\n * @member {{namespace}}.ix.functions.{{className}}\n * @method RF_{{namespaceWithUnderscores}}_function_{{className}}\n * @static\n * @inheritdoc <a href=\"#!/api/sol.common.ix.FunctionBase-static-method-RF_FunctionName\" rel=\"sol.common.ix.FunctionBase-static-method-RF_FunctionName\" class=\"docClass\">sol.common.ix.FunctionBase.RF_FunctionName</a>\n */\nfunction RF_{{namespaceWithUnderscores}}_function_{{className}}(ec, configAny) {\n  logger.enter(\"RF_{{namespaceWithUnderscores}}_function_{{className}}\", configAny);\n  var rfUtils = <a href=\"#!/api/sol.common.ix.RfUtils\" rel=\"sol.common.ix.RfUtils\" class=\"docClass\">sol.common.ix.RfUtils</a>,\n      config = rfUtils.parseAndCheckParams(ec, arguments.callee.name, configAny), // you might add required properties here\n      module;\n\n  // These might be usefull in your class //\n  //config.ci = ec.ci;\n  //config.user = ec.user;\n\n  module = <a href=\"#!/api/sol-static-method-create\" rel=\"sol-static-method-create\" class=\"docClass\">sol.create</a>(\"{{namespace}}.ix.functions.{{className}}\", config);\n  module.process();\n\n  logger.exit(\"RF_{{namespaceWithUnderscores}}_function_{{className}}\");\n}\n</code></pre>\n\n<h2 id='p948E2AF9_BBE2_4705_BB95_04478A9C7638-section-ix-action-%28aktion%29'>IX-Action (Aktion)</h2>\n\n<pre><code>importPackage(Packages.de.elo.ix.client);\n\n//@include lib_Class.js\n//@include lib_sol.common.ix.ActionBase.js\n// further includes\n\nvar logger = <a href=\"#!/api/sol-static-method-create\" rel=\"sol-static-method-create\" class=\"docClass\">sol.create</a>(\"<a href=\"#!/api/sol.Logger\" rel=\"sol.Logger\" class=\"docClass\">sol.Logger</a>\", { scope: \"{{namespace}}.ix.actions.{{className}}\" });\n\n/**\n * {{description}}\n * \n * @author {{author}}, {{company}}\n * @version 1.00.000\n * \n * @eloix\n * @requires <a href=\"#!/api/sol.common.JsonUtils\" rel=\"sol.common.JsonUtils\" class=\"docClass\">sol.common.JsonUtils</a>\n * @requires <a href=\"#!/api/sol.common.SordUtils\" rel=\"sol.common.SordUtils\" class=\"docClass\">sol.common.SordUtils</a>\n * @requires <a href=\"#!/api/sol.common.IxUtils\" rel=\"sol.common.IxUtils\" class=\"docClass\">sol.common.IxUtils</a>\n * @requires <a href=\"#!/api/sol.common.CounterUtils\" rel=\"sol.common.CounterUtils\" class=\"docClass\">sol.common.CounterUtils</a>\n * @requires <a href=\"#!/api/sol.common.TranslateTerms\" rel=\"sol.common.TranslateTerms\" class=\"docClass\">sol.common.TranslateTerms</a>\n * @requires <a href=\"#!/api/sol.common.WfUtils\" rel=\"sol.common.WfUtils\" class=\"docClass\">sol.common.WfUtils</a>\n * @requires <a href=\"#!/api/sol.common.ix.RfUtils\" rel=\"sol.common.ix.RfUtils\" class=\"docClass\">sol.common.ix.RfUtils</a>\n * @requires <a href=\"#!/api/sol.common.ix.ActionBase\" rel=\"sol.common.ix.ActionBase\" class=\"docClass\">sol.common.ix.ActionBase</a>\n */\n<a href=\"#!/api/sol-static-method-define\" rel=\"sol-static-method-define\" class=\"docClass\">sol.define</a>(\"{{namespace}}.ix.actions.{{className}}\", {\n  extend: \"<a href=\"#!/api/sol.common.ix.ActionBase\" rel=\"sol.common.ix.ActionBase\" class=\"docClass\">sol.common.ix.ActionBase</a>\",\n\n  // you might add required configuration here //\n  //requiredConfig: [],\n\n  // configuration section //\n  /** \n   * @cfg {Type} exampleCfg\n   */\n\n  // property section //\n  /**\n   * @private\n   * @property {Type} exampleProperty\n   */\n\n  initialize: function (config) {\n    var me = this;\n    me.$super(\"<a href=\"#!/api/sol.common.ix.ActionBase\" rel=\"sol.common.ix.ActionBase\" class=\"docClass\">sol.common.ix.ActionBase</a>\", \"initialize\", [config]);\n    // do your initialization //\n  },\n\n  /**\n   * Returns the name of this action.\n   * @return {String}\n   */\n  getName: function () {\n    return \"{{className}}\";\n  },\n\n  /**\n   * {{description}}\n   */\n  process: function () {\n    var me = this;\n    // do your processing //\n    me.addErrorEvent(\"This is just an example, this action has no implementaion yet\");\n  }\n\n  // add your internal methods //\n\n});\n\n/**\n * @member {{namespace}}.ix.actions.{{className}}\n * @method RF_{{namespaceWithUnderscores}}_action_{{className}}\n * @static\n * @inheritdoc <a href=\"#!/api/sol.common.ix.ActionBase-static-method-RF_FunctionName\" rel=\"sol.common.ix.ActionBase-static-method-RF_FunctionName\" class=\"docClass\">sol.common.ix.ActionBase.RF_FunctionName</a>\n */\nfunction RF_{{namespaceWithUnderscores}}_action_{{className}}(ec, configAny) {\n  var config, action, result;\n\n  logger.enter(\"RF_{{namespaceWithUnderscores}}_action_{{className}}\", configAny);\n\n  config = <a href=\"#!/api/sol.common.ix.RfUtils-method-parseAndCheckParams\" rel=\"sol.common.ix.RfUtils-method-parseAndCheckParams\" class=\"docClass\">sol.common.ix.RfUtils.parseAndCheckParams</a>(ec, arguments.callee.name, configAny), // you might add required properties here\n\n  // These might be usefull in your class //\n  //config.ci = ec.ci;\n  //config.user = ec.user;\n\n  action = <a href=\"#!/api/sol-static-method-create\" rel=\"sol-static-method-create\" class=\"docClass\">sol.create</a>(\"{{namespace}}.ix.actions.{{className}}\", config);\n  result = action.execute();\n\n  logger.exit(\"RF_{{namespaceWithUnderscores}}_action_{{className}}\");\n\n  return result;\n}\n</code></pre>\n\n<h2 id='p948E2AF9_BBE2_4705_BB95_04478A9C7638-section-ix-service'>IX-Service</h2>\n\n<p>Indexserver-Funktionalität, die Daten zurückliefert oder es erfordert, dass das Ergebnis weiterverarbeitet wird, sollte soweit möglich und sinnvoll als <code><a href=\"#!/api/sol.common.ix.ServiceBase\" rel=\"sol.common.ix.ServiceBase\" class=\"docClass\">sol.common.ix.ServiceBase</a></code> implementiert werden.</p>\n\n<pre><code>importPackage(Packages.de.elo.ix.client);\n\n//@include lib_Class.js\n//@include lib_sol.common.ix.ServiceBase.js\n\nvar logger = <a href=\"#!/api/sol-static-method-create\" rel=\"sol-static-method-create\" class=\"docClass\">sol.create</a>(\"<a href=\"#!/api/sol.Logger\" rel=\"sol.Logger\" class=\"docClass\">sol.Logger</a>\", { scope: \"{{namespace}}.ix.services.{{className}}\" });\n\n/**\n * {{description}}\n *\n * @author {{author}}, {{company}}\n * @version 1.00.000\n *\n * @eloix\n * @requires <a href=\"#!/api/sol.common.JsonUtils\" rel=\"sol.common.JsonUtils\" class=\"docClass\">sol.common.JsonUtils</a>\n * @requires <a href=\"#!/api/sol.common.ix.RfUtils\" rel=\"sol.common.ix.RfUtils\" class=\"docClass\">sol.common.ix.RfUtils</a>\n * @requires <a href=\"#!/api/sol.common.ix.ServiceBase\" rel=\"sol.common.ix.ServiceBase\" class=\"docClass\">sol.common.ix.ServiceBase</a>\n */\n<a href=\"#!/api/sol-static-method-define\" rel=\"sol-static-method-define\" class=\"docClass\">sol.define</a>(\"{{namespace}}.ix.services.{{className}}\", {\n  extend: \"<a href=\"#!/api/sol.common.ix.ServiceBase\" rel=\"sol.common.ix.ServiceBase\" class=\"docClass\">sol.common.ix.ServiceBase</a>\",\n\n  // you might add required configuration here //\n  //requiredConfig: [],\n\n  // configuration section //\n  /** \n   * @cfg {Type} exampleCfg\n   */\n\n  // property section //\n  /**\n   * @private\n   * @property {Type} exampleProperty\n   */\n\n  initialize: function (config) {\n    var me = this;\n    me.$super(\"<a href=\"#!/api/sol.common.ix.ServiceBase\" rel=\"sol.common.ix.ServiceBase\" class=\"docClass\">sol.common.ix.ServiceBase</a>\", \"initialize\", [config]);\n    // do your initialization //\n  },\n\n  /**\n   * {{description}}\n   */\n  process: function () {\n    var me = this;\n    // do your processing //\n    return { hallo: \"welt\" };\n\n  }\n\n  // add your internal methods //\n\n});\n\n/**\n * @member {{namespace}}.ix.services.{{className}}\n * @method RF_{{namespaceWithUnderscores}}_service_{{className}}\n * @static\n * @inheritdoc <a href=\"#!/api/sol.common.ix.ServiceBase-static-method-RF_ServiceBaseName\" rel=\"sol.common.ix.ServiceBase-static-method-RF_ServiceBaseName\" class=\"docClass\">sol.common.ix.ServiceBase.RF_ServiceBaseName</a>\n */\nfunction RF_{{namespaceWithUnderscores}}_service_{{className}}(ec, configAny) {\n  var rfUtils = <a href=\"#!/api/sol.common.ix.RfUtils\" rel=\"sol.common.ix.RfUtils\" class=\"docClass\">sol.common.ix.RfUtils</a>,\n      config, service, result;\n\n  logger.enter(\"RF_{{namespaceWithUnderscores}}_service_{{className}}\", configAny);\n\n  config = rfUtils.parseAndCheckParams(ec, arguments.callee.name, configAny), // you might add required properties here\n\n  // These might be usefull in your class //\n  //config.ci = ec.ci;\n  //config.user = ec.user;\n\n  service= <a href=\"#!/api/sol-static-method-create\" rel=\"sol-static-method-create\" class=\"docClass\">sol.create</a>(\"{{namespace}}.ix.services.{{className}}\", config);\n  result = rfUtils.stringify(service.process());\n\n  logger.exit(\"RF_{{namespaceWithUnderscores}}_service_{{className}}\");\n\n  return result;\n}\n</code></pre>\n\n<h2 id='p948E2AF9_BBE2_4705_BB95_04478A9C7638-section-dynamische-stichwortlisten'>Dynamische Stichwortlisten</h2>\n\n<p>Dynamische Stichwortlisten sollten mithilfe der Klasse <code><a href=\"#!/api/sol.common.ix.DynKwlDatabaseIterator\" rel=\"sol.common.ix.DynKwlDatabaseIterator\" class=\"docClass\">sol.common.ix.DynKwlDatabaseIterator</a></code> implementiert werden. Diese kapselt grundlegende Anforderungen an den Umgang mit Datenbanken und lässt sich einfach konfigurieren.</p>\n\n<pre><code>importPackage(Packages.de.elo.ix.jscript);\nimportPackage(Packages.de.elo.ix.scripting);\n\n//@include lib_Class.js.js\n//@include lib_sol.common.ix.DynKwlDatabaseIterator.js\n\n/**\n * Dynamic keyword list that queries the recipients database.\n *\n * The list of current fields is returned as a table.\n *\n * |Name|Key|Example data|\n * |:-----|:------|:------|\n * |Company Code|COMPANY_NO|122|\n * |Name|COMPANY_NAME|ELO Digital Office GmbH|\n * |Street|COMPANY_ADDRESS_STREET|TuebingerStr. 34|\n * |Zip code|COMPANY_ADDRESS_ZIPCODE|70178|\n * |City|COMPANY_ADDRESS_CITY|Stuttgart|\n * |Country|COMPANY_ADDRESS_COUNTRY|DE|\n *\n * Limits results to COMPANY_NO.\n *\n * @author {{author}}, {{company}}\n * @version 1.00.000\n */\n<a href=\"#!/api/sol-static-method-define\" rel=\"sol-static-method-define\" class=\"docClass\">sol.define</a>(\"sol.invoice.ix.dynkwl.Company\", {\n  extend: \"<a href=\"#!/api/sol.common.ix.DynKwlDatabaseIterator\" rel=\"sol.common.ix.DynKwlDatabaseIterator\" class=\"docClass\">sol.common.ix.DynKwlDatabaseIterator</a>\",\n  /**\n   * @cfg\n   * @inheritdoc\n   */\n  tableTitle: \"Firma\",\n  /**\n   * @cfg\n   * @inheritdoc\n   */\n  sqlQuery: \"select CODE, NAME, STREET, ZIPCODE, CITY, COUNTRY_CODE from sol_invoice_company where CODE like ? OR NAME like ?\",\n  /**\n   * @cfg\n   * @inheritdoc\n   */\n  sqlParams: [\n    {mode: \"STARTS_WITH\"},\n    {mode: \"CONTAINS\"}\n  ],\n  /**\n   * @cfg\n   * @inheritdoc\n   */\n  tableKeyNames: [\"COMPANY_CODE\", \"COMPANY_NAME\", null, null, null, null],\n  //tableKeyNames: [\"COMPANY_CODE\", \"COMPANY_NAME\", \"COMPANY_ADDRESS_STREET\", \"COMPANY_ADDRESS_ZIPCODE\", \"COMPANY_ADDRESS_CITY\", \"COMPANY_ADDRESS_COUNTRY\"],\n  /**\n   * @cfg\n   * @inheritdoc\n   */\n  tableHeaders: [\"Nummer\", \"Name\", \"Straße\", \"PLZ\", \"Ort\", \"Land\"]\n});\n\n/**\n * @static\n * @member sol.invoice.ix.dynkwl.Company\n * Implements a DynamicKeywordDataProvider for this keyword list that can be used by checkoutKeywordsDynamic.\n * @returns {DynamicKeywordDataProvider}\n */\nfunction getDataIterator() {\n  var log = <a href=\"#!/api/sol-static-method-create\" rel=\"sol-static-method-create\" class=\"docClass\">sol.create</a>(\"<a href=\"#!/api/sol.Logger\" rel=\"sol.Logger\" class=\"docClass\">sol.Logger</a>\", {scope: \"sol.invoice.ix.dynkwl.Company\"}),\n    iterator;\n  try {\n    log.info(\"DynamicKeywordList (\");\n    iterator = <a href=\"#!/api/sol-static-method-create\" rel=\"sol-static-method-create\" class=\"docClass\">sol.create</a>(\"sol.invoice.ix.dynkwl.Company\", {});\n    return new DynamicKeywordDataProvider(iterator);\n  } finally {\n    log.info(\")getDataIterator\");\n  }\n}\n</code></pre>\n","title":"Indexserver-Scripting"});