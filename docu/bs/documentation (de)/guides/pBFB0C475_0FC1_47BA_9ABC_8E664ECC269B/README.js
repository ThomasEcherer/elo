Ext.data.JsonP.pBFB0C475_0FC1_47BA_9ABC_8E664ECC269B({"guide":"<h1 id='pBFB0C475_0FC1_47BA_9ABC_8E664ECC269B-section-templates'>Templates</h1>\n\n<p>Bei der Erzeugung von E-Mails, Aktenzeichen, Konfigurationsdateien oder sonstigen Daten in ELO kann mithilfe von Templates ein generischer Ansatz definiert werden. Werte werden anschließend zur Laufzeit bspw. durch Metadaten ersetzt.</p>\n\n<p><span\nstyle='font-weight:bold'>Templates sind dabei ein essentieller Bestandteil von Lösungen, da sie Anpassbarkeit und Flexibilität gewährleisten. So sollten bspw. alle Bezeichnungen mithilfe von Templates beschrieben werden. </span></p>\n\n<p>Die Grundlage für das Templating liefert das Open Source-Projekt <a\nhref=\"http://handlebarsjs.com/\">handlebars.js </a></p>\n\n<p>Templating kommt in vielen Stellen der ELO Business Solutions zum Einsatz. u.a. bei dem …</p>\n\n<ul>\n<li><span\nstyle='font-weight:bold'>… Aufbau von Ablagepfaden.</span> Hier steht in der Konfiguration einzelner Lösung ein mächtiges Instrument zur Verfügung Ablagepfade aufzubauen.</li>\n<li><span\nstyle='font-weight:bold'>… Generieren von Kurzbezeichnungen und Aktenzeichen.</span> Aktenzeichen unterliegen unterschiedlichen unternehmerischen/ behördlichen Anforderungen. Durch Templates kann das Zeichen schnell angepasst werden.</li>\n<li><span\nstyle='font-weight:bold'>… Erzeugen von Export-Dokumenten.</span> Export-Datensätze bspw. in Form von XML oder CSV können mit Templates an die Anforderungen des Zielsystems angepasst werden.</li>\n<li><span\nstyle='font-weight:bold'>… Erzeugen von PDF-Dokumenten.</span> Für die Erzeugung von PDF-Dokumenten wird verstärkt auf Apache FOP gesetzt. Diese Vorgehensweise lässt sich ideal mit Templates kombinieren.</li>\n</ul>\n\n\n<blockquote><p><span\nstyle='font-weight:bold;font-style:italic'>Beispiel:</span><span\nstyle='font-style:italic'> Das Aktenzeichen setzt sich aus dem Aktenplanzeichen und einem Zähler zusammen. Das Aktenzeichen wird im Metadatenfeld <code>FILING_PLAN_REFERENCE</code> gespeichert. Sord-Objekte des Index Servers lassen sich nur bedingt für Templates einsetzen, da hier eine teils verschachtelte Datenstruktur von objKeys vorliegt. Der </span><a\nhref=\"#!/guide/pCD2692F9_F8F1_41E8_9DF7_EFC5B4F7B6CC\"><span\nstyle='font-style:italic'>Object Formatter</span></a><span style='font-style:\nitalic'> erlaubt es dabei Objekte in einen einfach zu verwendenden Objektaufbau zu transformieren.</span></p></blockquote>\n\n<pre><code>{{sord.objKeys.FILING_PLAN_REFERENCE}}-{{count \"TEST\"}}\n</code></pre>\n\n<blockquote><p><span\nstyle='font-style:italic'>Hätte das aktuelle Element in den Metadaten das Aktenplanzeichen (FILING_PLAN_REFERENCE) </span><span\nstyle='font-weight:bold;font-style:italic'>12.10</span><span style='font-style:\nitalic'> gesetzt, ergäbe sich folgendes Resultat:</span></p></blockquote>\n\n<pre><code>12.10-1\n12.10-2\n12.10-3\n...\n</code></pre>\n\n<p>Vorteilhaft in <span\nstyle='font-style:italic'>handlebars</span> ist die Verwendung sogenannter 'Helper'. Diese ermöglichen es, Anwendungsfunktionalität wie bspw. die Indexserver-Counter in Templates zu modularisieren. So wird im obigen Beispiel dem Helper <code>count</code> ein Nummernkreis <code>TEST</code> übergeben. Der Indexserver legt hierfür nun einen Counter an und zählt diesen bei jeder Verwendung um eins hoch.</p>\n\n<p>Eine erweiterte Beschreibung inklusive einiger Beispiele der Funktionalität kann der Klasse <code><a href=\"#!/api/sol.common.Template\" rel=\"sol.common.Template\" class=\"docClass\">sol.common.Template</a></code> entnommen werden.</p>\n\n<p>Einfaches Beispiel</p>\n\n<p>Folgendes Beispiel veranschaulicht eine einfache Verwendung des Template-Mechanismus der Klasse <code><a href=\"#!/api/sol.common.Template\" rel=\"sol.common.Template\" class=\"docClass\">sol.common.Template</a></code> :</p>\n\n<pre><code>var tpl = <a href=\"#!/api/sol-static-method-create\" rel=\"sol-static-method-create\" class=\"docClass\">sol.create</a>('<a href=\"#!/api/sol.common.Template\" rel=\"sol.common.Template\" class=\"docClass\">sol.common.Template</a>', {\n    source = 'Hello {{name}}.'\n});\n\nvar result = tpl.apply({\n  name: 'Marcus'\n});\n\n// result = Hello Marcus.\n</code></pre>\n\n<h2 id='pBFB0C475_0FC1_47BA_9ABC_8E664ECC269B-section-erweitertes-beispiel-anhand-eines-sord-objekts'>Erweitertes Beispiel anhand eines Sord-Objekts</h2>\n\n<p>Templates können auch als Text-Dateien im Archiv abgelegt werden. Hierfür muss das Template anhand einer GUID oder ARCPATH-Referenz geladen werden.</p>\n\n<p>Anschließend kann über den Object Formatter ein bestehendes Sord in ein Template-Sord transformiert und im Template gesetzt werden:</p>\n\n<pre><code>var tpl = <a href=\"#!/api/sol-static-method-create\" rel=\"sol-static-method-create\" class=\"docClass\">sol.create</a>('<a href=\"#!/api/sol.common.Template\" rel=\"sol.common.Template\" class=\"docClass\">sol.common.Template</a>', {});\n\n// load data from a text file in ELO\ntpl.load('GUID');\n\n// accessing objKey properties is difficult.\n// use <a href=\"#!/api/sol.common.ObjectFormatter\" rel=\"sol.common.ObjectFormatter\" class=\"docClass\">sol.common.ObjectFormatter</a> to get an easy to use sord object.\nvar data = <a href=\"#!/api/sol.common.ObjectFormatter-method-format\" rel=\"sol.common.ObjectFormatter-method-format\" class=\"docClass\">sol.common.ObjectFormatter.format</a>({\n  sord: {\n    formatter: '<a href=\"#!/api/sol.common.ObjectFormatter.TemplateSord\" rel=\"sol.common.ObjectFormatter.TemplateSord\" class=\"docClass\">sol.common.ObjectFormatter.TemplateSord</a>',\n    data: sord\n});\n\nvar result = tpl.apply(data);\n</code></pre>\n","title":"Templates"});