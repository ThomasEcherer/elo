Ext.data.JsonP.p12_Technische_Konzepte({"guide":"<h1 id='p12_Technische_Konzepte-section-technical-concepts'>Technical concepts</h1>\n\n\n<p>To ensure that solutions can be adapted to individual projects, a number of technological concepts have been developed which allow users to break down the individual components in a solution into modules, enabling the core solution components to be updated as required.</p>\n\n\n<p><span\nstyle='font-weight:bold'>These concepts are bundled into a package called </span><span\nstyle='font-weight:bold;font-style:italic'>Business Solutions Common</span><span\nstyle='font-weight:bold'> and can be used for own projects.</span></p>\n\n\n<p><span\nstyle='font-weight:bold'>The following sections provide a summary and overview of the implemented concepts. You can refer to the class documentation for detailed information.</span></p>\n\n\n<p>In essence, a <a\nhref=\"#!/guide/p13_Klassenframework\"><span\nstyle='font-weight:bold'>class framework</span></a> based on object relational principles was created which enables the developer to extend the functions of existing components. For example, you can define <a\nhref=\"#!/guide/p14_Dynamische_Stichwortlisten\"><span\nstyle='font-weight:bold'>dynamic keyword lists</span></a> quickly and easily just by modifying five config properties. A series of <a\nhref=\"#!/guide/p15_Hilfsklassen\"><span\nstyle='font-weight:bold'> utility classes</span></a> cover the basic requirements of solutions and helps when dealing with Indexserver objects and access to the Indexserver. </p>\n\n\n<h2 id='p12_Technische_Konzepte-section-actions%2C-function-modules-and-services'>Actions, function modules and services</h2>\n\n\n<p>Based on this, the implementation of client extensions (e.g. <code>Create contract</code>) was standardized with server-side <a\nhref=\"#!/guide/p5_Aktionen\"><span\nstyle='font-weight:bold'>actions</span></a>, which means that functions are available in all the ELO clients. Technical processes are mapped using <a\nhref=\"#!/guide/p6_Funktionsbausteine\"><span\nstyle='font-weight:bold'>function modules</span></a> with the help of ELO workflows. This provides maximum flexibility and follows on from the premise of adapting the logic without having to write code.</p>\n\n\n<p><p><img src=\"guides/p12_Technische_Konzepte/img1.png\" alt=\"\" width=\"815\" height=\"495\"></p></p>\n\n\n<p><a\nhref=\"#!/guide/p16_Services\"><span\nstyle='font-weight:bold'>Services</span></a> are used for collecting data or providing various operations that need to be processed by the calling instance. For example, the <span\nstyle='font-weight:bold'> <code>sol.common.ix.service.ChildrenDataCollector</code></span> class can be used to collect and prepare large volumes of data. An ELO app can transfer which information (e.g.<code>objKey</code> parameters) are required, for example. This reduces traffic and ensures that apps for mobile devices are high performance.</p>\n\n","title":"Technical concepts"});