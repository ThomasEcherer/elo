Ext.data.JsonP.p20_Roles__Benutzer_dynamisch_ermitteln({"guide":"<h1 id='p20_Roles__Benutzer_dynamisch_ermitteln-section-dynamically-assigning-roles-to-users'>Dynamically assigning roles to users</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ul>\n<li>1. <a href='#!/guide/p20_Roles__Benutzer_dynamisch_ermitteln-section-definition-of-groups-and-rules'>Definition of groups and rules</a>\n </li>\n<li>2. <a href='#!/guide/p20_Roles__Benutzer_dynamisch_ermitteln-section-determining-a-user'>Determining a user</a>\n </li>\n</ul></div>\n\n\n<p>In different approval scenarios, users or groups must be determined using rules that are based on underlying information.</p>\n\n\n<blockquote>\n<p><span\nstyle='font-weight:bold;font-style:italic'>Example:</span><span\nstyle='font-style:italic'> In invoice processing, the <code>INVOICE_NET_AMOUNT</code> field denotes the net amount. In the approval process, it could be possible that the </span><span\nstyle='font-weight:bold;font-style:italic'>Management</span><span\nstyle='font-style:italic'> group needs to approve all invoices that exceed the net amount of &euro;10,000.</span></p>\n</blockquote>\n\n\n<p>The <code>sol.common.Rules</code> class can be used to store and evaluate rules like this based on metadata in a configuration. You can refer to the class documentation for detailed information on how to use this.</p>\n\n\n<p>A configuration can contain multiple roles and assign a number of users/groups to each role that apply if the conditions are met.</p>\n\n\n<h2 id='p20_Roles__Benutzer_dynamisch_ermitteln-section-definition-of-groups-and-rules'>Definition of groups and rules</h2>\n\n\n<h3 id='p20_Roles__Benutzer_dynamisch_ermitteln-section-configuration-via-an-interface'>Configuration via an interface</h3>\n\n\n<p>There is an ELO app for configuring the roles that makes it easier to add users and conditions.</p>\n\n\n<p>In the following interface, the <code>sol.management</code> group is used for the <code>APPROVAL</code> role if the condition <code>INVOICE_NET_AMOUNT</code> &gt; 3000 is met.</p>\n\n\n<p><p><img src=\"guides/p20_Roles__Benutzer_dynamisch_ermitteln/img1.png\" alt=\"\" width=\"1917\" height=\"611\"></p></p>\n\n\n<h3 id='p20_Roles__Benutzer_dynamisch_ermitteln-section-internal-configuration'>Internal configuration</h3>\n\n\n<pre><code>var myRoleConfig = {\n  ROLE: [\n    { user : &quot;user1&quot;, conditions : [ { grp : &quot;LENGTH&quot;, rel : &quot;GT&quot;, val : 3000, converter : &quot;custom.converters.NumberConverter.inchesInCm&quot; } ] },\n    { user : &quot;user2&quot; }\n  ]\n}\n</code></pre>\n\n\n<h2 id='p20_Roles__Benutzer_dynamisch_ermitteln-section-determining-a-user'>Determining a user</h2>\n\n\n<pre><code>var sord = ixc.ix().checkoutSord(...);\nvar users = <a href=\"#!/api/sol.common.Roles-method-getUsers\" rel=\"sol.common.Roles-method-getUsers\" class=\"docClass\">sol.common.Roles.getUsers</a>('ROLE', sord, myRoleConfig);\n</code></pre>\n\n","title":"Dynamically assigning roles to users"});