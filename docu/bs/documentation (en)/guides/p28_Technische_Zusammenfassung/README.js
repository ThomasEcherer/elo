Ext.data.JsonP.p28_Technische_Zusammenfassung({"guide":"<h1 id='p28_Technische_Zusammenfassung-section-technical-summary'>Technical summary</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ul>\n<li>1. <a href='#!/guide/p28_Technische_Zusammenfassung-section-client-startup'>Client startup</a>\n </li>\n<li>2. <a href='#!/guide/p28_Technische_Zusammenfassung-section-executing-an-action-in-the-client'>Executing an action in the client</a>\n </li>\n<li>3. <a href='#!/guide/p28_Technische_Zusammenfassung-section-server-implementation'>Server implementation</a>\n </li>\n</ul></div>\n\n\n<p>A number of helper and handler classes ensure that the action concept is implemented properly. The following summarizes the process to give you a general overview.</p>\n\n\n<h2 id='p28_Technische_Zusammenfassung-section-client-startup'>Client startup</h2>\n\n\n<p>An action is described via an <code>action definition</code>. This definition contains information for the ribbon as well as for executing the action. The <a href=\"#!/api/sol.common.jc.ActionDefinitionUtils\" rel=\"sol.common.jc.ActionDefinitionUtils\" class=\"docClass\">sol.common.jc.ActionDefinitionUtils</a> (Java Client) and <a href=\"#!/api/sol.common.web.ActionDefinitionUtils\" rel=\"sol.common.web.ActionDefinitionUtils\" class=\"docClass\">sol.common.web.ActionDefinitionUtils</a> (Web Client) classes build the ribbon with the help of the <code>sol.common.ix.services.RibbonDefinitionCollector</code> service.</p>\n\n\n<h2 id='p28_Technische_Zusammenfassung-section-executing-an-action-in-the-client'>Executing an action in the client</h2>\n\n\n<p>The <code>ActionDefinitionUtils</code> transfers information for executing an action to the <code>ActionHelper</code>. This executes preconditions and then calls the action handler. There are currently two implementations available:</p>\n\n\n<p><span\nstyle='font-weight:bold'>SIMPLE_ACTION</span>: <a href=\"#!/api/sol.common.web.ActionHelper-method-executeSimpleAction\" rel=\"sol.common.web.ActionHelper-method-executeSimpleAction\" class=\"docClass\">sol.common.web.ActionHelper.executeSimpleAction</a>\n<span\nstyle='font-weight:bold'>ADVANCED_ACTION</span>: <a href=\"#!/api/sol.common.web.ActionHelper-method-executeAdvancedAction\" rel=\"sol.common.web.ActionHelper-method-executeAdvancedAction\" class=\"docClass\">sol.common.web.ActionHelper.executeAdvancedAction</a></p>\n\n\n<p>The <code><a href=\"#!/api/sol.common.jc.ActionHandler\" rel=\"sol.common.jc.ActionHandler\" class=\"docClass\">sol.common.jc.ActionHandler</a></code> and <code><a href=\"#!/api/sol.common.web.ActionHandler\" rel=\"sol.common.web.ActionHandler\" class=\"docClass\">sol.common.web.ActionHandler</a></code> classes subsequently execute the ELO Indexserver or ELOas action and takes care of handling the returned events.</p>\n\n\n<h2 id='p28_Technische_Zusammenfassung-section-server-implementation'>Server implementation</h2>\n\n\n<p>The action logic is implemented as an Indexserver script or ELOas rule. The <code><a href=\"#!/api/sol.common.ix.ActionBase\" rel=\"sol.common.ix.ActionBase\" class=\"docClass\">sol.common.ix.ActionBase</a></code> and <code><a href=\"#!/api/sol.common.as.ActionBase\" rel=\"sol.common.as.ActionBase\" class=\"docClass\">sol.common.as.ActionBase</a></code> classes provide helper functions as well as a base implementation. The client calls the underlying <code>registered function</code> or ELOas rule. </p>\n\n\n<p>An action can start a workflow on the server to model the technical process. The action can also return events server-side which the client then has to process once they are running.</p>\n\n","title":"Technical summary"});