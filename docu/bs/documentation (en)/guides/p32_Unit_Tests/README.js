Ext.data.JsonP.p32_Unit_Tests({"guide":"<h1 id='p32_Unit_Tests-section-unit-tests'>Unit tests</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ul>\n<li>1. <a href='#!/guide/p32_Unit_Tests-section-interface-for-conducting-unit-tests'>Interface for conducting unit tests</a>\n </li>\n<li>2. <a href='#!/guide/p32_Unit_Tests-section-filing-unit-tests-to-elo'>Filing unit tests to ELO</a>\n </li>\n<li>3. <a href='#!/guide/p32_Unit_Tests-section-example---testing-the-changecolor-function-module'>Example - testing the ChangeColor function module</a>\n </li>\n</ul></div>\n\n\n<p>When developing solutions, it is important to carry out tests to check if functions still work after version updates.</p>\n\n\n<p>The JavaScript test framework <a\nhref=\"http://jasmine.github.io/\">Jasmine</a> is a good method for testing Indexserver functions such as actions, services and function modules.</p>\n\n\n<h2 id='p32_Unit_Tests-section-interface-for-conducting-unit-tests'>Interface for conducting unit tests</h2>\n\n\n<p>The <code>development</code> package is an app for managing and running unit tests. This lists all tests that are available in the system and enables the user to start them.</p>\n\n\n<p><p><img src=\"guides/p32_Unit_Tests/img1.png\" alt=\"\" width=\"1064\" height=\"511\"></p></p>\n\n\n<p>The results are then displayed in the app.</p>\n\n\n<p><p><img src=\"guides/p32_Unit_Tests/img3.png\" alt=\"\" width=\"1064\" height=\"511\"></p></p>\n\n\n<h2 id='p32_Unit_Tests-section-filing-unit-tests-to-elo'>Filing unit tests to ELO</h2>\n\n\n<p>Unit tests are JavaScript files and must be filed to the Administration folder. Tests are run in the browser and have access to the Indexserver JavaScript API.</p>\n\n\n<p><p><img src=\"guides/p32_Unit_Tests/img5.png\" alt=\"\" width=\"416\" height=\"226\"></p></p>\n\n\n<p>Jasmine can be used for defining test suites and testing operations. The official project documentation contains further information on this.</p>\n\n\n<h2 id='p32_Unit_Tests-section-example---testing-the-changecolor-function-module'>Example - testing the ChangeColor function module</h2>\n\n\n<p><p><img src=\"guides/p32_Unit_Tests/img7.png\" alt=\"\" width=\"1064\" height=\"512\"></p></p>\n\n\n<p>A <code>test.Utils</code> helper class was developed for Business Solutions that handles creation of demo objects as well as passing on workflows for test scenarios. </p>\n\n\n<pre><code>describe(&quot;[function] <a href=\"#!/api/sol.common.ix.functions.ChangeColor\" rel=\"sol.common.ix.functions.ChangeColor\" class=\"docClass\">sol.common.ix.functions.ChangeColor</a>&quot;, function() {\n    var objId,\n      sordA, sordB;\n\n    it(&quot;should throw if executed without 'objId'&quot;, function() {\n      expect(function() {\n        test.Utils.execute('RF_sol_function_ChangeColor', { \n        });\n      }).toThrow();\n    });\n\n    describe(&quot;change color&quot;, function() {\n      var objId,\n        sordA, sordB;\n\n      beforeAll(function() {\n        expect(function() {\n          objId = test.Utils.createSord();\n        }).not.toThrow();\n\n        expect(function() {\n          sordA = test.Utils.getSord(objId);\n        }).not.toThrow();\n\n      });\n\n      it(&quot;should change color&quot;, function() {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n        expect(function() {\n          test.Utils.execute('RF_sol_function_ChangeColor', { \n            objId: objId,\n            color: &quot;red&quot;\n          });\n        }).not.toThrow();\n\n        expect(function() {\n          sordB = test.Utils.getSord(objId);\n        }).not.toThrow();\n\n        expect(sordA.kind).not.toEqual(sordB.kind);\n      });\n\n      afterAll(function() {\n        expect(function() {\n          test.Utils.deleteSord(objId);\n        }).not.toThrow();\n      });\n    });\n});\n</code></pre>\n\n","title":"Unit tests"});