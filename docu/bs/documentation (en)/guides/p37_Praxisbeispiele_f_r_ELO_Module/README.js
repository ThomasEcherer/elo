Ext.data.JsonP.p37_Praxisbeispiele_f_r_ELO_Module({"guide":"<h1 id='p37_Praxisbeispiele_f_r_ELO_Module-section-practical-examples-for-elo-modules'>Practical examples for ELO modules</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ul>\n<li>1. <a href='#!/guide/p37_Praxisbeispiele_f_r_ELO_Module-section-new-js-class'>New JS class</a>\n </li>\n<li>2. <a href='#!/guide/p37_Praxisbeispiele_f_r_ELO_Module-section-utility-classes-as-singletons'>Utility classes as singletons</a>\n </li>\n</ul></div>\n\n\n<p>Modularizing functions using own JS classes enables you to extend and document functions. The following shows several templates for creating new JS classes as well as utility classes.</p>\n\n\n<h2 id='p37_Praxisbeispiele_f_r_ELO_Module-section-new-js-class'>New JS class</h2>\n\n\n<pre><code>//@include lib_Class.js.js\n\n/**\n * Class documentation here\n *\n * @author {NAME}, ELO Digital Office GmbH\n * @version 1.0\n */\n<a href=\"#!/api/sol-static-method-define\" rel=\"sol-static-method-define\" class=\"docClass\">sol.define</a>(&quot;sol.common.ClassName&quot;, {\n\n  /** \n   * @cfg {String} objId\n   */\n  objId: undefined,\n\n  /**\n   * @property {Number} myProperty\n   */\n  myProperty: 123,\n\n  initialize: function (config) {\n    var me = this;\n    me.$super(&quot;initialize&quot;, [config]);\n  }\n\n});\n</code></pre>\n\n\n<h2 id='p37_Praxisbeispiele_f_r_ELO_Module-section-utility-classes-as-singletons'>Utility classes as singletons</h2>\n\n\n<pre><code>//@include lib_Class.js.js\n\n/**\n * @singleton\n *\n * Class documentation here\n *\n * @author {NAME}, ELO Digital Office GmbH\n * @version 1.0\n */\n<a href=\"#!/api/sol-static-method-define\" rel=\"sol-static-method-define\" class=\"docClass\">sol.define</a>(&quot;sol.common.ClassName&quot;, {\n  singleton: true,\n\n});\n</code></pre>\n\n","title":"Practical examples for ELO modules"});