Ext.data.JsonP.p39_JS_Coding_Guidelines({"guide":"<h1 id='p39_JS_Coding_Guidelines-section-js-coding-guidelines'>JS coding guidelines</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ul>\n<li>1. <a href='#!/guide/p39_JS_Coding_Guidelines-section-naming'>Naming</a>\n </li>\n<li>2. <a href='#!/guide/p39_JS_Coding_Guidelines-section-comments'>Comments</a>\n </li>\n<li>3. <a href='#!/guide/p39_JS_Coding_Guidelines-section-use-short-notations'>Use short notations</a>\n </li>\n<li>4. <a href='#!/guide/p39_JS_Coding_Guidelines-section-objects-and-variables'>Objects and variables</a>\n </li>\n<li>5. <a href='#!/guide/p39_JS_Coding_Guidelines-section-functions'>Functions</a>\n </li>\n<li>6. <a href='#!/guide/p39_JS_Coding_Guidelines-section-error-handling'>Error handling</a>\n </li>\n<li>7. <a href='#!/guide/p39_JS_Coding_Guidelines-section-other'>Other</a>\n </li>\n</ul></div>\n\n\n<h2 id='p39_JS_Coding_Guidelines-section-naming'>Naming</h2>\n\n\n<p>You should choose meaningful, pronounceable and searchable English names for variables and functions. Long, descriptive names are better than short, cryptic ones.</p>\n\n\n<p>The lowerCamelCase naming convention is to be used except for constants, which are written in CAPITALS:</p>\n\n\n<pre><code>var MAXUSERID = 900000;\n\nfunction buildName( firstName, lastName ) {\n  var me = this;\n  return firstName + ' ' + lastName;\n}\n</code></pre>\n\n\n<h2 id='p39_JS_Coding_Guidelines-section-comments'>Comments</h2>\n\n\n<p>Comments are written in English and should explain what the code is for. Commented out code is only used for test scenarios and should not be left in.</p>\n\n\n<p>JY is an untypified language; comments should therefore conform to JSDuck standards. If possible, the comment should include a parameter declaration including the type.</p>\n\n\n<p>Cmments should be defined using /<em> </em>/ instead of //. This is to avoid problems when using line breaks.</p>\n\n\n<pre><code>/**\n * Represents a book.\n * @constructor\n * @param {string} title - The title of the book.\n * @param {string} author - The author of the book.\n */\nfunction Book(title, author) {\n  var me = this, \n            data;\n/* using web worker since initial calculation might be expensive. */\n  data = worker.readBook(title, author);\n}\n</code></pre>\n\n\n<h2 id='p39_JS_Coding_Guidelines-section-use-short-notations'>Use short notations</h2>\n\n\n<p>JS offers a number of short notations.</p>\n\n\n<p><span\nstyle='font-weight:bold'>Array definitions</span></p>\n\n\n<pre><code>// false\nvar lunch = new Array();\nlunch[0]='Dosa';\nlunch[1]='Roti';\nlunch[2]='Rice';\nlunch[3]='what the heck is this?';\n\n// richtig\nvar lunch = ['Dosa',\n   'Roti',\n   'Rice',\n   'what the heck is this?'];\n</code></pre>\n\n\n<p><span\nstyle='font-weight:bold'>Simplified way to write if/else instructions</span></p>\n\n\n<pre><code>// false\nif(v){\n   var x = v;\n} else {\n   var x =10;\n}\n\n// true\nvar x = v || 10;\n</code></pre>\n\n\n<p><span\nstyle='font-weight:bold'>Simplified way to write more complex if/else instructions</span></p>\n\n\n<pre><code>// false\nvar direction;\nif(x &gt; 100){\n   direction = 1;\n} else {\n   direction = -1;\n}\n\n// trues\nvar direction = (x &gt; 100) ? 1 : -1;\n</code></pre>\n\n\n<h2 id='p39_JS_Coding_Guidelines-section-objects-and-variables'>Objects and variables</h2>\n\n\n<ul>\n<li>Use property spelling convention, i.e. <code>file.name</code> instead of <code>file.getName()</code></li>\n<li>Use few concatenations</li>\n<li>No Hungarian notations, no member prefixes</li>\n<li>Do not reuse variables, especially not with a different type</li>\n<li><code>i</code>, <code>j</code>, <code>k</code> as loop counters are allowed</li>\n</ul>\n\n\n<h2 id='p39_JS_Coding_Guidelines-section-functions'>Functions</h2>\n\n\n<ul>\n<li>Functions should contain a verb (<code>postPayment</code>, <code>deletePage</code>, <code>save</code>)</li>\n<li>one word per concept, e.g. do not switch between <code>fetch</code>, <code>retrieve</code>, and <code>get</code></li>\n<li>Functions should contain few lines</li>\n<li>One function should only complete one task</li>\n<li>There should only be one abstraction level per function</li>\n<li>Multiple related functions should be readable from top to bottom, i.e. the abstraction depth increases further down</li>\n<li>Use few function arguments</li>\n<li>Instruction and query should be separate, i.e. do not complete tasks in an 'if' query</li>\n<li>Also use curly brackets for single-line instruction blocks</li>\n</ul>\n\n\n<h2 id='p39_JS_Coding_Guidelines-section-error-handling'>Error handling</h2>\n\n\n<ul>\n<li>Use exceptions instead of error codes</li>\n<li>&quot;Null&quot; should not be returned</li>\n<li>Only transfer &quot;null&quot; in exceptions, document as allowed</li>\n</ul>\n\n\n<h2 id='p39_JS_Coding_Guidelines-section-other'>Other</h2>\n\n\n<ul>\n<li>Object orientation should be used to create namespaces; MANDATORY for libraries</li>\n<li>Use <code>Array.join</code> as string builder alternative</li>\n</ul>\n\n","title":"JS coding guidelines"});