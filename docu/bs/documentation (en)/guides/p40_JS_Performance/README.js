Ext.data.JsonP.p40_JS_Performance({"guide":"<h1 id='p40_JS_Performance-section-js-performance'>JS performance</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ul>\n<li>1. <a href='#!/guide/p40_JS_Performance-section-optimizing-loops'>Optimizing loops</a>\n </li>\n<li>2. <a href='#!/guide/p40_JS_Performance-section-avoiding-eval-%28%29'>Avoiding eval ()</a>\n </li>\n<li>3. <a href='#!/guide/p40_JS_Performance-section-iterating-on-cache-entries'>Iterating on cache entries</a>\n </li>\n<li>4. <a href='#!/guide/p40_JS_Performance-section-iterating-through-object-properties'>Iterating through object properties</a>\n </li>\n<li>5. <a href='#!/guide/p40_JS_Performance-section-converting-numbers'>Converting numbers</a>\n </li>\n</ul></div>\n\n\n<h2 id='p40_JS_Performance-section-optimizing-loops'>Optimizing loops</h2>\n\n\n<p>JS calculates the array length every time when iterating through loops. In the case of longer arrays, the maximum number should therefore be saved in a variable.</p>\n\n\n<p>Expensive calculations and DOM operations should also be made outside of loops:</p>\n\n\n<pre><code>var names = ['George', 'Ringo', 'Paul', 'John', &hellip;&hellip;&hellip;];\n\nfor(var i=0, var length = names.length; i &lt; length; i++){ \n   doSomethingWith(names[i]); \n}\n</code></pre>\n\n\n<h2 id='p40_JS_Performance-section-avoiding-eval-%28%29'>Avoiding eval ()</h2>\n\n\n<p><span class=\"tag_warning\">The Javascript function <code>eval()</code> should not be used as this call must be compiled at runtime. This is expensive and bears additional security risks.</span></p>\n\n\n<h2 id='p40_JS_Performance-section-iterating-on-cache-entries'>Iterating on cache entries</h2>\n\n\n<p>Iterating through object properties is approximately six times slower than iterating on a simple array. If maps are used to cache objects, you should use a parallel array in case you need to access all entries later on:</p>\n\n<p><span\nstyle='font-weight:bold'>Bad <code>for/in</code>: </span></p>\n\n\n<pre><code>for (var guid in sordMap) {\n    if (!sordMap.hasOwnProperty(guid)) continue;\n\n    // do something with sordMap[guid];\n}\n</code></pre>\n\n\n<p><span\nstyle='font-weight:bold'>Better <code>for/i</code>:</span></p>\n\n\n<pre><code>var length;\nfor(var i=0, length=sordList.length; i &lt; j; i++){ \n   var sord = sordList[i]; \n}\n</code></pre>\n\n\n<h2 id='p40_JS_Performance-section-iterating-through-object-properties'>Iterating through object properties</h2>\n\n\n<p>If you regularly iterate over all properties of a dynamically generated object, it is recommended to create a list with the added properties when creating an object instead of <code>for (attName in obj)</code>. Iteration then takes place on the list of properties:</p>\n\n\n<pre><code>var obj = {\n  _attrs = ['name', 'ort'],\n  name: 'Max',\n  ort: 'Stuttgart'\n};\n\nvar length;\nfor(var i=0, length=obj._attrs.length; i &lt; j; i++){ \n   var attr = obj._attrs[i];\n   var val = obj[attr]; \n}\n</code></pre>\n\n\n<h2 id='p40_JS_Performance-section-converting-numbers'>Converting numbers</h2>\n\n\n<p>If JS strings are converted into numbers, no major difference in performance is identified between <code>parseInt()</code>, <code>parseFloat()</code> or <code>number()</code>. You can use the function that returns the desired result in this case.</p>\n\n","title":"JS performance"});