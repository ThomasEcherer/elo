Ext.data.JsonP.p46_AS_Scripting({"guide":"<h1 id='p46_AS_Scripting-section-eloas-scripting'>ELOas scripting</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ul>\n<li>1. <a href='#!/guide/p46_AS_Scripting-section-template-for-javascript'>Template for JavaScript</a>\n </li>\n<li>2. <a href='#!/guide/p46_AS_Scripting-section-template-for-eloas-rules'>Template for ELOas rules</a>\n </li>\n</ul></div>\n\n\n<p>You should use as little code as possible in your own rules when developing ELOas rules. Functions should be passed to own modules.</p>\n\n\n<h2 id='p46_AS_Scripting-section-template-for-javascript'>Template for JavaScript</h2>\n\n\n<pre><code>// Java includes -&gt; important: leave first line empty\n\n/**\n * Code documentation\n *\n * @author Max Mustermann, ELO Digital Office GmbH\n * @version X\n *\n * @requires my.namespace.MySuperclass\n * @requires my.namespace.MyMixin\n */\n<a href=\"#!/api/sol-static-method-define\" rel=\"sol-static-method-define\" class=\"docClass\">sol.define</a>(&quot;my.namespace.MyClass&quot;, {\n  singleton: true,\n  extend: 'my.namespace.MySuperclass',\n  mixins: ['my.namespace.MyMixin'],\n\n  // properties section\n\n  // optional\n  initialize: function (config) {\n\n  },\n\n  // implementation section\n  process: function() {}\n});\n</code></pre>\n\n\n<h2 id='p46_AS_Scripting-section-template-for-eloas-rules'>Template for ELOas rules</h2>\n\n\n<pre><code>&lt;ruleset&gt;\n  &lt;base&gt;\n    &lt;name&gt;my.namespace.RuleName&lt;/name&gt;\n    &lt;search&gt;\n      &lt;name&gt;&quot;DIRECT&quot;&lt;/name&gt;\n      &lt;value&gt;&quot;&quot;&lt;/value&gt;\n      &lt;mask&gt;0&lt;/mask&gt;\n      &lt;max&gt;200&lt;/max&gt;\n    &lt;/search&gt;\n    &lt;interval&gt;1H&lt;/interval&gt;\n  &lt;/base&gt;\n&lt;rule&gt;\n  &lt;name&gt;Regel1&lt;/name&gt;\n  &lt;condition&gt;&lt;/condition&gt;\n  &lt;script&gt;\n    EM_WRITE_CHANGED = false;\n\n    var logger = <a href=\"#!/api/sol-static-method-create\" rel=\"sol-static-method-create\" class=\"docClass\">sol.create</a>(&quot;<a href=\"#!/api/sol.Logger\" rel=\"sol.Logger\" class=\"docClass\">sol.Logger</a>&quot;, { scope: &quot;my.namespace.RuleName&quot; });\n    logger.enter(&quot;RuleName&quot;);\n\n    // your code, e.g. calling superclass\n    my.namespace.MyClass.process();\n\n    logger.exit(&quot;RuleName&quot;);\n  &lt;/script&gt;\n&lt;/rule&gt;\n&lt;rule&gt;\n  &lt;name&gt;Global Error Rule&lt;/name&gt;\n  &lt;condition&gt;OnError&lt;/condition&gt;\n  &lt;script&gt;&lt;/script&gt;\n&lt;/rule&gt;\n&lt;/ruleset&gt;\n</code></pre>\n\n","title":"ELOas scripting"});