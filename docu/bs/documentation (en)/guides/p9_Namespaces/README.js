Ext.data.JsonP.p9_Namespaces({"guide":"<h1 id='p9_Namespaces-section-namespaces'>Namespaces</h1>\n\n\n<p>You must assign namespaces {{NAMSPC}} to solution scripts. A namespace should at least consist of the source, the corresponding module, and a group.</p>\n\n\n<pre><code>{Source}.{Module name}.{Group}\nE.g.: sol.invoice.ix\n</code></pre>\n\n\n<p>At ELO, source identifiers have a maximum of three characters. Partners are therefore instructed to use identifiers with more than four characters.</p>\n\n\n<p><span\nstyle='font-weight:bold'>Examples of ELO namespaces:</span></p>\n\n\n<pre><code>sol.common\nsol.invoice\nelo.apps\napi.ix\n</code></pre>\n\n\n<p><span\nstyle='font-weight:bold'>Examples of user-defined namespaces:</span></p>\n\n\n<pre><code>custom.invoice\nelopartnername.invoice\nelobp.common\n</code></pre>\n\n\n<h2 id='p9_Namespaces-section-creating-namespaces'>Creating namespaces</h2>\n\n\n<p>Namespaces {{NAMSPC}}} are automatically created when defining a class, if required. If you want namespaces to be automatically created, you can use the <code><a href=\"#!/api/sol.NamespaceManager\" rel=\"sol.NamespaceManager\" class=\"docClass\">sol.NamespaceManager</a></code> class.</p>\n\n\n<pre><code><a href=\"#!/api/sol-static-method-ns\" rel=\"sol-static-method-ns\" class=\"docClass\">sol.ns</a>('elopartnername.invoice');\n\n// in this case an object structure in JS is created as follows\nvar elopartnername = elopartnername || {};\nelopartnername.invoice= elopartnername.invoice|| {};\n</code></pre>\n\n","title":"Namespaces"});