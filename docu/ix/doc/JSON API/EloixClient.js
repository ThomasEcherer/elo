///////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Indexserver JSON API
// 
///////////////////////////////////////////////////////////////////////////////////////////////////////

var de = de || {};
de.elo = de.elo || {};
de.elo.ix = de.elo.ix || {};
de.elo.ix.client = de.elo.ix.client || {};

// Version of this EloixClient.js
de.elo.ix.client.JsonApiVersion = '8.00.000.076';

///////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Errors and Exceptions 
// Exceptions are thrown as strings that start with an exception specific prefix.
// E. g. an invalid param exeption starts with "[JSIX:2000]...".
// Exceptions that start with "[JSIX:" are thrown from the JavaScript library.
// Exceptions that start with "[ELOIX:" are generated by Indexserver.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Exception class.
 */
de.elo.ix.client.JSException = {};

/**
 * Exception message prefix for invalid parameter.
 */
de.elo.ix.client.INVALID_PARAM = "[JSIX:2000]";

/**
 * This exception message prefix indicates an HTTP error. 
 */
de.elo.ix.client.HTTP_ERROR = "[JSIX:1000]";

/**
 * Create an exception that is used to notify about illegal function arguments or 
 * object members.
 */
de.elo.ix.client.JSException.createInvalidParam = function(argName, details) {
	var msg = "[JSIX:2000] Illegal parameter or object member: " + argName;
	if (details) msg += ". [DETAILS] " + details + ".";
	return msg;
};

/**
 * Create an exception that is used to notify about a HTTP error.
 */
de.elo.ix.client.JSException.createHttpError = function(httpStatus, details) {
	var msg = "[JSIX:1000] HTTP request failed with status code " + httpStatus;
	if (details) msg += ". [DETAILS] " + details + ".";
	return msg;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Helper functions
//
///////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * This function is used to define class inheritance.
 */
de.elo.ix.client.extend = function(subClass, superClass) {
	var F = function() {};
	F.prototype = superClass.prototype;
	subClass.prototype = new F();
	subClass.prototype.constructor = subClass;
	
	subClass.superclass = superClass.prototype;
	if (superClass.prototype.constructor == Object.prototype.constructor) {
		superClass.prototype.constructor = superClass;
	}
};

///////////////////////////////////////////////////////////////////////////////////////////////////////
//
// LongBitset 
//
///////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * This class represents a 64bit Bitset.
 * Internal representation as array of 4 integer values. Little endian order. 
 * @param clazz Optional. When used as bitset class: class name, e.g. de.elo.ix.client.SordZ 
 * @param args Optional. When used as bitset class: array of Long objects or array of array of two ints. 
 * The array items are or-ed to compute the internal Long value.   
 */
de.elo.ix.client.LongBitset = function(clazz, args) {
	
	this._bs = [0, 0, 0, 0];
	
	if (args) {
		for (var i = 0; i < args.length; i++) {
			var arg = args[i];
			if (arg) {
				if (arg._bs) {  // args ~> is Array of type de.elo.ix.client.LongBitset
					this._bs[0] |= arg._bs[0];
					this._bs[1] |= arg._bs[1];
					this._bs[2] |= arg._bs[2];
					this._bs[3] |= arg._bs[3];
				}
				else if (arg.length) {  // arg ~> is Array of four ints 
					this._bs[0] |= arg[0];
					this._bs[1] |= arg[1];
					this._bs[2] |= arg[2];
					this._bs[3] |= arg[3];
				}
				else if (i < 4) { // args ~> is Array of four ints, used in definition of SordC.mbId, etc
					this._bs[i] |= arg;
				}
				else {
					throw "[IXJSON:1000] Cannot initialize de.elo.ix.client.LongBitset variable with parameters " + args.toString();		
				}
			}
		}
	}
	
	if (clazz) {
		this.clazz = clazz;
	}
	else {
		if (args) {
			for (var arg in args) {
				if (arg.clazz) {
					this.clazz = arg.clazz;
					break;
				}
			}
		}
	}
};

/**
 * Convert a LongBitset to String.
 * @return Hexadecimal representation of the internal integers. Starts with "0x".
 */
de.elo.ix.client.LongBitset.prototype.toString = function() {
	var str = "0x";
	for (var i = 3; i >= 0; i--) {
		if (i == 0 || this._bs[i]) {
			str += this._bs[i].toString(16);
		}
	}
	return str;
};

/**
 * Bitwise OR operation.
 * @param rhs Right handed side operand.
 * @return New LongBitset object containing the result.
 */
de.elo.ix.client.LongBitset.prototype.or = function(rhs) {
	var lhs = this;
	var ret = new de.elo.ix.client.LongBitset(lhs.clazz);
	for (var i = 0; i < 4; i++) {
		ret._bs[i] = lhs._bs[i] | rhs._bs[i];
	}
	return ret;
};

/**
 * Bitwise AND operation.
 * @param rhs Right handed side operand.
 * @return New LongBitset object containing the result.
 */
de.elo.ix.client.LongBitset.prototype.and = function(rhs) {
	var lhs = this;
	var ret = new de.elo.ix.client.LongBitset(lhs.clazz);
	for (var i = 0; i < 4; i++) {
		ret._bs[i] = lhs._bs[i] & rhs._bs[i];
	}
	return ret;
};

/**
 * Bitwise AND-NOT operation.
 * Return bits in this object without the bits in rhs.
 * @param rhs Right handed side operand.
 * @return New LongBitset object containing the result.
 */
de.elo.ix.client.LongBitset.prototype.sub = function(rhs) {
	var lhs = this;
	var ret = new de.elo.ix.client.LongBitset(lhs.clazz);
	for (var i = 0; i < 4; i++) {
		ret._bs[i] = lhs._bs[i] & ~rhs._bs[i];
	}
	return ret;
};

/**
 * Check, whether all bits are unset.
 * @return true, if all bits are 0. 
 */
de.elo.ix.client.LongBitset.prototype.isEmpty = function() {
	for (var i = 0; i < 4; i++) {
		if (this._bs[i]) return false;
	}
	return true;
};

/**
 * Returns true, if this object contains at least one bit of rhs.
 * @param rhs Right handed side operand.
 * @return true or false.
 */
de.elo.ix.client.LongBitset.prototype.containsAny = function(rhs) {
	var lhs = this;
	return !lhs.and(rhs).isEmpty();
};

/**
 * Returns true, if this object and rhs contain the same bits.
 * @param rhs Right handed side operand.
 * @return true or false.
 */
de.elo.ix.client.LongBitset.prototype.equals = function(rhs) {
	var lhs = this;
	for (var i = 0; i < 4; i++) {
		if (lhs._bs[i] != rhs._bs[i]) return false;
	}
	return true;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////
//
// IXConnIXServicePortIF
//
///////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Service interface with connection
 */
de.elo.ix.client.IXConnIXServicePortIF = function(ixsl) {
  this._ixsl = ixsl;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Asynchonous HTTP Request Library 
//
///////////////////////////////////////////////////////////////////////////////////////////////////////


/*
Copyright (c) 2009, 2010 Berend-Jan "SkyLined" Wever <berendjanwever@gmail.com>
Project homepage http://code.google.com/p/asyncxmlhttprequest/
All rights reserved. See COPYRIGHT.txt for details.

COPYRIGHT.txt:

Copyright (c) 2009, 2010 Berend-Jan "SkyLined" Wever <berendjanwever@gmail.com>
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the copyright holder nor the names of the
      contributors may be used to endorse or promote products derived from
      this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/
function dump_exception(where, e, instance) {
  s = [];
  if (instance) {
    s.push(where + "() threw an exception:");
    s.push(instance.url);
  }
  for (var i in e) {
    try { l = i + "=" + e[i]; } catch(e) { l = i + "=[access denied]"; }
    s.push(l);
  }
  alert(s.join("\r\n"));
}

function AsyncXMLHttpRequest() {
  // An AsyncXMLHttpRequest object works as a wrapper for a real XMLHttpRequest object. The user should be able to use
  // the AsyncXMLHttpRequest as if it is a real XMLHttpRequest. In the current implementation there is one exception
  // to this: reading certain attributes of the real XMLHttpRequest can throw an exception, but reading the same
  // attributes from the AsyncXMLHttpRequest object does not: their value will be "undefined". There may be a way to
  // fix that for certain JavaScript implementations, but not for all.
  this._XMLHttpRequest = null;
  if (typeof(XMLHttpRequest) != "undefined") {
    this._XMLHttpRequest = new XMLHttpRequest();
  } else {
    xmlhttp_objects = ["Msxml2.XMLHTTP.6.0", "Msxml2.XMLHTTP.3.0", "Msxml2.XMLHTTP", "Microsoft.XMLHTTP"];
    for (var i in objects) {
      try {
        this._XMLHttpRequest = new ActiveXObject(xmlhttp_objects[i]);
      } catch (e) {
        continue;
      }
      break;
    }
  }
  if (this._XMLHttpRequest == null) {
    throw new Error("Cannot instanciate an XMLHttpRequest object");
  }

  // AsyncXMLHttpRequest shares the following attributes with XMLHttpRequest:
  //   readyState, responseBody, responseText, responseXML, status, statusText
  // These work exactly the same in AsyncXMLHttpRequest as in XMLHttpRequest. To make it easy to update them, this
  // function is used internally:
  function AsyncXMLHttpRequest_copy_attributes(instance) {
    properties = ["readyState", "responseBody", "responseText", "responseXML", "status", "statusText"];
    for (var i in properties) {
      var property = properties[i];
      try {
        instance[property] = instance._XMLHttpRequest[property];
      } catch (e) {
        instance[property] = void(0);
      }
    }
  }
  // Make a copy of the default attributes:
  AsyncXMLHttpRequest_copy_attributes(this);
  // In addition to the default attributes, AsyncXMLHttpRequest has these:
  this.timeout = 0;           // Timeout for the request in milliseconds.
  this.timedout = false;      // Indicates if the request has timed out.
  this.duration = 0;          // How long has this object been waiting for a reply?
  // If the request does not complete before the timeout, it is aborted using "abort()", "timedout" is set to true and
  // the "ontimeout" event is fired.
  this.method = void(0);      // The method argument used in open()
  this.url = void(0);         // The url argument used in open()
  this.user = void(0);        // The user argument used in open()
  this.pasword = void(0);     // The password argument used in open()
  this.body = void(0);        // The body argument used in send()
  // These five attributes are set automatically when "open()" and "send()" are called for the users' convenience -
  // they add no extra functionality.

  // AsyncXMLHttpRequest shares the following event with XMLHttpRequest:
  this.onreadystatechange = void(0);
  // However, the AsyncXMLHttpRequest object for which the event fires is passed as the first argument to the event
  // handler. This makes it easy to track which object an event is firing for when you create many parallel requests.

  // In addition to this event, AsyncXMLHttpRequest has these events, which are called when a request is completed:
  this.onload = void(0);      // Called when the server returns success.
  this.onerror = void(0);     // Called when the server returns an error.
  this.ontimeout = void(0);   // Called when the request timed out.
  this.onfinish = void(0);    // Called when the request is closed.
  // Only one of these is called for each request, depending on the outcome; if there is a timeout, the "ontimeout"
  // event is fired but the "onerror" event is not: the "onerror" event is only called when the request does not time
  // out before the server responds with a status code <200 or >299. The AsyncXMLHttpRequest object for which the
  // event fires is passed as the the first argument to the event handler for each of these events.

  // Different browsers can throw different exceptions. All these exceptions are handled to make this object work
  // uniform across browsers:
  // MSIE throws an "access denied" exception when you call open() for an XHR with a cross-origin URL:
  this._msie_access_denied_error = false;
  // MSIE throws an "resource not found" exception when you call send() for an XHR request to certain illegal ports:
  this._msie_access_illegal_port_error = false;
  // Opera throws an "Security violation" exception when you call send() for an XHR with a cross-origin URL:
  this._opera_send_security_violation = false;
  // Firefox throws an "malformed URI" exception when you call open() with a invalid url:
  this._firefox_malformed_uri_error = false;
  // Safari throws an "network error" exception when you call send() with a hostname that cannot be resolved:
  this._safari_network_err = false;

  // Most methods are implemented as wrappers for the XMLHttpRequest object:
  // Wrapper for getAllReponseHeaders()
  this.getAllReponseHeaders = function AsyncXMLHttpRequest_getAllReponseHeaders() {
    this._XMLHttpRequest.getAllReponseHeaders();
  };
  // Wrapper for getReponseHeader(name)
  this.getReponseHeader = function AsyncXMLHttpRequest_getReponseHeader(name) {
    this._XMLHttpRequest.getReponseHeader(name);
  };
  // Wrapper for setRequestHeader(name, value)
  this.setRequestHeader = function AsyncXMLHttpRequest_setRequestHeader(name, value) {
    this._XMLHttpRequest.setRequestHeader(name, value);
  };
  // To make this work uniform across all browsers, some exceptions need to be caught and readyState changes faked.
  // The later can be done with this function:
  function AsyncXMLHttpRequest_fake_readystatechange(instance, newReadyState, do_it_now) {
    // These are the actions that need to be taken:
    function fake_readystatechange() {
      instance.status = 0;
      instance.readyState = newReadyState;
      if (typeof(instance.onreadystatechange) != "undefined") {
        instance.onreadystatechange(instance);
      }
      if (instance.readyState == 4) {
        // readyState changes are always faked if there was an error. If the readyState reaches 4, the request is done
        // and he onerror and onfinish events may need to be fired:
        if (typeof(instance.onerror) != "undefined") {
          instance.onerror(instance);
        }
        if (typeof(instance.onfinish) != "undefined") {
          instance.onfinish(instance);
        }
        delete instance._XMLHttpRequest;
      }
    }
    // The actions may need to be taken now, or later (this prevents recursive event handler loops):
    if (do_it_now) {
      fake_readystatechange();
    } else {
      setTimeout(fake_readystatechange, 1);
    }
  }
  // Wrapper for open(method, url, user, password)
  this.open = function AsyncXMLHttpRequest_open(method, url, user, password) {
    // Make a copy of the arguments for the users' convenience:
    this.method = method;
    this.url = url;
    this.user = user;
    this.pasword = password;
    // Record the start time of the request:
    this._start_time = new Date().valueOf();
    try {
      if (typeof(user) == "undefined") {
        this._XMLHttpRequest.open(method, url, true); // No user/password supplied
      } else {
        this._XMLHttpRequest.open(method, url, true, user, password);
      }
    } catch (e) {
      // Update the attributes of the AsyncXMLHttpRequest object to those of the XMLHttpRequest object:
      AsyncXMLHttpRequest_copy_attributes(this);
      if (typeof(e.number) != "undefined" && e.number == -2147024891) {
        // MSIE does not allow opening a url cross-domain. To make this work uniform across all browsers, the
        // exception is handled and a  readyState change to 1 with a status of 0 is "faked":
        this._msie_access_denied_error = true;
        AsyncXMLHttpRequest_fake_readystatechange(this, 1, true); // change readyState now.
      } else if (typeof(e.name) != "undefined" && e.name == "NS_ERROR_MALFORMED_URI"){
        // Firefox does not allow opening a url that's incorrect. To make this work uniform across all browser, the
        // exception is handled and a readyState change to 1 with a status of 0 is "faked":
        this._firefox_malformed_uri_error = true;
        AsyncXMLHttpRequest_fake_readystatechange(this, 1, true); // change readyState now.
      } else {
        // An unknown exception occured, pass it on:
        dump_exception("open", e, this);
        throw e;
      }
      return;
    }
    // Update the attributes of the AsyncXMLHttpRequest object to those of the XMLHttpRequest object:
    AsyncXMLHttpRequest_copy_attributes(this);
  };
  // Wrapper for send(body)
  this.send = function AsyncXMLHttpRequest_send(body) {
    // Record the start time of the request:
    this._start_time = new Date().valueOf();
    if (this._msie_access_denied_error || this._firefox_malformed_uri_error) {
      // Some urls can cause "open()" to fail in MSIE and Firefox. This would normally have thrown an exception, but
      // it has been caught and handled to make this work uniform across browsers. Now that "send()" had been called,
      // fake a readyState change to 4 with status 0 (error):
      AsyncXMLHttpRequest_fake_readystatechange(this, 4, false); // change readyState later
      return;
    }
    // Make a copy of the arguments for the users' convenience:
    this.body = body;
    try {
      if (typeof body == "undefined") {
        this._XMLHttpRequest.send(null); // no body supplied
      } else {
        this._XMLHttpRequest.send(body);
      }
    } catch (e) {
      if (typeof(e.number) != "undefined" && e.number == -2146697211) {
        // MSIE does not allow opening a url to certain ports. To make this work uniform across all browsers, the
        // exception is handled:
        this._msie_access_illegal_port_error = true;
      } else if (typeof(e.NETWORK_ERR) != "undefined" && e.NETWORK_ERR == 101) {
        // Safari throws an error if the network name cannot be resolved. The readyState has already been changed to 1
        // and 4 and the status is set to 0. There is no need for calling event handlers or anything else:
        this._safari_network_err = true;
      } else if (typeof(e.message) != "undefined" && e.message.match("^Security violation")) {
        // Opera throws an error if the request is cross-origin. To make this work uniform across all browsers the
        // exception is handle and a readyState change to 4 with a status of 0 is "faked" when the readyState changes
        // to 2:
        this._opera_send_security_violation = true;
      } else if (typeof(e.name) != "undefined" && e.name == "NS_ERROR_PORT_ACCESS_NOT_ALLOWED"){
        // Firefox does not allow opening a url for certain ports. To make this work uniform across all browser, the
        // exception is handled and a readyState change to 4 with a status of 0 is "faked":
        AsyncXMLHttpRequest_fake_readystatechange(this, 4, false); // Change readyState later
      } else {
        // An unknown exception occured, pass it on:
        dump_exception("send", e, this);
        throw e;
      }
      return;
    }
    // Update the attributes of the AsyncXMLHttpRequest object to those of the XMLHttpRequest object:
    AsyncXMLHttpRequest_copy_attributes(this);
    // If the "timeout" attribute is set, record the start time and start a timer to detect a timeout:
    if (this.timeout != 0) {
      // Save "this" in a variable, so the timer function can refer to it:
      var instance = this;
      // Start a timer
      this._timer = setTimeout(function AsyncXMLHttpRequest_timer() {
        // This request has timed out: remove the timer, calculate the duration and abort the request:
        delete instance._timer;
        instance.timedout = true;
        instance.duration = new Date().valueOf() - instance._start_time;
        alert(instance._XMLHttpRequest);
        instance.abort();
      }, this.timeout);
    }
  };
  // Wrapper for abort()
  this.abort = function AsyncXMLHttpRequest_abort() {
    this._XMLHttpRequest.abort();
    // Update the attributes of the AsyncXMLHttpRequest object to those of the XMLHttpRequest object:
    AsyncXMLHttpRequest_copy_attributes(this);
  };
  // Save "this" in a variable, so the onreadystate change handler function can refer to it:
  var instance = this;
  // Create an event handler for "readyState" changes of the XMLHttpRequest object. The handler can use "this" to refer
  // to the AsyncXMLHttpRequest and call the appropriate event handler(s) set by the user:
  this._XMLHttpRequest.onreadystatechange = function AsyncXMLHttpRequest_onreadystatechange() {
    // Check if the readyState of the wrapped XHR object is now HIGHER than the value stored in the wrapper. The 
    // wrapper may be faking a higher value because it caught an exception at some point for cross-browser uniformity:
    if (instance.readyState < instance._XMLHttpRequest.readyState) {
      // Copy the new readyState, status and other properties:
      AsyncXMLHttpRequest_copy_attributes(instance);
      if (instance.readyState >= 2) {
        // Send has been called, calculate the duration of the request:
        instance.duration = new Date().valueOf() - instance._start_time;
      }
      // MSIE has readyState 0, no other browser does. So readyState changes to 0 are ignored to make this uniform
      // across browsers:
      if (instance.readyState != 0) {
        // Call the onreadystatechange of the object, if there is one:
        if (typeof(instance.onreadystatechange) != "undefined") {
          instance.onreadystatechange(instance);
        }
      }
      // Opera can throw an exception that we handle to keep the request uniform cross-browsers. If this happened, the
      // readyState will be changed to 2 and never reach 4. So the change to 2 is hiden and a change to 4 is faked:
      if (instance.readyState == 2 && instance._opera_send_security_violation) {
        instance.readyState = 4;
      }
      if (instance.readyState == 4) {
        // When the readyState reaches 4, the request is done and "onload", "onerror" and "ontimeout" events should
        // fire if they are set:
        var ontimeout_called = false;
        if (instance.timeout != 0) {
          // If this request has timed out, call ontimeout, if it exists:
          if (instance.timedout) {
            if (typeof(instance.ontimeout) != "undefined") {
              instance.ontimeout(instance);
            }
            // Prevent calling the "onerror" handler as well:
            ontimeout_called = true;
          } else {
            // The request did not time out, but it has a timer: clear and
            // remove the timer:
            clearTimeout(instance._timer);
            delete instance._timer;
          }
        }
        if (!ontimeout_called) {
          // Check if the request succeeded or not and call the right event handler:
          if (instance.status >= 200 && instance.status <= 299) {
            // Call onload if the status is successful and it exists:
            if (typeof(instance.onload) != "undefined") {
              instance.onload(instance);
            }
          } else {
            // Call onerror if the status is unsuccessful and it exists:
            if (typeof(instance.onerror) != "undefined") {
              instance.onerror(instance);
            }
          }
        }
        // This request is finished.
        if (typeof(instance.onfinish) != "undefined") {
          instance.onfinish(instance);
        }
        delete instance._XMLHttpRequest;
      }
    }
  };
}
///////////////////////////////////////////////////////////////////////////////////////////////////////
//
// JSON Serialization Library 
//
///////////////////////////////////////////////////////////////////////////////////////////////////////


/*
    json2.js
    2011-10-19

    Public Domain.

    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.

    See http://www.JSON.org/js.html


    This code should be minified before deployment.
    See http://javascript.crockford.com/jsmin.html

    USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO
    NOT CONTROL.


    This file creates a global JSON object containing two methods: stringify
    and parse.

        JSON.stringify(value, replacer, space)
            value       any JavaScript value, usually an object or array.

            replacer    an optional parameter that determines how object
                        values are stringified for objects. It can be a
                        function or an array of strings.

            space       an optional parameter that specifies the indentation
                        of nested structures. If it is omitted, the text will
                        be packed without extra whitespace. If it is a number,
                        it will specify the number of spaces to indent at each
                        level. If it is a string (such as '\t' or '&nbsp;'),
                        it contains the characters used to indent at each level.

            This method produces a JSON text from a JavaScript value.

            When an object value is found, if the object contains a toJSON
            method, its toJSON method will be called and the result will be
            stringified. A toJSON method does not serialize: it returns the
            value represented by the name/value pair that should be serialized,
            or undefined if nothing should be serialized. The toJSON method
            will be passed the key associated with the value, and this will be
            bound to the value

            For example, this would serialize Dates as ISO strings.

                Date.prototype.toJSON = function (key) {
                    function f(n) {
                        // Format integers to have at least two digits.
                        return n < 10 ? '0' + n : n;
                    }

                    return this.getUTCFullYear()   + '-' +
                         f(this.getUTCMonth() + 1) + '-' +
                         f(this.getUTCDate())      + 'T' +
                         f(this.getUTCHours())     + ':' +
                         f(this.getUTCMinutes())   + ':' +
                         f(this.getUTCSeconds())   + 'Z';
                };

            You can provide an optional replacer method. It will be passed the
            key and value of each member, with this bound to the containing
            object. The value that is returned from your method will be
            serialized. If your method returns undefined, then the member will
            be excluded from the serialization.

            If the replacer parameter is an array of strings, then it will be
            used to select the members to be serialized. It filters the results
            such that only members with keys listed in the replacer array are
            stringified.

            Values that do not have JSON representations, such as undefined or
            functions, will not be serialized. Such values in objects will be
            dropped; in arrays they will be replaced with null. You can use
            a replacer function to replace those with JSON values.
            JSON.stringify(undefined) returns undefined.

            The optional space parameter produces a stringification of the
            value that is filled with line breaks and indentation to make it
            easier to read.

            If the space parameter is a non-empty string, then that string will
            be used for indentation. If the space parameter is a number, then
            the indentation will be that many spaces.

            Example:

            text = JSON.stringify(['e', {pluribus: 'unum'}]);
            // text is '["e",{"pluribus":"unum"}]'


            text = JSON.stringify(['e', {pluribus: 'unum'}], null, '\t');
            // text is '[\n\t"e",\n\t{\n\t\t"pluribus": "unum"\n\t}\n]'

            text = JSON.stringify([new Date()], function (key, value) {
                return this[key] instanceof Date ?
                    'Date(' + this[key] + ')' : value;
            });
            // text is '["Date(---current time---)"]'


        JSON.parse(text, reviver)
            This method parses a JSON text to produce an object or array.
            It can throw a SyntaxError exception.

            The optional reviver parameter is a function that can filter and
            transform the results. It receives each of the keys and values,
            and its return value is used instead of the original value.
            If it returns what it received, then the structure is not modified.
            If it returns undefined then the member is deleted.

            Example:

            // Parse the text. Values that look like ISO date strings will
            // be converted to Date objects.

            myData = JSON.parse(text, function (key, value) {
                var a;
                if (typeof value === 'string') {
                    a =
/^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);
                    if (a) {
                        return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],
                            +a[5], +a[6]));
                    }
                }
                return value;
            });

            myData = JSON.parse('["Date(09/09/2001)"]', function (key, value) {
                var d;
                if (typeof value === 'string' &&
                        value.slice(0, 5) === 'Date(' &&
                        value.slice(-1) === ')') {
                    d = new Date(value.slice(5, -1));
                    if (d) {
                        return d;
                    }
                }
                return value;
            });


    This is a reference implementation. You are free to copy, modify, or
    redistribute.
*/

/*jslint evil: true, regexp: true */

/*members "", "\b", "\t", "\n", "\f", "\r", "\"", JSON, "\\", apply,
    call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,
    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,
    lastIndex, length, parse, prototype, push, replace, slice, stringify,
    test, toJSON, toString, valueOf
*/


// Create a JSON object only if one does not already exist. We create the
// methods in a closure to avoid creating global variables.

var JSON;
if (!JSON) {
    JSON = {};
}

(function () {
    'use strict';

    function f(n) {
        // Format integers to have at least two digits.
        return n < 10 ? '0' + n : n;
    }

    if (typeof Date.prototype.toJSON !== 'function') {

        Date.prototype.toJSON = function (key) {

            return isFinite(this.valueOf())
                ? this.getUTCFullYear()     + '-' +
                    f(this.getUTCMonth() + 1) + '-' +
                    f(this.getUTCDate())      + 'T' +
                    f(this.getUTCHours())     + ':' +
                    f(this.getUTCMinutes())   + ':' +
                    f(this.getUTCSeconds())   + 'Z'
                : null;
        };

        String.prototype.toJSON      =
            Number.prototype.toJSON  =
            Boolean.prototype.toJSON = function (key) {
                return this.valueOf();
            };
    }

    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        gap,
        indent,
        meta = {    // table of character substitutions
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            '"' : '\\"',
            '\\': '\\\\'
        },
        rep;


    function quote(string) {

// If the string contains no control characters, no quote characters, and no
// backslash characters, then we can safely slap some quotes around it.
// Otherwise we must also replace the offending characters with safe escape
// sequences.

        escapable.lastIndex = 0;
        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
            var c = meta[a];
            return typeof c === 'string'
                ? c
                : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
        }) + '"' : '"' + string + '"';
    }


    function str(key, holder) {

// Produce a string from holder[key].

        var i,          // The loop counter.
            k,          // The member key.
            v,          // The member value.
            length,
            mind = gap,
            partial,
            value = holder[key];

// If the value has a toJSON method, call it to obtain a replacement value.

        if (value && typeof value === 'object' &&
                typeof value.toJSON === 'function') {
            value = value.toJSON(key);
        }

// If we were called with a replacer function, then call the replacer to
// obtain a replacement value.

        if (typeof rep === 'function') {
            value = rep.call(holder, key, value);
        }

// What happens next depends on the value's type.

        switch (typeof value) {
        case 'string':
            return quote(value);

        case 'number':

// JSON numbers must be finite. Encode non-finite numbers as null.

            return isFinite(value) ? String(value) : 'null';

        case 'boolean':
        case 'null':

// If the value is a boolean or null, convert it to a string. Note:
// typeof null does not produce 'null'. The case is included here in
// the remote chance that this gets fixed someday.

            return String(value);

// If the type is 'object', we might be dealing with an object or an array or
// null.

        case 'object':

// Due to a specification blunder in ECMAScript, typeof null is 'object',
// so watch out for that case.

            if (!value) {
                return 'null';
            }

// Make an array to hold the partial results of stringifying this object value.

            gap += indent;
            partial = [];

// Is the value an array?

            if (Object.prototype.toString.apply(value) === '[object Array]') {

// The value is an array. Stringify every element. Use null as a placeholder
// for non-JSON values.

                length = value.length;
                for (i = 0; i < length; i += 1) {
                    partial[i] = str(i, value) || 'null';
                }

// Join all of the elements together, separated with commas, and wrap them in
// brackets.

                v = partial.length === 0
                    ? '[]'
                    : gap
                    ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']'
                    : '[' + partial.join(',') + ']';
                gap = mind;
                return v;
            }

// If the replacer is an array, use it to select the members to be stringified.

            if (rep && typeof rep === 'object') {
                length = rep.length;
                for (i = 0; i < length; i += 1) {
                    if (typeof rep[i] === 'string') {
                        k = rep[i];
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            } else {

// Otherwise, iterate through all of the keys in the object.

                for (k in value) {
                    if (Object.prototype.hasOwnProperty.call(value, k)) {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            }

// Join all of the member texts together, separated with commas,
// and wrap them in braces.

            v = partial.length === 0
                ? '{}'
                : gap
                ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}'
                : '{' + partial.join(',') + '}';
            gap = mind;
            return v;
        }
    }

// If the JSON object does not yet have a stringify method, give it one.

    if (typeof JSON.stringify !== 'function') {
        JSON.stringify = function (value, replacer, space) {

// The stringify method takes a value and an optional replacer, and an optional
// space parameter, and returns a JSON text. The replacer can be a function
// that can replace values, or an array of strings that will select the keys.
// A default replacer method can be provided. Use of the space parameter can
// produce text that is more easily readable.

            var i;
            gap = '';
            indent = '';

// If the space parameter is a number, make an indent string containing that
// many spaces.

            if (typeof space === 'number') {
                for (i = 0; i < space; i += 1) {
                    indent += ' ';
                }

// If the space parameter is a string, it will be used as the indent string.

            } else if (typeof space === 'string') {
                indent = space;
            }

// If there is a replacer, it must be a function or an array.
// Otherwise, throw an error.

            rep = replacer;
            if (replacer && typeof replacer !== 'function' &&
                    (typeof replacer !== 'object' ||
                    typeof replacer.length !== 'number')) {
                throw new Error('JSON.stringify');
            }

// Make a fake root object containing our value under the key of ''.
// Return the result of stringifying the value.

            return str('', {'': value});
        };
    }


// If the JSON object does not yet have a parse method, give it one.

    if (typeof JSON.parse !== 'function') {
        JSON.parse = function (text, reviver) {

// The parse method takes a text and an optional reviver function, and returns
// a JavaScript value if the text is a valid JSON text.

            var j;

            function walk(holder, key) {

// The walk method is used to recursively walk the resulting structure so
// that modifications can be made.

                var k, v, value = holder[key];
                if (value && typeof value === 'object') {
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if (v !== undefined) {
                                value[k] = v;
                            } else {
                                delete value[k];
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value);
            }


// Parsing happens in four stages. In the first stage, we replace certain
// Unicode characters with escape sequences. JavaScript handles many characters
// incorrectly, either silently deleting them, or treating them as line endings.

            text = String(text);
            cx.lastIndex = 0;
            if (cx.test(text)) {
                text = text.replace(cx, function (a) {
                    return '\\u' +
                        ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
                });
            }

// In the second stage, we run the text against regular expressions that look
// for non-JSON patterns. We are especially concerned with '()' and 'new'
// because they can cause invocation, and '=' because it can cause mutation.
// But just to be safe, we want to reject all unexpected forms.

// We split the second stage into 4 regexp operations in order to work around
// crippling inefficiencies in IE's and Safari's regexp engines. First we
// replace the JSON backslash pairs with '@' (a non-JSON character). Second, we
// replace all simple value tokens with ']' characters. Third, we delete all
// open brackets that follow a colon or comma or that begin the text. Finally,
// we look to see that the remaining characters are only whitespace or ']' or
// ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.

            if (/^[\],:{}\s]*$/
                    .test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')
                        .replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']')
                        .replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

// In the third stage we use the eval function to compile the text into a
// JavaScript structure. The '{' operator is subject to a syntactic ambiguity
// in JavaScript: it can begin a block or an object literal. We wrap the text
// in parens to eliminate the ambiguity.

                j = eval('(' + text + ')');

// In the optional fourth stage, we recursively walk the new structure, passing
// each name/value pair to a reviver function for possible transformation.

                return typeof reviver === 'function'
                    ? walk({'': j}, '')
                    : j;
            }

// If the text is not JSON parseable, then a SyntaxError is thrown.

            throw new SyntaxError('JSON.parse');
        };
    }
}());///////////////////////////////////////////////////////////////////////////////////////////////////////
//
// RSA Encryption Library 
//
///////////////////////////////////////////////////////////////////////////////////////////////////////


//Licensing
//---------

//This software is covered under the following copyright:

/*
 * Copyright (c) 2003-2005  Tom Wu
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
 *
 * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
 * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * In addition, the following condition applies:
 *
 * All redistributions must retain an intact copy of this copyright notice
 * and disclaimer.
 */

//Address all questions regarding this license to:

// Tom Wu
// tjw@cs.Stanford.EDU

var b64map="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
var b64pad="=";

function hex2b64(h) {
  var i;
  var c;
  var ret = "";
  for(i = 0; i+3 <= h.length; i+=3) {
    c = parseInt(h.substring(i,i+3),16);
    ret += b64map.charAt(c >> 6) + b64map.charAt(c & 63);
  }
  if(i+1 == h.length) {
    c = parseInt(h.substring(i,i+1),16);
    ret += b64map.charAt(c << 2);
  }
  else if(i+2 == h.length) {
    c = parseInt(h.substring(i,i+2),16);
    ret += b64map.charAt(c >> 2) + b64map.charAt((c & 3) << 4);
  }
  while((ret.length & 3) > 0) ret += b64pad;
  return ret;
}

// convert a base64 string to hex
function b64tohex(s) {
  var ret = "";
  var i;
  var k = 0; // b64 state, 0-3
  var slop;
  for(i = 0; i < s.length; ++i) {
    if(s.charAt(i) == b64pad) break;
    v = b64map.indexOf(s.charAt(i));
    if(v < 0) continue;
    if(k == 0) {
      ret += int2char(v >> 2);
      slop = v & 3;
      k = 1;
    }
    else if(k == 1) {
      ret += int2char((slop << 2) | (v >> 4));
      slop = v & 0xf;
      k = 2;
    }
    else if(k == 2) {
      ret += int2char(slop);
      ret += int2char(v >> 2);
      slop = v & 3;
      k = 3;
    }
    else {
      ret += int2char((slop << 2) | (v >> 4));
      ret += int2char(v & 0xf);
      k = 0;
    }
  }
  if(k == 1)
    ret += int2char(slop << 2);
  return ret;
}

// convert a base64 string to a byte/number array
function b64toBA(s) {
  //piggyback on b64tohex for now, optimize later
  var h = b64tohex(s);
  var i;
  var a = new Array();
  for(i = 0; 2*i < h.length; ++i) {
    a[i] = parseInt(h.substring(2*i,2*i+2),16);
  }
  return a;
}
// Copyright (c) 2005  Tom Wu
// All Rights Reserved.
// See "LICENSE" for details.

// Basic JavaScript BN library - subset useful for RSA encryption.

// Bits per digit
var dbits;

// JavaScript engine analysis
var canary = 0xdeadbeefcafe;
var j_lm = ((canary&0xffffff)==0xefcafe);

// (public) Constructor
function BigInteger(a,b,c) {
  if(a != null)
    if("number" == typeof a) this.fromNumber(a,b,c);
    else if(b == null && "string" != typeof a) this.fromString(a,256);
    else this.fromString(a,b);
}

// return new, unset BigInteger
function nbi() { return new BigInteger(null); }

// am: Compute w_j += (x*this_i), propagate carries,
// c is initial carry, returns final carry.
// c < 3*dvalue, x < 2*dvalue, this_i < dvalue
// We need to select the fastest one that works in this environment.

// am1: use a single mult and divide to get the high bits,
// max digit bits should be 26 because
// max internal value = 2*dvalue^2-2*dvalue (< 2^53)
function am1(i,x,w,j,c,n) {
  while(--n >= 0) {
    var v = x*this[i++]+w[j]+c;
    c = Math.floor(v/0x4000000);
    w[j++] = v&0x3ffffff;
  }
  return c;
}
// am2 avoids a big mult-and-extract completely.
// Max digit bits should be <= 30 because we do bitwise ops
// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
function am2(i,x,w,j,c,n) {
  var xl = x&0x7fff, xh = x>>15;
  while(--n >= 0) {
    var l = this[i]&0x7fff;
    var h = this[i++]>>15;
    var m = xh*l+h*xl;
    l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
    c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
    w[j++] = l&0x3fffffff;
  }
  return c;
}
// Alternately, set max digit bits to 28 since some
// browsers slow down when dealing with 32-bit numbers.
function am3(i,x,w,j,c,n) {
  var xl = x&0x3fff, xh = x>>14;
  while(--n >= 0) {
    var l = this[i]&0x3fff;
    var h = this[i++]>>14;
    var m = xh*l+h*xl;
    l = xl*l+((m&0x3fff)<<14)+w[j]+c;
    c = (l>>28)+(m>>14)+xh*h;
    w[j++] = l&0xfffffff;
  }
  return c;
}
if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
  BigInteger.prototype.am = am2;
  dbits = 30;
}
else if(j_lm && (navigator.appName != "Netscape")) {
  BigInteger.prototype.am = am1;
  dbits = 26;
}
else { // Mozilla/Netscape seems to prefer am3
  BigInteger.prototype.am = am3;
  dbits = 28;
}

BigInteger.prototype.DB = dbits;
BigInteger.prototype.DM = ((1<<dbits)-1);
BigInteger.prototype.DV = (1<<dbits);

var BI_FP = 52;
BigInteger.prototype.FV = Math.pow(2,BI_FP);
BigInteger.prototype.F1 = BI_FP-dbits;
BigInteger.prototype.F2 = 2*dbits-BI_FP;

// Digit conversions
var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
var BI_RC = new Array();
var rr,vv;
rr = "0".charCodeAt(0);
for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
rr = "a".charCodeAt(0);
for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
rr = "A".charCodeAt(0);
for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

function int2char(n) { return BI_RM.charAt(n); }
function intAt(s,i) {
  var c = BI_RC[s.charCodeAt(i)];
  return (c==null)?-1:c;
}

// (protected) copy this to r
function bnpCopyTo(r) {
  for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
  r.t = this.t;
  r.s = this.s;
}

// (protected) set from integer value x, -DV <= x < DV
function bnpFromInt(x) {
  this.t = 1;
  this.s = (x<0)?-1:0;
  if(x > 0) this[0] = x;
  else if(x < -1) this[0] = x+DV;
  else this.t = 0;
}

// return bigint initialized to value
function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

// (protected) set from string and radix
function bnpFromString(s,b) {
  var k;
  if(b == 16) k = 4;
  else if(b == 8) k = 3;
  else if(b == 256) k = 8; // byte array
  else if(b == 2) k = 1;
  else if(b == 32) k = 5;
  else if(b == 4) k = 2;
  else { this.fromRadix(s,b); return; }
  this.t = 0;
  this.s = 0;
  var i = s.length, mi = false, sh = 0;
  while(--i >= 0) {
    var x = (k==8)?s[i]&0xff:intAt(s,i);
    if(x < 0) {
      if(s.charAt(i) == "-") mi = true;
      continue;
    }
    mi = false;
    if(sh == 0)
      this[this.t++] = x;
    else if(sh+k > this.DB) {
      this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
      this[this.t++] = (x>>(this.DB-sh));
    }
    else
      this[this.t-1] |= x<<sh;
    sh += k;
    if(sh >= this.DB) sh -= this.DB;
  }
  if(k == 8 && (s[0]&0x80) != 0) {
    this.s = -1;
    if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
  }
  this.clamp();
  if(mi) BigInteger.ZERO.subTo(this,this);
}

// (protected) clamp off excess high words
function bnpClamp() {
  var c = this.s&this.DM;
  while(this.t > 0 && this[this.t-1] == c) --this.t;
}

// (public) return string representation in given radix
function bnToString(b) {
  if(this.s < 0) return "-"+this.negate().toString(b);
  var k;
  if(b == 16) k = 4;
  else if(b == 8) k = 3;
  else if(b == 2) k = 1;
  else if(b == 32) k = 5;
  else if(b == 4) k = 2;
  else return this.toRadix(b);
  var km = (1<<k)-1, d, m = false, r = "", i = this.t;
  var p = this.DB-(i*this.DB)%k;
  if(i-- > 0) {
    if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
    while(i >= 0) {
      if(p < k) {
        d = (this[i]&((1<<p)-1))<<(k-p);
        d |= this[--i]>>(p+=this.DB-k);
      }
      else {
        d = (this[i]>>(p-=k))&km;
        if(p <= 0) { p += this.DB; --i; }
      }
      if(d > 0) m = true;
      if(m) r += int2char(d);
    }
  }
  return m?r:"0";
}

// (public) -this
function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

// (public) |this|
function bnAbs() { return (this.s<0)?this.negate():this; }

// (public) return + if this > a, - if this < a, 0 if equal
function bnCompareTo(a) {
  var r = this.s-a.s;
  if(r != 0) return r;
  var i = this.t;
  r = i-a.t;
  if(r != 0) return r;
  while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
  return 0;
}

// returns bit length of the integer x
function nbits(x) {
  var r = 1, t;
  if((t=x>>>16) != 0) { x = t; r += 16; }
  if((t=x>>8) != 0) { x = t; r += 8; }
  if((t=x>>4) != 0) { x = t; r += 4; }
  if((t=x>>2) != 0) { x = t; r += 2; }
  if((t=x>>1) != 0) { x = t; r += 1; }
  return r;
}

// (public) return the number of bits in "this"
function bnBitLength() {
  if(this.t <= 0) return 0;
  return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
}

// (protected) r = this << n*DB
function bnpDLShiftTo(n,r) {
  var i;
  for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
  for(i = n-1; i >= 0; --i) r[i] = 0;
  r.t = this.t+n;
  r.s = this.s;
}

// (protected) r = this >> n*DB
function bnpDRShiftTo(n,r) {
  for(var i = n; i < this.t; ++i) r[i-n] = this[i];
  r.t = Math.max(this.t-n,0);
  r.s = this.s;
}

// (protected) r = this << n
function bnpLShiftTo(n,r) {
  var bs = n%this.DB;
  var cbs = this.DB-bs;
  var bm = (1<<cbs)-1;
  var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
  for(i = this.t-1; i >= 0; --i) {
    r[i+ds+1] = (this[i]>>cbs)|c;
    c = (this[i]&bm)<<bs;
  }
  for(i = ds-1; i >= 0; --i) r[i] = 0;
  r[ds] = c;
  r.t = this.t+ds+1;
  r.s = this.s;
  r.clamp();
}

// (protected) r = this >> n
function bnpRShiftTo(n,r) {
  r.s = this.s;
  var ds = Math.floor(n/this.DB);
  if(ds >= this.t) { r.t = 0; return; }
  var bs = n%this.DB;
  var cbs = this.DB-bs;
  var bm = (1<<bs)-1;
  r[0] = this[ds]>>bs;
  for(var i = ds+1; i < this.t; ++i) {
    r[i-ds-1] |= (this[i]&bm)<<cbs;
    r[i-ds] = this[i]>>bs;
  }
  if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
  r.t = this.t-ds;
  r.clamp();
}

// (protected) r = this - a
function bnpSubTo(a,r) {
  var i = 0, c = 0, m = Math.min(a.t,this.t);
  while(i < m) {
    c += this[i]-a[i];
    r[i++] = c&this.DM;
    c >>= this.DB;
  }
  if(a.t < this.t) {
    c -= a.s;
    while(i < this.t) {
      c += this[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    c += this.s;
  }
  else {
    c += this.s;
    while(i < a.t) {
      c -= a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    c -= a.s;
  }
  r.s = (c<0)?-1:0;
  if(c < -1) r[i++] = this.DV+c;
  else if(c > 0) r[i++] = c;
  r.t = i;
  r.clamp();
}

// (protected) r = this * a, r != this,a (HAC 14.12)
// "this" should be the larger one if appropriate.
function bnpMultiplyTo(a,r) {
  var x = this.abs(), y = a.abs();
  var i = x.t;
  r.t = i+y.t;
  while(--i >= 0) r[i] = 0;
  for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
  r.s = 0;
  r.clamp();
  if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
}

// (protected) r = this^2, r != this (HAC 14.16)
function bnpSquareTo(r) {
  var x = this.abs();
  var i = r.t = 2*x.t;
  while(--i >= 0) r[i] = 0;
  for(i = 0; i < x.t-1; ++i) {
    var c = x.am(i,x[i],r,2*i,0,1);
    if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
      r[i+x.t] -= x.DV;
      r[i+x.t+1] = 1;
    }
  }
  if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
  r.s = 0;
  r.clamp();
}

// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
// r != q, this != m.  q or r may be null.
function bnpDivRemTo(m,q,r) {
  var pm = m.abs();
  if(pm.t <= 0) return;
  var pt = this.abs();
  if(pt.t < pm.t) {
    if(q != null) q.fromInt(0);
    if(r != null) this.copyTo(r);
    return;
  }
  if(r == null) r = nbi();
  var y = nbi(), ts = this.s, ms = m.s;
  var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
  if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
  else { pm.copyTo(y); pt.copyTo(r); }
  var ys = y.t;
  var y0 = y[ys-1];
  if(y0 == 0) return;
  var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
  var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
  var i = r.t, j = i-ys, t = (q==null)?nbi():q;
  y.dlShiftTo(j,t);
  if(r.compareTo(t) >= 0) {
    r[r.t++] = 1;
    r.subTo(t,r);
  }
  BigInteger.ONE.dlShiftTo(ys,t);
  t.subTo(y,y);	// "negative" y so we can replace sub with am later
  while(y.t < ys) y[y.t++] = 0;
  while(--j >= 0) {
    // Estimate quotient digit
    var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
    if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
      y.dlShiftTo(j,t);
      r.subTo(t,r);
      while(r[i] < --qd) r.subTo(t,r);
    }
  }
  if(q != null) {
    r.drShiftTo(ys,q);
    if(ts != ms) BigInteger.ZERO.subTo(q,q);
  }
  r.t = ys;
  r.clamp();
  if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
  if(ts < 0) BigInteger.ZERO.subTo(r,r);
}

// (public) this mod a
function bnMod(a) {
  var r = nbi();
  this.abs().divRemTo(a,null,r);
  if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
  return r;
}

// Modular reduction using "classic" algorithm
function Classic(m) { this.m = m; }
function cConvert(x) {
  if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
  else return x;
}
function cRevert(x) { return x; }
function cReduce(x) { x.divRemTo(this.m,null,x); }
function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

Classic.prototype.convert = cConvert;
Classic.prototype.revert = cRevert;
Classic.prototype.reduce = cReduce;
Classic.prototype.mulTo = cMulTo;
Classic.prototype.sqrTo = cSqrTo;

// (protected) return "-1/this % 2^DB"; useful for Mont. reduction
// justification:
//         xy == 1 (mod m)
//         xy =  1+km
//   xy(2-xy) = (1+km)(1-km)
// x[y(2-xy)] = 1-k^2m^2
// x[y(2-xy)] == 1 (mod m^2)
// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
// JS multiply "overflows" differently from C/C++, so care is needed here.
function bnpInvDigit() {
  if(this.t < 1) return 0;
  var x = this[0];
  if((x&1) == 0) return 0;
  var y = x&3;		// y == 1/x mod 2^2
  y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
  y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
  y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
  // last step - calculate inverse mod DV directly;
  // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
  y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
  // we really want the negative inverse, and -DV < y < DV
  return (y>0)?this.DV-y:-y;
}

// Montgomery reduction
function Montgomery(m) {
  this.m = m;
  this.mp = m.invDigit();
  this.mpl = this.mp&0x7fff;
  this.mph = this.mp>>15;
  this.um = (1<<(m.DB-15))-1;
  this.mt2 = 2*m.t;
}

// xR mod m
function montConvert(x) {
  var r = nbi();
  x.abs().dlShiftTo(this.m.t,r);
  r.divRemTo(this.m,null,r);
  if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
  return r;
}

// x/R mod m
function montRevert(x) {
  var r = nbi();
  x.copyTo(r);
  this.reduce(r);
  return r;
}

// x = x/R mod m (HAC 14.32)
function montReduce(x) {
  while(x.t <= this.mt2)	// pad x so am has enough room later
    x[x.t++] = 0;
  for(var i = 0; i < this.m.t; ++i) {
    // faster way of calculating u0 = x[i]*mp mod DV
    var j = x[i]&0x7fff;
    var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
    // use am to combine the multiply-shift-add into one call
    j = i+this.m.t;
    x[j] += this.m.am(0,u0,x,i,0,this.m.t);
    // propagate carry
    while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
  }
  x.clamp();
  x.drShiftTo(this.m.t,x);
  if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
}

// r = "x^2/R mod m"; x != r
function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

// r = "xy/R mod m"; x,y != r
function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

Montgomery.prototype.convert = montConvert;
Montgomery.prototype.revert = montRevert;
Montgomery.prototype.reduce = montReduce;
Montgomery.prototype.mulTo = montMulTo;
Montgomery.prototype.sqrTo = montSqrTo;

// (protected) true iff this is even
function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

// (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
function bnpExp(e,z) {
  if(e > 0xffffffff || e < 1) return BigInteger.ONE;
  var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
  g.copyTo(r);
  while(--i >= 0) {
    z.sqrTo(r,r2);
    if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
    else { var t = r; r = r2; r2 = t; }
  }
  return z.revert(r);
}

// (public) this^e % m, 0 <= e < 2^32
function bnModPowInt(e,m) {
  var z;
  if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
  return this.exp(e,z);
}

// protected
BigInteger.prototype.copyTo = bnpCopyTo;
BigInteger.prototype.fromInt = bnpFromInt;
BigInteger.prototype.fromString = bnpFromString;
BigInteger.prototype.clamp = bnpClamp;
BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
BigInteger.prototype.drShiftTo = bnpDRShiftTo;
BigInteger.prototype.lShiftTo = bnpLShiftTo;
BigInteger.prototype.rShiftTo = bnpRShiftTo;
BigInteger.prototype.subTo = bnpSubTo;
BigInteger.prototype.multiplyTo = bnpMultiplyTo;
BigInteger.prototype.squareTo = bnpSquareTo;
BigInteger.prototype.divRemTo = bnpDivRemTo;
BigInteger.prototype.invDigit = bnpInvDigit;
BigInteger.prototype.isEven = bnpIsEven;
BigInteger.prototype.exp = bnpExp;

// public
BigInteger.prototype.toString = bnToString;
BigInteger.prototype.negate = bnNegate;
BigInteger.prototype.abs = bnAbs;
BigInteger.prototype.compareTo = bnCompareTo;
BigInteger.prototype.bitLength = bnBitLength;
BigInteger.prototype.mod = bnMod;
BigInteger.prototype.modPowInt = bnModPowInt;

// "constants"
BigInteger.ZERO = nbv(0);
BigInteger.ONE = nbv(1);
// prng4.js - uses Arcfour as a PRNG

function Arcfour() {
  this.i = 0;
  this.j = 0;
  this.S = new Array();
}

// Initialize arcfour context from key, an array of ints, each from [0..255]
function ARC4init(key) {
  var i, j, t;
  for(i = 0; i < 256; ++i)
    this.S[i] = i;
  j = 0;
  for(i = 0; i < 256; ++i) {
    j = (j + this.S[i] + key[i % key.length]) & 255;
    t = this.S[i];
    this.S[i] = this.S[j];
    this.S[j] = t;
  }
  this.i = 0;
  this.j = 0;
}

function ARC4next() {
  var t;
  this.i = (this.i + 1) & 255;
  this.j = (this.j + this.S[this.i]) & 255;
  t = this.S[this.i];
  this.S[this.i] = this.S[this.j];
  this.S[this.j] = t;
  return this.S[(t + this.S[this.i]) & 255];
}

Arcfour.prototype.init = ARC4init;
Arcfour.prototype.next = ARC4next;

// Plug in your RNG constructor here
function prng_newstate() {
  return new Arcfour();
}

// Pool size must be a multiple of 4 and greater than 32.
// An array of bytes the size of the pool will be passed to init()
var rng_psize = 256;
// Random number generator - requires a PRNG backend, e.g. prng4.js

// For best results, put code like
// <body onClick='rng_seed_time();' onKeyPress='rng_seed_time();'>
// in your main HTML document.

var rng_state;
var rng_pool;
var rng_pptr;

// Mix in a 32-bit integer into the pool
function rng_seed_int(x) {
  rng_pool[rng_pptr++] ^= x & 255;
  rng_pool[rng_pptr++] ^= (x >> 8) & 255;
  rng_pool[rng_pptr++] ^= (x >> 16) & 255;
  rng_pool[rng_pptr++] ^= (x >> 24) & 255;
  if(rng_pptr >= rng_psize) rng_pptr -= rng_psize;
}

// Mix in the current time (w/milliseconds) into the pool
function rng_seed_time() {
  rng_seed_int(new Date().getTime());
}

// Initialize the pool with junk if needed.
if(rng_pool == null) {
  rng_pool = new Array();
  rng_pptr = 0;
  var t;
  if(navigator.appName == "Netscape" && navigator.appVersion < "5" && window.crypto) {
    // Extract entropy (256 bits) from NS4 RNG if available
    var z = window.crypto.random(32);
    for(t = 0; t < z.length; ++t)
      rng_pool[rng_pptr++] = z.charCodeAt(t) & 255;
  }  
  while(rng_pptr < rng_psize) {  // extract some randomness from Math.random()
    t = Math.floor(65536 * Math.random());
    rng_pool[rng_pptr++] = t >>> 8;
    rng_pool[rng_pptr++] = t & 255;
  }
  rng_pptr = 0;
  rng_seed_time();
  //rng_seed_int(window.screenX);
  //rng_seed_int(window.screenY);
}

function rng_get_byte() {
  if(rng_state == null) {
    rng_seed_time();
    rng_state = prng_newstate();
    rng_state.init(rng_pool);
    for(rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr)
      rng_pool[rng_pptr] = 0;
    rng_pptr = 0;
    //rng_pool = null;
  }
  // TODO: allow reseeding after first request
  return rng_state.next();
}

function rng_get_bytes(ba) {
  var i;
  for(i = 0; i < ba.length; ++i) ba[i] = rng_get_byte();
}

function SecureRandom() {}

SecureRandom.prototype.nextBytes = rng_get_bytes;
// Depends on jsbn.js and rng.js

// Version 1.1: support utf-8 encoding in pkcs1pad2

// convert a (hex) string to a bignum object
function parseBigInt(str,r) {
  return new BigInteger(str,r);
}

function linebrk(s,n) {
  var ret = "";
  var i = 0;
  while(i + n < s.length) {
    ret += s.substring(i,i+n) + "\n";
    i += n;
  }
  return ret + s.substring(i,s.length);
}

function byte2Hex(b) {
  if(b < 0x10)
    return "0" + b.toString(16);
  else
    return b.toString(16);
}

// PKCS#1 (type 2, random) pad input string s to n bytes, and return a bigint
function pkcs1pad2(s,n) {
  if(n < s.length + 11) { // TODO: fix for utf-8
    alert("Message too long for RSA");
    return null;
  }
  var ba = new Array();
  var i = s.length - 1;
  while(i >= 0 && n > 0) {
    var c = s.charCodeAt(i--);
    if(c < 128) { // encode using utf-8
      ba[--n] = c;
    }
    else if((c > 127) && (c < 2048)) {
      ba[--n] = (c & 63) | 128;
      ba[--n] = (c >> 6) | 192;
    }
    else {
      ba[--n] = (c & 63) | 128;
      ba[--n] = ((c >> 6) & 63) | 128;
      ba[--n] = (c >> 12) | 224;
    }
  }
  ba[--n] = 0;
  var rng = new SecureRandom();
  var x = new Array();
  while(n > 2) { // random non-zero pad
    x[0] = 0;
    while(x[0] == 0) rng.nextBytes(x);
    ba[--n] = x[0];
  }
  ba[--n] = 2;
  ba[--n] = 0;
  return new BigInteger(ba);
}

// "empty" RSA key constructor
function RSAKey() {
  this.n = null;
  this.e = 0;
  this.d = null;
  this.p = null;
  this.q = null;
  this.dmp1 = null;
  this.dmq1 = null;
  this.coeff = null;
}

// Set the public key fields N and e from hex strings
function RSASetPublic(N,E) {
  if(N != null && E != null && N.length > 0 && E.length > 0) {
    this.n = parseBigInt(N,16);
    this.e = parseInt(E,16);
  }
  else
    alert("Invalid RSA public key");
}

// Perform raw public operation on "x": return x^e (mod n)
function RSADoPublic(x) {
  return x.modPowInt(this.e, this.n);
}

// Return the PKCS#1 RSA encryption of "text" as an even-length hex string
function RSAEncrypt(text) {
  var m = pkcs1pad2(text,(this.n.bitLength()+7)>>3);
  if(m == null) return null;
  var c = this.doPublic(m);
  if(c == null) return null;
  var h = c.toString(16);
  if((h.length & 1) == 0) return h; else return "0" + h;
}

// Return the PKCS#1 RSA encryption of "text" as a Base64-encoded string
//function RSAEncryptB64(text) {
//  var h = this.encrypt(text);
//  if(h) return hex2b64(h); else return null;
//}

// protected
RSAKey.prototype.doPublic = RSADoPublic;

// public
RSAKey.prototype.setPublic = RSASetPublic;
RSAKey.prototype.encrypt = RSAEncrypt;
//RSAKey.prototype.encrypt_b64 = RSAEncryptB64;


















// ---------------- API class CheckinUsersZ --------------------

/**
 * This class encapsulates the constants of CheckinUsersC.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.CheckinUsersZ = function() { 
  return new de.elo.ix.client.LongBitset("de.elo.ix.client.CheckinUsersZ", arguments);
 };

// ---------------- API class IXServerEventsContext --------------------

de.elo.ix.client.IXServerEventsContext = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.IXServerEventsContext';

  /**
   * IndexServer URL.
   * This value is null, if IndexServer is embedded into another application
   * (ELO Archive Link) and parameter ixUrlBase is not set.
   */
  // this.url;

  /**
   * ClientInfo object including session ticket
   */
  // this.ci;

  /**
   * Current user
   */
  // this.user;

 };

// ---------------- API class WFDelegateNodeInfo --------------------

/**
 * This class is used as a parameter in the function {@link IXServicePortIF#delegateWorkFlowNode(ClientInfo, WFDelegateNodeInfo, LockZ)}.
 * @since 7.00.000.032
 */
de.elo.ix.client.WFDelegateNodeInfo = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.WFDelegateNodeInfo';

  /**
   * Workflow ID, GUID or name
   */
  // this.flowId;

  /**
   * Node ID
   */
  // this.nodeId;

  /**
   * Name or ID of user or group to whom the workflow is delegated.
   */
  // this.delegateToUserId;

  /**
   * Name of the new node
   */
  // this.delegateNodeName;

  /**
   * Description of the new node
   */
  // this.delegateNodeComment;

  /**
   * Name of the back node.
   */
  // this.backNodeName;

  /**
   * Description of the back node.
   */
  // this.backNodeComment;

  /**
   * Horizontal distance between the active node and the delegation node.
   * Recommended value is 240.
   */
  // this.delegateNodeMoveX;

  /**
   * Vertical distance between the active node and the delegation node.
   * Recommended value is 0.
   */
  // this.delegateNodeMoveY;

  /**
   * Horizontal distance between the active node and the back node.
   * Recommended value is 0.
   */
  // this.backNodeMoveX;

  /**
   * Vertical distance between the active node and the back node.
   * Recommended value is 80.
   */
  // this.backNodeMoveY;

  /**
   * This selector defines which members of the node specified by nodeId are copied
   * to the delegated node.
   * If this value is null, no members are copied.
   * The members given or evaluated by delegateNodeUserId, delegateNodeName, delegateNodeComment, delegateNodeMoveX and delegateNodeMoveY
   * overwrite the members copied due copyMembersToDelegateNodeZ.
   * The member WFNode.formSpec is always copied from the current node and need not to be included in copyMembersToDelegateNodeZ.
   */
  // this.copyMembersToDelegateNodeZ;

  /**
   * This selector defines which members of the current node are copied
   * to the node that leads back to the current user.
   * If this value is null, the following members are copied by default:
   * <code>WFNodeC.mbFlags|WFNodeC.mbMoveCyclePosX|WFNodeC.mbObjKeyNames|WFNodeC.mbScriptNames|WFNodeC.mbTag|WFNodeC.mbTimeLimit|WFNodeC.mbTimeLimitEscalations</code>.
   * The members given or evaluated by backNodeName, backNodeComment, backNodeMoveX and backNodeMoveY overwrite the members copied due copyMembersToBackNodeZ.
   * The following members are always copied from the current node:
   * WFNode.userId, WFNode.userName, WFNode.designDepartment, WFNode.department2, WFNode.formSpec and need not to be included in copyMembersToBackNodeZ.
   */
  // this.copyMembersToBackNodeZ;

 };

// ---------------- API class ConfigFileZ --------------------

/**
 * This class encapsulates the constants of ConfigFileC.
 */
de.elo.ix.client.ConfigFileZ = function() { 
  return new de.elo.ix.client.LongBitset("de.elo.ix.client.ConfigFileZ", arguments);
 };

// ---------------- API class LockZ --------------------

/**
 * This class encapsulates the constants of the LockC class.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.LockZ = function() { 
  return new de.elo.ix.client.LongBitset("de.elo.ix.client.LockZ", arguments);
 };

// ---------------- API class CopySordC --------------------

/**
 * Constants to copy or move archive entries, or to create a logical link. These constants are used
 * as parameters in the copySord function.
 * <p>
 * Copyright: Copyright (c) 2004
 * </p>
 * <p>
 * Organisation: ELO Digital Office GmbH
 * </p>
 * @see IXServicePortIF#copySord IXServicePortIF.copySord(...)
 */
de.elo.ix.client.CopySordC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.CopySordC';

  /**
   * Move an archive entry.
   */
  // this.bsetMOVE;

  /**
   * Create a logical link.
   */
  // this.bsetREFERENCE;

  /**
   * Reserved.
   * Use ProcessCopyElements and processTrees to copy an archive structure.
   */
  // this.bsetCOPY;

  /**
   * Copy archive entry with children (CURRENTLY NOT SUPPORTED!).
   */
  // this.bsetCOPY_WITH_CHILDREN;

  /**
   * Copy archive entry with documents (CURRENTLY NOT SUPPORTED!).
   */
  // this.bsetCOPY_WITH_DOCUMENTS;

  /**
   * Copy archive entry with document versions (CURRENTLY NOT SUPPORTED!).
   */
  // this.bsetCOPY_WITH_DOCUMENT_VERSIONS;

  /**
   * Copy archive entry with attachments (CURRENTLY NOT SUPPORTED!).
   */
  // this.bsetCOPY_WITH_ATTACHMENTS;

  /**
   * Copy archive entry with attachment versions (CURRENTLY NOT SUPPORTED!).
   */
  // this.bsetCOPY_WITH_ATTACHMENT_VERSIONS;

  /**
   * Copy archive entry with notes (CURRENTLY NOT SUPPORTED!).
   */
  // this.bsetCOPY_WITH_NOTES_TYPE_NORMAL;

  /**
   * Copy archive entry with personal notes (CURRENTLY NOT SUPPORTED!).
   */
  // this.bsetCOPY_WITH_NOTES_TYPE_PERSONAL;

  /**
   * Copy archive entry with stamps (CURRENTLY NOT SUPPORTED!).
   */
  // this.bsetCOPY_WITH_NOTES_TYPE_STAMP;

  /**
   * RESERVED.
   * Use ProcessCopyElements and processTrees to copy an archive structure.
   */
  // this.COPY;

  /**
   * Move the sord. Used in ix.copySord(...).
   */
  // this.MOVE;

  /**
   * Create a reference to the sord. Used in ix.copySord(...).
   */
  // this.REFERENCE;

 };

// ---------------- API class ObjDataC --------------------

/**
 * <p>Bit constants for members of Sord</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 * @see Sord
 */
de.elo.ix.client.ObjDataC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ObjDataC';

  /**
   * Member bit: Serialisation version ID
   * DB column: objid
   */
  // this.mbId;

  /**
   * DB column: objguid
   */
  // this.mbGuid;

  /**
   * DB column: objguid
   */
  // this.lnGuid;

  /**
   * DB column: objparent
   */
  // this.mbParentId;

  /**
   * DB column: objtype
   */
  // this.mbType;

  /**
   * DB column: objflags
   */
  // this.mbFlags;

  /**
   * DB column: objshort
   */
  // this.mbName;

  /**
   * DB column: objshort
   */
  // this.lnName;

  /**
   * DB column: objsreg
   */
  // this.mbSReg;

  /**
   * DB column: objsreg
   */
  // this.lnSReg;

  /**
   * DB column: objidate
   */
  // this.mbIDate;

  /**
   * DB column: objxdate
   */
  // this.mbXDate;

  /**
   * DB column: objkey
   */
  // this.mbKey;

  /**
   * DB column: objkind
   */
  // this.mbKind;

  /**
   * DB column: objpath
   */
  // this.mbPath;

  /**
   * DB column: objinfo
   */
  // this.mbInfo;

  /**
   * DB column: objmask
   */
  // this.mbMask;

  /**
   * DB column: objdoc
   */
  // this.mbDoc;

  /**
   * DB column: objakey1
   */
  // this.mbSig;

  /**
   * DB column: objattach
   */
  // this.mbAtt;

  /**
   * DB column: objuser
   */
  // this.mbOwnerId;

  /**
   * DB column: objlock
   */
  // this.mbLockId;

  /**
   * DB column: objstatus
   */
  // this.mbStatus;

  /**
   * DB column: objhistcount
   */
  // this.mbHistCount;

  /**
   * DB column: objdesc
   */
  // this.mbInternalDesc;

  /**
   * DB column: objdesc
   */
  // this.lnInternalDesc;

  /**
   * DB column: objchildcount
   */
  // this.mbChildCount;

  /**
   * DB column: objdeldate
   */
  // this.mbDelDate;

  /**
   * DB column: objsyncdateloc
   */
  // this.mbSyncDateLoc;

  /**
   * DB column: objsyncdaterem
   */
  // this.mbSyncDateRem;

  /**
   * DB column: objvtrep
   */
  // this.mbVtRep;

  /**
   * DB column: objacl
   */
  // this.mbAcl;

  /**
   * DB column: objacl
   */
  // this.lnAcl;

  /**
   * DB column: objtstamp
   */
  // this.mbTStamp;

  /**
   * DB column: objtstamp
   */
  // this.lnTStamp;

  /**
   * DB column: objsdata
   */
  // this.mbSName;

  /**
   * DB column: objsdata
   */
  // this.lnSName;

  /**
   * DB column: objsdesc
   */
  // this.mbSDesc;

  /**
   * DB column: objsdesc
   */
  // this.lnSDesc;

  /**
   * All valid member bits.
   */
  // this.mbAllMembers;

 };

// ---------------- API class ObjKeyDataC --------------------

/**
 * <p>Bit constants for members of ObjKeyData</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 * @see ObjKeyData
 */
de.elo.ix.client.ObjKeyDataC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ObjKeyDataC';

  /**
   * DB column: parentid
   */
  // this.mbObjId;

  /**
   * DB column: okeyno
   */
  // this.mbId;

  /**
   * DB column: okeyname
   */
  // this.mbName;

  /**
   * DB column: okeyname
   */
  // this.lnName;

  /**
   * DB column: okeydata
   */
  // this.mbData;

  /**
   * DB column: okeydata
   */
  // this.lnData;

  /**
   * DB column: okeyudata
   */
  // this.mbUdata;

  /**
   * DB column: okeyudata
   */
  // this.lnUdata;

  /**
   * DB column: okeysdata
   */
  // this.mbSdata;

  /**
   * DB column: okeysdata
   */
  // this.lnSdata;

  /**
   * All valid member bits.
   */
  // this.mbAllMembers;

 };

// ---------------- API class SordTypeC --------------------

/**
 * Constants for folder or document types.
 * @see SordType SordType
 * @see IXServicePortIF#checkoutSordTypes checkoutSordTypes
 */
de.elo.ix.client.SordTypeC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.SordTypeC';

  /**
   * Maximum number of folder types (=32).
   */
  // this.MAX_FOLDER_TYPES;

  /**
   * Maximum number of document types (=56).
   */
  // this.MAX_DOCUMENT_TYPES;

  /**
   * ID, name, extension.
   */
  // this.mbIdNameExt;

  /**
   * Return icon file data in <code>checkoutSordType</code>.
   */
  // this.mbIconMember;

  /**
   * Return file data of workflow icon in <code>checkoutSordType</code>.
   */
  // this.mbWorkflowIconMember;

  /**
   * Return file data of disabled icon in <code>checkoutSordType</code>.
   */
  // this.mbDisabledIconMember;

  // this.mbJPG;

  // this.mbBMP;

  // this.mbICO;

  /**
   * Return only ID, name, extension - no icon data.
   */
  // this.mbNoIcons;

  /**
   * Return icon file data in <code>checkoutSordType</code>.
   */
  // this.mbIconJPG;

  // this.mbIconBMP;

  // this.mbIconICO;

  /**
   * Return file data of normal icon and disabled icon in <code>checkoutSordType</code>.
   */
  // this.mbIconsJPG;

  // this.mbIconsBMP;

  // this.mbIconsICO;

  /**
   * Return file data of normal, workflow and disabled icon in <code>checkoutSordType</code>.
   */
  // this.mbAllJPG;

  // this.mbAllBMP;

  // this.mbAllICO;

 };

// ---------------- API class FindActivityInfo --------------------

/**
 * This class specifies constraints for
 * the API function {@link IXServicePortIF#findFirstActivities(ClientInfo, FindActivityInfo, int, ActivityZ)}.
 * <p>
 * By default, the members of this class are combined by AND.
 * If {@link #senderOrReceiver} is set, senderId and receiverId are combined by OR.
 * </p><p>
 * If neither senderId nor receiverId is set, the function findFirstActivities collects all activities
 * that can be read by the current session.
 * </p>
 * @since 8.00.012.001
 */
de.elo.ix.client.FindActivityInfo = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.FindActivityInfo';

  /**
   * Find by object ID.
   * Find activities assigned to this object.
   * Optional.
   */
  // this.objId;

  /**
   * Find activities created by this user.
   * Can be set to a user ID, user GUID or user name.
   * Optional.
   */
  // this.senderId;

  /**
   * Find activities created for this receiver.
   * Can be set to a user ID, user GUID or user name.
   * Optional.
   */
  // this.receiverId;

  /**
   * Search for sender or receiver.
   * Combine the senderId and receiverId by logical OR operation.
   */
  // this.senderOrReceiver;

  /**
   * Search for all groups of sender and receiver too.
   */
  // this.inclGroup;

  /**
   * Search for the activities of the deputized users too.
   */
  // this.inclDeputy;

 };

// ---------------- API class ActivityProjectDataC --------------------

/**
 * <p>Bit constants for members of ActivityProject</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 * @see ActivityProject
 */
de.elo.ix.client.ActivityProjectDataC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ActivityProjectDataC';

  /**
   * DB column: project
   */
  // this.mbProject;

  /**
   * DB column: project
   */
  // this.lnProject;

  /**
   * DB column: major
   */
  // this.mbMajor;

  /**
   * DB column: minor
   */
  // this.mbMinor;

  /**
   * DB column: optvalue
   */
  // this.mbOptValue;

  /**
   * DB column: optvalue
   */
  // this.lnOptValue;

  /**
   * All valid member bits.
   */
  // this.mbAllMembers;

 };

// ---------------- API class CheckinUsersC --------------------

/**
 * <p>Constants for the function <code>checkinUsers</code>.</p>
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: </p>
 * @author unbekannt
 * @see IXServicePortIF#checkinUsers checkinUsers
 */
de.elo.ix.client.CheckinUsersC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.CheckinUsersC';

  /**
   * Checkin no user. Makes sense if you only want to unlock user data.
   */
  // this.bsetNOTHING;

  /**
   * Write without password. Create new user is user ID &lt; 0.
   */
  // this.bsetWRITE;

  /**
   * Updates a users password.
   */
  // this.bsetPASSWORD;

  /**
   * Insert a new user with the supplied user ID.
   */
  // this.bsetNEW_USER;

  /**
   * Updates a users password.
   */
  // this.NOTHING;

  /**
   * Updates a users password.
   */
  // this.PASSWORD;

  /**
   * Insert a new user with the supplied user ID. Set the user's password.
   */
  // this.NEW_USER;

  /**
   * Updates or creates a user.
   */
  // this.WRITE;

  /**
   * Updates or creates a user and set's the users's password.
   */
  // this.WRITE_PASSWORD;

 };

// ---------------- API class AlertDataC --------------------

/**
 * <p>Bit constants for members of Alert</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 * @see Alert
 */
de.elo.ix.client.AlertDataC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.AlertDataC';

  /**
   * DB column: destination
   */
  // this.mbDest;

  /**
   * DB column: source
   */
  // this.mbSource;

  /**
   * DB column: alerttype
   */
  // this.mbType;

  /**
   * DB column: objid
   */
  // this.mbObjId;

  /**
   * DB column: extra1
   */
  // this.mbExtra1;

  /**
   * DB column: extra2
   */
  // this.mbExtra2;

  /**
   * DB column: alertmemo
   */
  // this.mbMemo;

  /**
   * DB column: alertmemo
   */
  // this.lnMemo;

  /**
   * DB column: alerttime
   */
  // this.mbTime;

  /**
   * All valid member bits.
   */
  // this.mbAllMembers;

 };

// ---------------- API class EditInfoC --------------------

/**
 * <p>Constants to read data for editing the indexing information of an archive entry</p>
 * @author imw
 * @see EditInfo
 */
de.elo.ix.client.EditInfoC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.EditInfoC';

  /**
   * Mask names.
   */
  // this.mbMaskNames;

  /**
   * Path names.
   */
  // this.mbPathNames;

  /**
   * Marker names (colors).
   */
  // this.mbMarkerNames;

  /**
   * RESERVED. Document templates.
   */
  // this.mbDocTemplates;

  /**
   * Complete data of the mask of the specified object.
   */
  // this.mbMask;

  /**
   * Information to download the document of the archive entry.
   */
  // this.mbDocumentMembers;

  /**
   * Information to download the attachment of the archive entry.
   */
  // this.mbAttachmentMembers;

  /**
   * Information to download the signature of the archive entry.
   */
  // this.mbSignatureMembers;

  /**
   * Names of all replication sets.
   */
  // this.mbReplNames;

  /**
   * List of Sord types (labels, icons, extensions corresponding to Sord.type).
   * Icon images are returned in JPEG format.
   */
  // this.mbSordTypesJPG;

  /**
   * Return notes in checkoutSord and checkoutDoc.
   */
  // this.mbNoteMembers;

  /**
   * Return keywords in checkoutSord and checkoutDoc.
   */
  // this.mbKeywordMembers;

  /**
   * Return document preview in checkoutDoc
   */
  // this.mbPreviewMembers;

  /**
   * Return the physical path of the document in checkoutDoc.
   * This requires a request to Document Mangager.
   */
  // this.mbPhysPath;

  /**
   * All members: indexing information + basic data + document + attachment + signature
   */
  // this.mbAllMembers;

  /**
   * Sord object with all members except document version information.
   */
  // this.mbSord;

  /**
   * Sord object with lean members.
   */
  // this.mbSordLean;

  /**
   * Sord object with SordC.mbAll, document versions, signatures.
   */
  // this.mbSordDoc;

  /**
   * Sord object with SordC.mbAll, document versions, attachment versions, signatures.
   */
  // this.mbSordDocAtt;

  /**
   * Includes
   * mbDocumentMembers, mbSignatureMembers, SordC.mbCheckout
   */
  // this.mbSordDocSmallContent;

  /**
   * Includes
   * mbDocumentMembers|mbSignatureMembers, SordC.mbCheckoutPreview
   */
  // this.mbSordPreviewSmallContent;

  /**
   * Document version(s) and signature, no index information
   */
  // this.mbDocument;

  /**
   * Attachment version(s), no index information
   */
  // this.mbAttachment;

  /**
   * All members
   * without
   * mbSmallDocumentContent
   */
  // this.mbAll;

  /**
   * Arrays of mask, marker, repl, path names
   */
  // this.mbBasicData;

  /**
   * Lock or unlock object, do not read or write any data.
   */
  // this.mbOnlyLock;

  /**
   * Return only notes.
   */
  // this.mbNotes;

  /**
   * Return all Sord members and notes.
   */
  // this.mbSordNotes;

  /**
   * Read only Sord ID and GUID.
   */
  // this.mbOnlyId;

 };

// ---------------- API class SordHist --------------------

/**
 * Version history for the keywording from an object. A version history is
 * created for a sord object when the keywording is
 * changed for the first time (a newly created sord has no version history).
 * Once created only one SordHist object exist for the sord object and is
 * assigned to the sord object via the Sord.guid = SordHist.objGuid relationship.
 * The keywording properties that were altered in the change process are saved in
 * an array of SordHistKey objects.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.SordHist = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.SordHist';

  /**
   * GUID of the SordHist object.
   */
  // this.histGuid;

  /**
   * Identifies the application with which changes were made to the keywording.
   */
  // this.histSource;

  /**
   * GUID of the sord object.
   */
  // this.objGuid;

  /**
   * Timestamp of the change in the timezone of the client.
   * The format is JJJJ.MM.DD.hh.mm.ss
   */
  // this.timeStampLocal;

  /**
   * Timestamp of the change in the timezone of the client, in UTC form.
   * The format is JJJJ.MM.DD.hh.mm.ss
   */
  // this.timeStampUTC;

  /**
   * The name of the user who carried out the changes.
   */
  // this.userName;

  /**
   * The user who carried out the changes.
   */
  // this.userNo;

  /**
   * The name of the computer from which the change was carried out. This is the parameter
   * clientComputer which is provided by the ix.login function.
   */
  // this.workStation;

  /**
   * An array of the keywording changes.
   */
  // this.histKeys;

 };

// ---------------- API class CopySordZ --------------------

/**
 * This class encapsulates the constants of the CopySordsC class.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.CopySordZ = function() { 
  return new de.elo.ix.client.LongBitset("de.elo.ix.client.CopySordZ", arguments);
 };

// ---------------- API class ConfigFileC --------------------

/**
 * Constants for the ConfigFile class. These are used for accessing server directories.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @see ConfigFile ConfigFile
 */
de.elo.ix.client.ConfigFileC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ConfigFileC';

  /**
   * Directory for COLD background files.
   */
  // this.COLD;

  /**
   * Directory for scripts.
   */
  // this.ELO_SCRIPTS;

  /**
   * Directory of initialization data.
   */
  // this.INIT_DATA;

  /**
   * Directory of Intray/postbox.
   */
  // this.POSTBOX;

  /**
   * Server side checkout directory.
   */
  // this.CHECKOUT;

  /**
   * Old document template directory (ELO 5.0).
   */
  // this.TEMPLATE;

  /**
   * RESERVED
   */
  // this.VIEWER_POSTBOX;

  /**
   * Member bit: name
   */
  // this.mbName;

  /**
   * Member bit: fileData
   */
  // this.mbFileData;

  /**
   * Member bit: lastModified
   */
  // this.mbLastModified;

  /**
   * Member bit: size
   */
  // this.mbSize;

  /**
   * Member bit: URL
   */
  // this.mbUrl;

  /**
   * Member bit set: all members.
   */
  // this.mbAllMembers;

  /**
   * Constant object for mbAllMembers.
   */
  // this.mbAll;

  /**
   * Constant object for mbAllmembers without file data.
   */
  // this.mbNoFileData;

 };

// ---------------- API class EloDmOpt --------------------

/**
 * Internal class.
 */
de.elo.ix.client.EloDmOpt = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.EloDmOpt';

  /**
   * DB column: optno
   */
  // this.id;

  /**
   * DB column: optval
   */
  // this.value;

  /**
   * DB column: remark
   */
  // this.remark;

 };

// ---------------- API class KeyInfo --------------------

/**
 * <p>Contains information about a key object: ID and name.</p>
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 */
de.elo.ix.client.KeyInfo = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.KeyInfo';

  /**
   * Key ID.
   */
  // this.id;

  /**
   * Key name.
   */
  // this.name;

 };

// ---------------- API class FindByPreviewCtrl --------------------

/**
 * This class can be used to find the documents for
 * which preview files have to be created.
 * The main purpose is to control the automatic
 * preview generation in a server process.
 * @since 7.00.026.001
 */
de.elo.ix.client.FindByPreviewCtrl = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.FindByPreviewCtrl';

  /**
   * Finds all documents with previews.
   */
  // this.previewAvailable;

  /**
   * Finds all documents for which the preview generation failed.
   */
  // this.previewError;

  /**
   * Select only those documents with one of this extension.
   */
  // this.fileExtensions;

 };

// ---------------- API class IXServerEventsC --------------------

de.elo.ix.client.IXServerEventsC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.IXServerEventsC';

  /**
   * Version information used in serialization with IxDataStream
   */
  // this.STREAM_VERSION;

 };

// ---------------- API class HttpRequestInfo --------------------

/**
 * This class contains information from the HttpServletRequest received by the Indexserver servlet
 * @since 8.00.012.002
 */
de.elo.ix.client.HttpRequestInfo = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.HttpRequestInfo';

  /**
   * HTTP Headers
   */
  // this.headers;

  /**
   * HTTP Cookies
   */
  // this.cookies;

  /**
   * Request parameters.
   */
  // this.requestParams;

  /**
   * Value of the request URI.
   * HttpServletRequest.getRequestURI()
   */
  // this.requestURI;

  /**
   * Value of the request URL.
   * HttpServletRequest.getRequestURL()
   */
  // this.requestURL;

 };

// ---------------- API class IXServicePortC --------------------

/**
 * <p>Constants for options and classes used by IndexServer.</p>
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 */
de.elo.ix.client.IXServicePortC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.IXServicePortC';

  /**
   * Version information used in serialization with IxDataStream
   */
  // this.STREAM_VERSION;

  /**
   * Constants for access rights.
   */
  // this.ACCESS;

  /**
   * Constants for access control lists.
   */
  // this.ACL_ITEM;

  /**
   * Constants for Activities
   */
  // this.ACTIVITY;

  /**
   * Constants for Activity project options.
   */
  // this.ACTIVITY_PROJECT;

  /**
   * Constants for Alerts (messages).
   */
  // this.ALERT;

  /**
   * Archiving modes like version controlled, read-only,...
   */
  // this.ARCHIVING_MODE;

  /**
   * Options for the <code>checkinUsers</code> function.
   */
  // this.CHECKIN_USERS;

  /**
   * Options for the <code>checkoutUsers</code> function.
   */
  // this.CHECKOUT_USERS;

  /**
   * Constants for colours
   */
  // this.COLOR;

  /**
   * Constanst for ConfigFile.
   */
  // this.CONFIG_FILE;

  /**
   * Constants (options) for the <code>copySord</code> function.
   */
  // this.COPY_SORD;

  /**
   * Constants for CounterInfo.
   */
  // this.COUNTER_INFO;

  /**
   * Constants for storage masks.
   */
  // this.DOC_MASK;

  /**
   * Constants for storage mask index lines.
   */
  // this.DOC_MASK_LINE;

  /**
   * Constants for document or attachment version history.
   */
  // this.DOC_VERSION;

  /**
   * Constants for editing indexing information and documents.
   */
  // this.EDIT_INFO;

  /**
   * Export options constants.
   */
  // this.EXPORT_OPTIONS;

  /**
   * Import options constants.
   */
  // this.IMPORT_OPTIONS;

  /**
   * Error numbers used in IndexServer exceptions.
   */
  // this.IXEXCEPTION;

  /**
   * Keyword constants.
   */
  // this.KEYWORD;

  /**
   * Constants for linkSords
   */
  // this.LINK_SORD;

  /**
   * Constants to lock and unlock data against concurrent modification.
   */
  // this.LOCK;

  /**
   * Constants for navigation information.
   */
  // this.NAV_INFO;

  /**
   * Note.
   */
  // this.NOTE;

  /**
   * Index lines of indexing information.
   */
  // this.OBJ_KEY;

  /**
   * Constants for process information
   */
  // this.PROCESS_INFO;

  /**
   * Constants for reminders.
   */
  // this.REMINDER;

  /**
   * Constants for replication set names.
   */
  // this.REPL_SET_NAME;

  /**
   * Constants for report.
   */
  // this.REPORT;

  /**
   * ReportInfo constants including report action codes.
   */
  // this.REPORT_INFO;

  /**
   * Constants for report modes (no, limited, verbose, full).
   */
  // this.REPORT_MODE;

  /**
   * Constants for report options containing report erp codes
   */
  // this.REPORT_OPTIONS;

  /**
   * Constants for find options.
   */
  // this.SEARCH_MODE;

  /**
   * Constants for server state providing the status of server modules.
   */
  // this.SERVER_STATE;

  /**
   * Constants for session options.
   */
  // this.SESSION_OPTIONS;

  /**
   * Constants for the indexing information (Sord object).
   */
  // this.SORD;

  /**
   * Constants for sord history.
   */
  // this.SORD_HIST;

  /**
   * Constants for sord history entries.
   */
  // this.SORD_HIST_KEY;

  /**
   * Constants for sord type.
   */
  // this.SORD_TYPE;

  /**
   * Sort orders like manually, alphabetically, ...
   */
  // this.SORT_ORDER;

  /**
   * Constants for store info.
   */
  // this.STORE_INFO;

  /**
   * Constants for take node.
   */
  // this.TAKE_NODE;

  /**
   * Constants for thesaurus.
   */
  // this.THESAURUS;

  /**
   * Constants for user information.
   */
  // this.USER_INFO;

  /**
   * Constants for user profile.
   */
  // this.USER_PROFILE;

  /**
   * Priority constants.
   */
  // this.USER_TASK_PRIORITY;

  /**
   * Sort order used when collecting tasks.
   */
  // this.USER_TASK_SORT_ORDER;

  /**
   * Constants for the control of the fulltext service.
   */
  // this.VT_DOC;

  /**
   * Constants for Workflows
   */
  // this.WORKFLOW;

  /**
   * Constants for workflow nodes
   */
  // this.WORKFLOW_NODE;

  /**
   * Constants for workflow node association types used by WFNodeMatrix
   */
  // this.WORKFLOW_NODE_ASSOC_TYPE;

  /**
   * Constants for workflows
   */
  // this.WORKFLOW_TYPE;

  /**
   * Constants for function invalidateCache.
   */
  // this.INVALIDATE_CACHE;

  /**
   * Constants for WFVersion.
   */
  // this.WORKFLOW_VERSION;

  /**
   * Constants for NoteTemplate
   */
  // this.NOTE_TEMPLATE;

  /**
   * Constants for NoteFreehand
   */
  // this.NOTE_FREEHAND;

  /**
   * Constants for getArchiveStatistics
   */
  // this.ARCHIVE_STATISTICS_OPTIONS;

  /**
   * Constants for MapDomain, checkoutMap etc.
   */
  // this.MAP_CONFIG;

  /**
   * Constants for MapDomain, checkoutMap etc.
   */
  // this.MAP_DOMAIN;

  /**
   * Constants for IndexServer options.
   */
  // this.ELO_IX_OPT;

  /**
   * Constants for class Any.
   */
  // this.ANY;

  /**
   * Constants for {@link IXServicePortIF#getSearchTerms(ClientInfo, FindInfo, int)}.
   */
  // this.SEARCH_TERMS;

  /**
   * Constants for the administration mode.
   */
  // this.ADMIN_MODE;

  /**
   * Constanst for the fulltext configuration.
   */
  // this.FULLTEXT_CONFIG;

  /**
   * Constants for the class ServerInfoDM.
   */
  // this.SERVER_INFO_DM;

  /**
   * Constants for the class FindDirect.
   */
  // this.FIND_DIRECT;

  /**
   * Constants for event busses.
   */
  // this.EVENT_BUS;

 };

// ---------------- API class DocMaskLineC --------------------

/**
 * <p>Constants for class <code>DocMaskLine</code></p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Organisation: ELO Digital Office GmbH </p>
 * @author imw
 */
de.elo.ix.client.DocMaskLineC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.DocMaskLineC';

  /**
   * Member bit: The type of the line information.
   * This can be one of the <code>DocMaskLineC.LINETYPE_*</code> constants.
   */
  // this.mbType;

  /**
   * Member bit: Line flags
   */
  // this.mbFlags;

  /**
   * Member bit: ACL
   */
  // this.mbAcl;

  /**
   * ACL length
   */
  // this.lnAcl;

  /**
   * Used to check wether a correct constant is used.
   */
  // this._TYPE_TYPE_ID;

  /**
   * Index line contains text information.
   */
  // this.TYPE_TEXT;

  /**
   * Index line contains a date.
   */
  // this.TYPE_DATE;

  /**
   * Index line contains a number. The number is internally stored as a string
   * value without any padding. Thus it is not possible to search over an interval.
   * Use one of the TYPE_NUMBER_F* types to be able to search over intervals.
   * The number must be formatted according to the locale information of the server.
   */
  // this.TYPE_NUMBER;

  /**
   * Index line contains a reference number ("Aktenzeichen").
   */
  // this.TYPE_AZ;

  /**
   * Index line contains a date in ISO format.
   */
  // this.TYPE_ISO_DATE;

  /**
   * Index line contains a list entry.
   */
  // this.TYPE_LIST;

  /**
   * Index line contains a user name.
   */
  // this.TYPE_USER;

  /**
   * Thesaurus
   */
  // this.TYPE_THES;

  /**
   * Index line contains a number value without a fraction part.
   * The value is internally stored with a padding of &amp; (positive numbers)
   * or @ (negative numbers). This gives the possibility to search over an interval
   * of numeric values, e. b. search for "1 ... 12" finds objects with index values 1,2,3,4,...12.
   * The number must be formatted according to the locale information given in the ClientInfo object.
   */
  // this.TYPE_NUMBER_F0;

  /**
   * Index line contains a number value with one digit after the decimal point.
   */
  // this.TYPE_NUMBER_F1;

  /**
   * Index line contains a number value with one digit after the decimal point.
   */
  // this.TYPE_NUMBER_F2;

  /**
   * Index line contains a number value of with four digits after the decimal point.
   */
  // this.TYPE_NUMBER_F4;

  /**
   * Index line contains a number value with six digits after the decimal point.
   */
  // this.TYPE_NUMBER_F6;

  /**
   * Default ist text
   */
  // this.DEFAULT;

  /**
   * Index line ID of links. Sord.linksGoOut and Sord.linksComeIn provide a
   * more convinient way to access links. Links can be added and removed with
   * the functions linkSords resp. unlinkSords.
   */
  // this.ID_LINK;

  /**
   * Index line name of links.
   */
  // this.NAME_LINK;

  /**
   * Index line ID of original file name
   */
  // this.ID_FILENAME;

  /**
   * Index line name of original file name
   */
  // this.NAME_FILENAME;

  /**
   * Index line ID to store informations used by "Versendemappe".
   */
  // this.DOCKEY_VSL;

  /**
   * Index line name to store informations used by "Versendemappe".
   */
  // this.DOCNAME_VSL;

  /**
   * This constant defines a limit for ObjKey.id values.
   * The following table defines which ObjKey.id values are allowed.
   * <p>
   * <table border="2">
   * <tr><td>ObjKey.id</td><td>Comment</td></tr>
   * <tr><td>0 ... MAX_ID_DOCMASK_LINE</td><td>ObjKeys with ObjKey.data.length &gt; 1 allowed.</td></tr>
   * <tr><td>MAX_ID_DOCMASK_LINE+1 ... MAX_ID_VALUE_ARRAY</td><td>ObjKeys for Special purposes, e.g. ID_FILE_NAME</td></tr>
   * </table>
   * </p><p>
   * <table border="2">
   * <tr><td>Symbol</td><td>Value</td></tr>
   * <tr><td>MAX_ID_DOCMASK_LINE</td><td>49</td></tr>
   * <tr><td>MAX_ID_VALUE_ARRAY</td><td>59</td></tr>
   * </table>
   * </p>
   */
  // this.MAX_ID_DOCMASK_LINE;

  /**
   * This constant defines a limit for ObjKey.id values.
   */
  // this.MAX_ID_VALUE_ARRAY;

  // this.MIN_ID_HIDDEN_VALUE;

  // this.MAX_ID_HIDDEN_VALUE;

  // this.mbAclItems;

  // this.mbHidden;

  // this.mbNextTab;

  // this.mbOnlyBuzzwords;

  // this.mbPostfixAsterix;

  // this.mbPrefixAsterix;

  // this.mbReadOnly;

  // this.mbTabOrder;

  // this.mbTranslate;

  // this.mbImportant;

  // this.mbVersion;

 };

// ---------------- API class FindByRegisteredFunction --------------------

de.elo.ix.client.FindByRegisteredFunction = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.FindByRegisteredFunction';

  // this.functionName;

  // this.args;

 };

// ---------------- API class ValuesOfObjKey --------------------

/**
 * Objects of this class contain the returned data from IXServicePortIF.getDistinctValuesOfObjKey.
 * @since 7.00.020.004
 */
de.elo.ix.client.ValuesOfObjKey = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ValuesOfObjKey';

  /**
   * ObjKey values.
   */
  // this.values;

  /**
   * For each entry values[i] the corresponding usageCount[i]
   * tells how often the value is used.
   */
  // this.usageCounts;

  /**
   * The sum of all usageCounts.
   */
  // this.totalCount;

 };

// ---------------- API class NoteFreehandC --------------------

/**
 * Constants for NoteFreehand
 * @see NoteFreehand
 * @since 7.00.000.025
 */
de.elo.ix.client.NoteFreehandC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.NoteFreehandC';

  /**
   * Maximum number of points in NoteFreehand.
   */
  // this.MAX_POINTS;

 };

// ---------------- API class ServerInfo --------------------

/**
 * <p>License key, version and list of other IndexServers</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Organisation: ELO Digital Office GmbH </p>
 * @author imw
 */
de.elo.ix.client.ServerInfo = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ServerInfo';

  /**
   * List of other Index Servers. Read only.
   */
  // this.indexServers;

  /**
   * License key for the Index Server. Read only.
   */
  // this.license;

  /**
   * The version of the Index Server. Read only.
   */
  // this.version;

  /**
   * This value defines the server ID which is checked
   * when a workflow is forwared.
   */
  // this.replProcessOnServerId;

  /**
   * Database engine name.
   * E. g. MSSQL, ORACLE, DB2
   * If connected to DB2, the character set UTF-8 is assumed for
   * database columns that store Strings. In this case the length members
   * of the constant classes (e.g. SordC.lnName resp. CONST.SORD.lnName)
   * contain the column widths in bytes rather than characters. Use
   * the IXConnection.truncate function to truncate a String value to
   * fit the corresponding database column.
   */
  // this.databaseEngine;

  /**
   * Indexserver name.
   * This is the name configured in config.xml or web.xml as "ixid".
   */
  // this.instanceName;

 };

// ---------------- API class PhysDelDocs --------------------

/**
 * Internal class.
 */
de.elo.ix.client.PhysDelDocs = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.PhysDelDocs';

  /**
   * DB column: objid
   */
  // this.objId;

 };

// ---------------- API class DocMaskDataC --------------------

/**
 * <p>Bit constants for members of DocMask</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 * @see DocMask
 */
de.elo.ix.client.DocMaskDataC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.DocMaskDataC';

  /**
   * DB column: maskno
   */
  // this.mbId;

  /**
   * DB column: maskname
   */
  // this.mbName;

  /**
   * DB column: maskname
   */
  // this.lnName;

  /**
   * DB column: maskindex
   */
  // this.mbIndex;

  /**
   * DB column: maskindex
   */
  // this.lnIndex;

  /**
   * DB column: maskbarcode
   */
  // this.mbBarcode;

  /**
   * DB column: maskbarcode
   */
  // this.lnBarcode;

  /**
   * DB column: maskkey
   */
  // this.mbKey;

  /**
   * DB column: maskdpath
   */
  // this.mbDPath;

  /**
   * DB column: maskdkind
   */
  // this.mbDKind;

  /**
   * DB column: maskdkey
   */
  // this.mbDKey;

  /**
   * DB column: masklock
   */
  // this.mbLockId;

  /**
   * DB column: maskflags
   */
  // this.mbFlags;

  /**
   * DB column: maskflowid
   */
  // this.mbFlowId;

  /**
   * DB column: maskdacl
   */
  // this.mbDAcl;

  /**
   * DB column: maskdacl
   */
  // this.lnDAcl;

  /**
   * DB column: lifetime
   */
  // this.mbLifetime;

  /**
   * DB column: lifetime
   */
  // this.lnLifetime;

  /**
   * DB column: masktext
   */
  // this.mbText;

  /**
   * DB column: masktext
   */
  // this.lnText;

  /**
   * DB column: masktstamp
   */
  // this.mbTStamp;

  /**
   * DB column: masktstamp
   */
  // this.lnTStamp;

  /**
   * DB column: maskposinfo
   */
  // this.mbRawPosInfo;

  /**
   * DB column: maskposinfo
   */
  // this.lnRawPosInfo;

  /**
   * Member bit: GUID
   * DB column: maskguid
   */
  // this.mbGuid;

  /**
   * Column length: GUID
   * DB column: maskguid
   */
  // this.lnGuid;

  /**
   * Member bit: Deleted status.
   * DB column: maskstatus
   */
  // this.mbStatus;

  /**
   * Member bit: Internal acl.
   * DB column: maskacl
   */
  // this.mbInternalAcl;

  /**
   * Column length: Internal acl.
   * DB column: maskacl
   */
  // this.lnInternalAcl;

  /**
   * Member bit: The ID of a workflow that is to be started if a new version of an associated
   * document is checked in.
   * If the SessionOption START_DOCMASK_WORKFLOWS is set, the IndexServer
   * starts this workflow, if an associated document is checked in. Otherwise the
   * client application is responsible for starting the workflow.
   * DB column: maskflowid2
   */
  // this.mbFlowId2;

  /**
   * All valid member bits.
   */
  // this.mbAllMembers;

 };

// ---------------- API class EditInfoZ --------------------

/**
 * This class encapsulates the constants of the EditInfoC class.
 * EditInfo also returns a Sord object and a SordZ member is included
 * to control the Sord data returned.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.EditInfoZ = function() { 
  var bitset = new de.elo.ix.client.LongBitset("de.elo.ix.client.EditInfoZ", arguments);
  bitset.sordZ = new de.elo.ix.client.SordZ();
  return bitset;
 };

// ---------------- API class FindTranslateTermInfo --------------------

/**
 * This class is used to find translations of terms.
 * @since 7.00.000.000
 * @see IXServicePortIF#findFirstTranslateTerms findFirstTranslateTerms
 */
de.elo.ix.client.FindTranslateTermInfo = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.FindTranslateTermInfo';

  /**
   * Terms for which translations should be selected.
   * Set this element to <code>null</code> or empty, if all terms should be returned.
   * The given terms have to be in the language specified in <code>langs[0]</code> object.
   * If <code>langs</code> is <code>null</code> or empty, the terms are assumed to
   * be in the system language.
   */
  // this.terms;

  /**
   * Return the terms specified by element <code>terms</code>
   * for wich translations exist in this languages.
   * If a term is not found in one of the languages, an empty string is
   * returned.
   * The languages must be given in ISO 639 2-letter codes, e.g. "en" for English.
   * The language at the first index specifies the language of the <code>terms</code>.
   * This element is corresponding to <code>TranslateTerm.termLangs</code>:
   * <code>termLangs[i]</code> is in language <code>langs[i]</code>
   * If this element is <code>null</code>, terms in all available languages are returned.
   */
  // this.langs;

  /**
   * Reserved - Find deleted terms too (currently not implemented).
   */
  // this.inclDeleted;

  /**
   * Return those terms too, that should be translated into other languages:
   * e.g. Keywording form names (DocMask.name), index value lables (DocMaskLine.name)
   * and Keywords.
   */
  // this.inclToBeTranslated;

 };

// ---------------- API class ActivityC --------------------

/**
 * Constants for class Activity.
 */
de.elo.ix.client.ActivityC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ActivityC';

  /**
   * Typesafe element selector for members Activity.guid.
   * Contains ActivityC.mbGuid
   */
  // this.mbOnlyGuid;

  /**
   * Typesafe element selector for members Activity.guid and Activity.objGuid.
   * Contains ActivityC.mbGuid | ActivityC.mbObjGuid
   */
  // this.mbActivityAndObjectGuid;

  /**
   * Typesafe element selector for all members.
   * Contains ActivityC.mbAllMembers
   */
  // this.mbAll;

 };

// ---------------- API class SubsInfo --------------------

/**
 * This class contains information about a user that is beeing deputized
 * by another user.
 * @author imw
 */
de.elo.ix.client.SubsInfo = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.SubsInfo';

  /**
   * The deputy relationship is applied if this member is true. If false,
   * the deputy does not currently act as the user but may activate the
   * relationship by themself.
   */
  // this.active;

  /**
   * The deputy inherits the rights of the user if this member is true.
   */
  // this.inheritRights;

  /**
   * Deputy: the user that deputizes <code>userId</code>.
   */
  // this.subsId;

  /**
   * Deputy name. If this member is set <code>subsId</code> is ignored.
   */
  // this.subsName;

  /**
   * The user that is being deputized by <code>subsId</code>
   */
  // this.userId;

  /**
   * User name. If this member is set <code>userId</code> is ignored.
   */
  // this.userName;

 };

// ---------------- API class IdName --------------------

/**
 * <p>Contains an numeric ID value, a GUID value in string format and a name.</p>
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.IdName = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.IdName';

  /**
   * GUID.
   */
  // this.guid;

  /**
   * Numeric ID.
   */
  // this.id;

  /**
   * Name.
   */
  // this.name;

 };

// ---------------- API class UserTask --------------------

/**
 * Describes the tasks assigned to a user.
 * ix.findFirstTasks returns the tasks for a user in the form of UserTask objects.
 * Either activity, reminder or workflow is set depending upon whether the task
 * is an activity, reminder or workflow task.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.UserTask = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.UserTask';

  /**
   * Task is an activity.
   */
  // this.activity;

  /**
   * Task is a reminder item.
   */
  // this.reminder;

  /**
   * Task is a workflow task.
   */
  // this.wfNode;

 };

// ---------------- API class EventFilter --------------------

/**
 * This class describes an event filter.
 * @see EventListener
 */
de.elo.ix.client.EventFilter = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.EventFilter';

  /**
   * Event bus ID
   */
  // this.busId;

  /**
   * Event type.
   * This must be one of the predefined event types or an application defined type with a larger value than EventBusC.EVENT_TYPE_MAX_SYSTEM.
   */
  // this.type;

  /**
   * First event param.
   * Optional. Depends on event type.
   */
  // this.param1;

  /**
   * Second event param.
   * Optional. Depends on event type.
   */
  // this.param2;

 };

// ---------------- API class LockC --------------------

/**
 * <p>Constants to lock data against concurrent modification.</p>
 * @author imw
 */
de.elo.ix.client.LockC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.LockC';

  // this.bsetNO;

  // this.bsetYES;

  // this.bsetFORCE;

  // this.bsetIF_FREE;

  /**
   * Do not lock the requested record(s).
   */
  // this.NO;

  /**
   * Lock or unlock. The lock is set, if the record is unlocked or
   * locked by the current user.
   */
  // this.YES;

  /**
   * Lock or unlock regardless of whether the data is locked by another user.
   * This requires main adminstration privilleges in most cases.
   */
  // this.FORCE;

  /**
   * A lock is only set, if the record is unlocked.
   * A lock request is refused too, if the record is already a lock by the
   * current user.
   */
  // this.IF_FREE;

 };

// ---------------- API class FulltextConfig --------------------

/**
 * This class provides information about the configuration of the fulltext database.
 * @since 7.00.040.023
 */
de.elo.ix.client.FulltextConfig = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.FulltextConfig';

  /**
   * One of the FulltextConfigC.SOURCE_* constants.
   */
  // this.source;

  /**
   * A combination of FulltextConfigC.FLAG_* constants.
   */
  // this.flags;

  /**
   * URL of the Knowlege Map service.
   * Only valid for iSearch.
   */
  // this.knowlegeMapUrl;

 };

// ---------------- API class UserProfileDataC --------------------

/**
 * <p>Bit constants for members of UserProfileData</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 * @see UserProfileData
 */
de.elo.ix.client.UserProfileDataC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.UserProfileDataC';

  /**
   * DB column: userid
   */
  // this.mbUser;

  /**
   * DB column: optkey
   */
  // this.mbKey;

  /**
   * DB column: optkey
   */
  // this.lnKey;

  /**
   * DB column: optvalue
   */
  // this.mbValue;

  /**
   * DB column: optvalue
   */
  // this.lnValue;

  /**
   * All valid member bits.
   */
  // this.mbAllMembers;

 };

// ---------------- API class CopyInfo --------------------

/**
 * Controls the options of de.elo.ix.IXServicePortIF.copySord().
 * <p>
 * Copyright: Copyright (c) 2004
 * </p>
 * <p>
 * Organisation: ELO Digital Office GmbH
 * </p>
 * @see IXServicePortIF#copySord IXServicePortIF.copySord(...)
 */
de.elo.ix.client.CopyInfo = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.CopyInfo';

  /**
   * Depth up to which the structure is to be copied. THIS FUNCTION IS NOT CURRENTLY SUPPORTED!
   */
  // this.depth;

  /**
   * Manually determine the position. Use 0 to insert at the beginning of the child list. Use -1 to
   * insert at the end of the child list ( this is the fastest mode). A value n greater then 0
   * inserts the object at the position n.
   */
  // this.manSortIdx;

  /**
   * COPY-Mode: Name of the destination archive entry. THIS FUNCTION IS NOT CURRENTLY SUPPORTED!
   */
  // this.name;

  /**
   * The permissions of the moved object are modified. The permissions inherited from the old parent
   * are substracted and the permissions of the new parent are added to the object.
   */
  // this.adjustAclDifference;

  /**
   * Set the permissions of the moved object equal to the permissions of the new parent.
   */
  // this.adjustAclOverwrite;

  /**
   * Recursivly adjust the permissions of the sub-folders of the moved object too.
   */
  // this.adjustAclIgnoreFolders;

  /**
   * Recursivly adjust the permissions of the child-documents of the moved object too.
   */
  // this.adjustAclIgnoreDocuments;

  /**
   * Recursivly adjust the permissions of the child-elements in the background.
   */
  // this.adjustAclInBackground;

 };

// ---------------- API class ReplSet --------------------

/**
 * <p>Objects of this class store the replication information of archive entries.</p>
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 */
de.elo.ix.client.ReplSet = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ReplSet';

  /**
   * Bitset of replication IDs.
   */
  // this.dw;

  /**
   * This replication information belongs to the archive entry with ID <code>objId</code>
   */
  // this.objId;

 };

// ---------------- API class FindChildren --------------------

/**
 * This class controls the search for child objects of an archive entry.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.FindChildren = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.FindChildren';

  /**
   * Include only main parent relations.
   */
  // this.mainParent;

  /**
   * Search child objects of the parent entry with this object ID or GUID.
   */
  // this.parentId;

  /**
   * Search child objects up to this level below parentId.
   * A value of 0 or 1 means, that only the sub entries
   * directly under the parent are included.
   * Set this value to -1, to search over all levels. In this
   * case the level is internally constrained to 32 to avoid
   * an endless loop, if the tree under the parent contains
   * recursive references.
   */
  // this.endLevel;

 };

// ---------------- API class WFEditNode --------------------

/**
 * Data required for processing a workflow person node.
 */
de.elo.ix.client.WFEditNode = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.WFEditNode';

  /**
   * Workflow identifier
   */
  // this.flowId;

  /**
   * The node to be processed
   */
  // this.node;

  /**
   * Node identifier
   */
  // this.nodeId;

  /**
   * Choice of following nodes. Array of ELOWorkFlowNode objects.
   */
  // this.succNodes;

 };

// ---------------- API class KeywordC --------------------

de.elo.ix.client.KeywordC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.KeywordC';

  /**
   * Root ID of standard keyword list.
   */
  // this.KWID_STANDARD_LIST;

  /**
   * Root ID of keyword list used for version numbers.
   */
  // this.KWID_VERSION;

  /**
   * Root ID of keyword list used for version comments.
   */
  // this.KWID_VERSION_COMMENT;

  /**
   * Root ID of keyword list used for workflows.
   */
  // this.KWID_WORKFLOW;

  /**
   * Root ID of user keyword list.
   */
  // this.KWID_USER_LIST;

  /**
   * Placeholder for current date.
   * The format depends on the date format <code>UserProfileC.SORD_DATE_FORMAT</code>
   * specified in the user or standard profile.
   */
  // this.PLACEHOLDER_DATE;

  /**
   * Placeholder for year (4 digits).
   */
  // this.PLACEHOLDER_YEAR;

  /**
   * Placeholder for month (2 digits).
   */
  // this.PLACEHOLDER_MONTH;

  /**
   * Placeholder for day of month (2 digits).
   */
  // this.PLACEHOLDER_DAY;

  /**
   * Placeholder for current user name.
   */
  // this.PLACEHOLDER_USER_NAME;

  /**
   * Placeholder for the value of the specified counter name.
   * The counter name follows the place holder and is suffixed with an extra "%".
   * E. g. <code>text=PLACEHOLDER_COUNTER_BEGIN + "myRecordCounter" + PLACEHOLDER_COUNTER_END + ". record"</code> is expanded to
   * <code>text="17. record"</code> assuming myRecordCounter has value 17.
   */
  // this.PLACEHOLDER_COUNTER_BEGIN;

  /**
   * End of placeholder for counter name.
   */
  // this.PLACEHOLDER_COUNTER_END;

  /**
   * Return raw text in <code>checkoutKeywords</code>. Placeholders are not substituted.
   */
  // this.mbRawText;

  /**
   * Return raw text in <code>checkoutKeywords</code>.
   * Placeholders except counters are substituted.
   */
  // this.mbPreCookedText;

  /**
   * The purpose of this constant object is to control the behavior of
   * <code>checkoutKeywords</code>. Supplying it, <code>checkoutKeywords</code>
   * will return the raw text (including placeholders) in the returned Keyword
   * objects. Use this constant, if you want to read keywords into an editor.
   */
  // this.mbEdit;

  /**
   * The purpose of this constant object is to control the behavior of
   * <code>checkoutKeywords</code>. Supplying it, <code>checkoutKeywords</code>
   * will return substituted placeholders in the text members of the returned
   * Keyword objects. Use this constant, if you want to read keywords into a
   * dialog that lets the user select one of it.
   */
  // this.mbView;

  /**
   * The maximum number of children per keyword. This value is valid for all
   * keyword lists except the user keyword list (<code>KWID_USER_LIST</code>).
   * The user keyword list might contain more children below a keyword node.
   */
  // this.MAX_CHILDREN;

  /**
   * Maximum depth of a keyword tree. This value is valid for all
   * keyword lists except the user keyword list (<code>KWID_USER_LIST</code>).
   * The user keyword list might contain a deeper tree.
   */
  // this.MAX_TREE_DEPTH;

  /**
   * Maximum length of a root keyword ID. If a new keyword list is checked in,
   * the ID of the root keyword must not exceed this length.
   */
  // this.lnRootId;

  /**
   * Maximum length of keyword ID.
   */
  // this.lnId;

  /**
   * Maximum length of keyword text.
   */
  // this.lnText;

 };

// ---------------- API class SordLink --------------------

/**
 * This class represents a link to an archive entry.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.SordLink = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.SordLink';

  /**
   * Numerical ID of referenced Sord.
   */
  // this.id;

  /**
   * Link ID.
   */
  // this.linkId;

 };

// ---------------- API class DocMaskZ --------------------

/**
 * This class encapsulates the constants of the DocMaskC class.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.DocMaskZ = function() { 
  return new de.elo.ix.client.LongBitset("de.elo.ix.client.DocMaskZ", arguments);
 };

// ---------------- API class MapDomainDataC --------------------

/**
 * <p>Bit constants for members of MapDomain</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 * @see MapDomain
 */
de.elo.ix.client.MapDomainDataC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.MapDomainDataC';

  /**
   * DB column: mapdflags
   */
  // this.mbFlags;

  /**
   * DB column: mapdname
   */
  // this.mbName;

  /**
   * DB column: mapdname
   */
  // this.lnName;

  /**
   * All valid member bits.
   */
  // this.mbAllMembers;

 };

// ---------------- API class FindDirect --------------------

/**
 * Search query for locating text in the archive.
 */
de.elo.ix.client.FindDirect = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.FindDirect';

  /**
   * Search query.
   */
  // this.query;

  // this.searchInSordName;

  // this.searchInMemo;

  // this.searchInIndex;

  // this.searchInFulltext;

  // this.searchInNotes;

  // this.searchInVersions;

 };

// ---------------- API class FindByIndex --------------------

/**
 * Finds an object according to the object's index properties.
 * The search terms are concatinated by the operator specified with
 * FindOptions.searchMode. If FindOptionsC.OPERATOR_OR is the specified
 * searchMode the members of this class are concatinated in the search string
 * with the boolean operator "OR". Any other searchMode concatinates with "AND".
 * 
 * Exception: userId and maskId are always used as "AND" terms.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @see IXServicePortIF#findFirstSords IXServicePortIF.findFirstSords(...)
 * @see FindInfo FindInfo
 */
de.elo.ix.client.FindByIndex = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.FindByIndex';

  /**
   * Find objects with this delete date. It is a single date value or a
   * date range in ISO format. If delete date is to be ignored this value
   * must be set to null.
   */
  // this.delDateIso;

  /**
   * Find objects with this term included in the description of the object
   * (case insensitive). This value can be a list of terms separated by blanks.
   * The terms are concatinated with the operator specified by
   * FindOptions.searchMode. The wildcard * is allowed, it matches any number
   * of characters. If desc is to be ignored this value must be set to null.
   */
  // this.desc;

  /**
   * Find objects with this internal date. It is a single date value or a
   * date range in ISO format. If internal date is to be ignored this value
   * must be set to null.
   */
  // this.iDateIso;

  /**
   * Find objects related to this mask ID or name. If the mask relation
   * is to be ignored this value must be set to null.
   */
  // this.maskId;

  /**
   * Find objects with this term(s) included in the name of the object
   * (case insensitive). This value can be a list of terms separated with
   * blanks. They are concatinated with the operator specified by
   * FindOptions.searchMode. The wildcard * is allowed, it matches any number
   * of characters. If name is to be ignored this value must be set to null.
   */
  // this.name;

  /**
   * If this option is false, all objects are found that contain the
   * term specified in <code>name</code> anywhere in their short description
   * (Sord.name). In other words: a search by <code>*name*</code> is executed.
   * Set this option true, if wildcards should not added implicitly to the
   * search term.
   */
  // this.exactName;

  /**
   * Find objects with this indexing attributes. The values of the attributes
   * can contain a value range. The wildcard * is allowed in ObjKey.name and
   * ObjKey.data[], it matches any number of characters. If objKeys is to be
   * ignored this value must be set to null. The ObjKey.id is ignored, if
   * ObjKey.name is not empty or ObjKey.id &eq; 0. Searching over ObjKey.id
   * can only handle one element in ObjKey.data.
   */
  // this.objKeys;

  /**
   * Find objects owned by the user with this user ID or name. If the owner
   * is to be ignored this value must be set to null.
   */
  // this.ownerId;

  /**
   * Find objects with this external date. It is a single date value or a
   * date range in ISO format. If external date is to be ignored this value
   * must be set to null.
   */
  // this.xDateIso;

  /**
   * Constrain results to objects with this access control list.
   */
  // this.acl;

  /**
   * Storage path ID or name
   */
  // this.pathId;

 };

// ---------------- API class EloFtOpt --------------------

/**
 * Internal class.
 */
de.elo.ix.client.EloFtOpt = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.EloFtOpt';

  /**
   * DB column: optid
   */
  // this.id;

  /**
   * DB column: optval
   */
  // this.value;

  /**
   * DB column: remark
   */
  // this.remark;

 };

// ---------------- API class SearchModeZ --------------------

/**
 * <p>This class encapsulates the constants of <code>SearchModeC</code></p>
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 * @see SearchModeC SearchModeC
 */
de.elo.ix.client.SearchModeZ = function() { 
  return new de.elo.ix.client.LongBitset("de.elo.ix.client.SearchModeZ", arguments);
 };

// ---------------- API class FindConfigFileInfo --------------------

/**
 * This class describes the files to select from a postbox directory or
 * from a configuration directory.
 * @see IXServicePortIF#findFirstConfigFiles(ClientInfo, FindConfigFileInfo, int, ConfigFileZ)
 */
de.elo.ix.client.FindConfigFileInfo = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.FindConfigFileInfo';

  /**
   * Find files with this names or in this directory.
   * To specify a directory, put the directory name into names[.] and append "/*".
   * If this member is set, <code>inclDeputy</code> and <code>postboxUserId</code> is ignored.
   */
  // this.names;

  /**
   * Find files in the in-tray folder of all deputized users.
   * This member is ignored, if <code>names</code> is set.
   */
  // this.inclDeputy;

  /**
   * Find files in the in-tray of the user specified by ID or name.
   * This member is ignored, if <code>names</code> is set.
   * If neither <code>names</code> nor <code>postboxUserId</code> is set, the
   * in-tray of the current user is listed.
   */
  // this.postboxUserId;

 };

// ---------------- API class WFVersion --------------------

/**
 * Version information for a workflow template.
 * @author Imig
 * @since 7.00.000.008
 */
de.elo.ix.client.WFVersion = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.WFVersion';

  /**
   * Version ID.
   * Set this member -1, to check in a new workflow template version.
   * A value of 0 indicates the current working version.
   */
  // this.id;

  /**
   * Version comment.
   */
  // this.comment;

  /**
   * ID of the user who created the version.
   */
  // this.userId;

  /**
   * Name of the user who created the version.
   */
  // this.userName;

  /**
   * Version number.
   */
  // this.version;

  /**
   * Create date in ISO format.
   */
  // this.createDateIso;

 };

// ---------------- API class KeywordZ --------------------

/**
 * This class encapsulates the constants of KeywordC.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.KeywordZ = function() { 
  return new de.elo.ix.client.LongBitset("de.elo.ix.client.KeywordZ", arguments);
 };

// ---------------- API class PhysDelC --------------------

/**
 * Constants for the PhysDel.type member.
 */
de.elo.ix.client.PhysDelC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.PhysDelC';

  /**
   * Unknown object type deleted.
   */
  // this.ERROR;

  /**
   * User deleted.
   */
  // this.USER;

  /**
   * Keywording form deleted.
   */
  // this.MASK;

  /**
   * Color deleted.
   */
  // this.COLOR;

  /**
   * Keyword list deleted.
   */
  // this.KEYWORDLIST;

  /**
   * Folder or document deleted.
   */
  // this.SORD;

  /**
   * Relation deleted.
   */
  // this.RELATION;

  /**
   * Document version or attachment deleted.
   */
  // this.VERSION;

  /**
   * Note or annotation deleted.
   */
  // this.NOTE;

  /**
   * Activity deleted.
   */
  // this.ACTIVITY;

  /**
   * Workflow deleted.
   */
  // this.WORKFLOW;

  /**
   * Map deleted.
   */
  // this.MAP;

 };

// ---------------- API class Note --------------------

/**
 * <p>This helper class inherits all members from <code>NoteData</code> and
 * adds a static member to access the bit constants for the <code>NoteData</code>
 * members.</p>
 */
de.elo.ix.client.Note = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.Note';

  /**
   * Timestamp of the last change to the note.
   * The format is JJJJ.MM.DD.hh.mm.ss
   */
  // this.TStamp;

  /**
   * The position in the x axis when the note is displayed on a document in ELO.
   * Taken from the top left corner of the document.
   * <p>
   * For NoteC.TYPE_ANNOTATION_FREEHAND and NoteC.TYPE_ANNOTATION_HORIZONTAL_LINE
   * the values XPos, YPos, Width, Height describe the enveloping rectangle
   * of the line including the line width. This values are computed by the IndexServer
   * if the note is stored.
   * </p>
   */
  // this.XPos;

  /**
   * The position in the Y axis when the note is displayed on a document in ELO.
   * Taken from the top left corner of the document.
   */
  // this.YPos;

  /**
   * The text for the note.
   */
  // this.desc;

  /**
   * The GUID for the note.
   */
  // this.guid;

  /**
   * The height of the note (y axis), when displayed on a document in ELO.
   */
  // this.height;

  /**
   * The unique id for the note.
   */
  // this.id;

  /**
   * The ID of the user who created the note.
   * Administrators can set the ownerId to an arbitary user ID in checkinNotes.
   * Set ownerName=&quot;&quot; in this case.
   */
  // this.ownerId;

  /**
   * RESERVED
   */
  // this.pageNo;

  /**
   * The note type.
   */
  // this.type;

  /**
   * Width ( x axis) of the note when displayed on a document in ELO.
   */
  // this.width;

  /**
   * ISO encoded external (user defined) date.
   */
  // this.createDateIso;

  /**
   * True if the note is deleted, otherwise false.
   */
  // this.deleted;

  /**
   * The ID of the user that holds the lock or -1, if the note is not locked.
   */
  // this.lockId;

  /**
   * The user name that holds the lock or an empty string if the note is not locked.
   */
  // this.lockName;

  /**
   * Object ID of the associated Sord object or any of the  ID specifiers that
   * are valid for checkoutSord too.
   * Functions createNote and checkoutNotes return only numerical object IDs.
   */
  // this.objId;

  /**
   * The name of the user that has created the note.
   * Administrators can set the ownerName to an arbitary user name in checkinNotes.
   * Set ownerId=-1 in this case.
   */
  // this.ownerName;

  /**
   * Access control list. Only used for notes of type TYPE_ANNOTATION_MARKER.
   * Set member aclItems=null on check in otherwise it is ignored.
   */
  // this.acl;

  /**
   * Access control list as item array. Only used for notes of type TYPE_ANNOTATION_MARKER.
   * If this member is not null, member acl is ignored on check in.
   */
  // this.aclItems;

  /**
   * RGB value.
   * Undefined for notes of type TYPE_ANNOTATION_STAMP and TYPE_ANNOTATION_NOTE_WITHFONT.
   */
  // this.color;

  /**
   * Additional information for textual stamps.
   * Valid only for notes of type
   * TYPE_ANNOTATION_NOTE, TYPE_ANNOTATION_STAMP and TYPE_ANNOTATION_NOTE_WITHFONT.
   * Either desc, noteText, noteImage or noteFreehand can be set.
   */
  // this.noteText;

  /**
   * Additional information for image stamps.
   * Valid only for notes of type TYPE_ANNOTATION_STAMP.
   * Either desc, noteText, noteImage or noteFreehand can be set.
   */
  // this.noteImage;

  /**
   * Point information for a freehand line.
   * Valid only for notes of type TYPE_ANNOTATION_FREEHAND and TYPE_ANNOTATION_HORIZONTAL_LINE.
   * Either desc, noteText, noteImage or noteFreehand can be set.
   */
  // this.noteFreehand;

  /**
   * Access rights for the current user.
   * Read-only.
   */
  // this.access;

 };

// ---------------- API class NoteC --------------------

/**
 * <p>Constants for notes.</p>
 */
de.elo.ix.client.NoteC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.NoteC';

  /**
   * Member objId.
   */
  // this.mbObjId;

  /**
   * Member lockId
   */
  // this.mbLockId;

  /**
   * Member noteText
   */
  // this.mbNoteText;

  /**
   * Member noteImage
   */
  // this.mbNoteImage;

  /**
   * Member noteFreehand
   */
  // this.mbNoteFreehand;

  /**
   * All members.
   */
  // this.mbAll;

  /**
   * All members but without note text.
   */
  // this.mbNoDesc;

  /**
   * Only remove or set lock.
   */
  // this.mbOnlyLock;

  // this.mbDeleted;

  // this.mbAclItems;

  // this.mbCreateDateIso;

  /**
   * Note type: highlighting rectange (filled) on the document.
   * <p>If the note is assigned the colour 0xC0C0C0 the note will be interpreted by ELODM. In this case
   * a black rectangle will painted on the document, using the note coordinates supplied,
   * if the note ACL does not contain sufficient read access rights for the current user.
   * This allows document contact to be blacked out for certain users
   * The document must be a graphic based document, eg. tiff, bmp etc.</p>
   */
  // this.TYPE_ANNOTATION_MARKER;

  /**
   * Use TYPE_ANNOTATION_MARKER
   */
  // this.TYPE_ANOTEW_MARKER;

  /**
   * Note type: annotation text
   */
  // this.TYPE_ANNOTATION_NOTE;

  /**
   * Use TYPE_ANNOTATION_NOTE
   */
  // this.TYPE_ANOTEWG_NOTE;

  /**
   * Note type: freehand line.
   */
  // this.TYPE_ANNOTATION_FREEHAND;

  /**
   * Note type: reserved
   */
  // this.TYPE_ANNOTATION_RECTANGLE;

  /**
   * Note type: draws a filled coloured box on the document, over the existing document.
   */
  // this.TYPE_ANNOTATION_FILLEDRECTANGLE;

  /**
   * Note type: draws a hollow rectangle (frame) on a document.
   */
  // this.TYPE_ANNOTATION_HOLLOWRECTANGLE;

  /**
   * Note type: reserved
   */
  // this.TYPE_ANNOTATION_LINE;

  /**
   * Annotation with text but without a rectangle.
   * <p>The font size in the client application has to be computed by FontInfo.height * 3.7 * resolution_in_dpi/100 </p>
   */
  // this.TYPE_ANNOTATION_TEXT;

  /**
   * Note type: reserved
   */
  // this.TYPE_ANNOTATION_FILETEXT;

  /**
   * Adds a stamp, such as a received date for example, to a document.
   * <p>The font size in the client application has to be computed by FontInfo.height * 3.7 * resolution_in_dpi/100 </p>
   */
  // this.TYPE_ANNOTATION_STAMP;

  /**
   * Draws a filled rectangular box on a document and displays text in the box.
   */
  // this.TYPE_ANNOTATION_NOTE_WITHFONT;

  /**
   * Note type: horizontal line.
   */
  // this.TYPE_ANNOTATION_HORIZONTAL_LINE;

  /**
   * Note type: strike out text
   */
  // this.TYPE_ANNOTATION_STRIKEOUT;

  /**
   * Note type: adds a stamp, such as a received date for example, to a document.
   * <p>The font size in the client application has to be computed by FontInfo.height * 2.2 * resolution_in_dpi/100 </p>
   */
  // this.TYPE_ANNOTATION_STAMP_NEW;

  /**
   * Note type: needed in FindByNotes to indicate typeless filtering
   */
  // this.TYPE_NONE;

  /**
   * Note type: standard yellow note
   */
  // this.TYPE_NORMAL;

  /**
   * Note type: standard green note
   */
  // this.TYPE_PERSONAL;

  /**
   * Note type: standard red note
   */
  // this.TYPE_STAMP;

  /**
   * This color is used for notes of type TYPE_ANNOTATION_MARKER
   * to specify a black rectangle that is painted on the document
   * by Document Manager.
   */
  // this.COLOR_ANNOTATION_MARKER_DM;

 };

// ---------------- API class SearchModeC --------------------

/**
 * <p>This class defines options used in <code>FindOptions.searchMode</code>.</p>
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author unbekannt
 * @see FindOptions FindOptions
 * @see FindByIndex FindByIndex
 */
de.elo.ix.client.SearchModeC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.SearchModeC';

  // this.bsetAND;

  // this.bsetOR;

  // this.bsetONE_TERM;

  // this.bsetEXPRESSION;

  /**
   * The search terms are concatinated with the boolean AND operator.
   */
  // this.AND;

  /**
   * The search terms are concatinated with the boolean OR operator.
   */
  // this.OR;

  /**
   * A blank separated list in <code>FindByIndex.name</code> or <code>FindByIndex.desc</code>
   * is used as a single term.
   */
  // this.ONE_TERM;

  /**
   * The value of <code>FindByIndex.name</code> or <code>FindByIndex.desc</code>
   * contains the operators "AND" (&amp;), "OR" (|), "NOT" (!) for concatination.
   */
  // this.EXPRESSION;

 };

// ---------------- API class JobState --------------------

/**
 * Objects of this class provide information on the state of any background processes.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.JobState = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.JobState';

  /**
   * Error status information.
   */
  // this.countErrors;

  /**
   * Estimated maximum amount.
   */
  // this.countEstimatedMax;

  /**
   * Progress status information.
   */
  // this.countProcessed;

  /**
   * When the information expires (milliseconds): (jobEnd + expires &lt; current-date).
   */
  // this.expires;

  /**
   * End or termination of the job.
   */
  // this.jobEnd;

  /**
   * Job identifier.
   */
  // this.jobGuid;

  /**
   * Thread name.
   */
  // this.jobName;

  /**
   * Set to true while the job is being executed.
   */
  // this.jobRunning;

  /**
   * Start of job.
   */
  // this.jobStart;

  /**
   * Status information for GUIDs.
   */
  // this.lastGuid;

  /**
   * Status information for integer IDs.
   */
  // this.lastID;

  /**
   * The standard process-by-SORD job list.
   */
  // this.procInfo;

  /**
   * Result of the count process.
   */
  // this.countResult;

  /**
   * Job-defined message string.
   */
  // this.strMsg;

 };

// ---------------- API class ActivityOption --------------------

/**
 * This class represents an option for an activity project.
 * @see ActivityProject
 * @since 8.00.012.001
 */
de.elo.ix.client.ActivityOption = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ActivityOption';

  /**
   * Option ID.
   * This value can be one of the predefined option IDs in ActivityOptionC.
   * Or you can use an application defined value greater or equal to ActivityOptionC.ID_VALUE.
   */
  // this.id;

  /**
   * Activity option name.
   * The name must not contain one of this characters: ! $ - + *
   */
  // this.name;

  /**
   * The value can only be selected from the associated keyword list.
   * This option has to be checked by the client application. It is not checked by Indexserver.
   */
  // this.onlyKeyword;

  /**
   * The value can not be edited in the user interface.
   * This option has to be checked by the client application. It is not checked by Indexserver.
   */
  // this.readOnly;

  /**
   * The value has to be displayed in an appropriate order.
   * This option has to be checked by the client application. It is not checked by Indexserver.
   */
  // this.sorted;

  /**
   * This option is a stamp field.
   * This option has to be checked by the client application. It is not checked by Indexserver.
   */
  // this.stamp;

  /**
   * A value must be defined for this option.
   * This option has to be checked by the client application. It is not checked by Indexserver.
   */
  // this.mandatory;

  /**
   * Keywords.
   * This array defines the values that can or must be used to set the option.
   * If no keywords are defined, this member is null or an empty array.
   */
  // this.keywords;

 };

// ---------------- API class WFTimeLimit --------------------

/**
 * This class describes a time limit for a workflow or for a person node of a workflow.
 * @author Imig
 * @since 7.00.000.016
 */
de.elo.ix.client.WFTimeLimit = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.WFTimeLimit';

  /**
   * Time-limit in minutes.
   */
  // this.timeLimit;

  /**
   * The ID of the user that should be informed,
   * if the time-limit is exceeded.
   * The IndexServer does not send any notification to the
   * user. The client application is responsible for doing this.
   */
  // this.userId;

  /**
   * User name for timeLimitUserId;
   * When writing a workflow with checkinWorkFlow, this value has preceedence
   * before timeLimitUserId. Set timeLimitUserName to an empty string, if
   * timeLimitUserId should be used.
   */
  // this.userName;

  /**
   * After this date the node exceeds the time-limit for processing.
   * Read-only.
   */
  // this.timeLimitIso;

  /**
   * True, if the workflow exceeds the time limit.
   * Read-only.
   */
  // this.overTimeLimit;

 };

// ---------------- API class WorkFlowActiveDocC --------------------

/**
 * <p>Bit constants for members of WorkFlowActiveDoc</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 * @see WorkFlowActiveDoc
 */
de.elo.ix.client.WorkFlowActiveDocC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.WorkFlowActiveDocC';

  /**
   * DB column: wf_flowid
   */
  // this.mbFlowId;

  /**
   * DB column: wf_nodeid
   */
  // this.mbNodeId;

  /**
   * DB column: wf_flow_name
   */
  // this.mbFlowName;

  /**
   * DB column: wf_flow_name
   */
  // this.lnFlowName;

  /**
   * DB column: wf_name
   */
  // this.mbName;

  /**
   * DB column: wf_name
   */
  // this.lnName;

  /**
   * DB column: wf_node_type
   */
  // this.mbNodeType;

  /**
   * DB column: wf_department
   */
  // this.mbDepartment;

  /**
   * DB column: wf_alert_to
   */
  // this.mbAlertTo;

  /**
   * DB column: wf_alert_from_begin
   */
  // this.mbAlertFromBegin;

  /**
   * DB column: wf_alert_wait
   */
  // this.mbAlertWait;

  /**
   * DB column: wf_yesnocondition
   */
  // this.mbYNCondition;

  /**
   * DB column: wf_yesnocondition
   */
  // this.lnYNCondition;

  /**
   * DB column: wf_condition
   */
  // this.mbCondition;

  /**
   * DB column: wf_condition
   */
  // this.lnCondition;

  /**
   * DB column: wf_comment
   */
  // this.mbComment;

  /**
   * DB column: wf_comment
   */
  // this.lnComment;

  /**
   * DB column: wf_locked
   */
  // this.mbLocked;

  /**
   * DB column: pos_x
   */
  // this.mbPosX;

  /**
   * DB column: pos_y
   */
  // this.mbPosY;

  /**
   * DB column: wf_ev_on_activate
   */
  // this.mbOnActivate;

  /**
   * DB column: wf_ev_on_activate
   */
  // this.lnOnActivate;

  /**
   * DB column: wf_ev_on_terminate
   */
  // this.mbOnTerminate;

  /**
   * DB column: wf_ev_on_terminate
   */
  // this.lnOnTerminate;

  /**
   * DB column: wf_nodeflags
   */
  // this.mbNodeFlags;

  /**
   * DB column: wf_eloobjid
   */
  // this.mbEloObjId;

  /**
   * DB column: wf_locked_owner
   */
  // this.mbLockId;

  /**
   * DB column: wf_is_next
   */
  // this.mbIsNext;

  /**
   * DB column: wf_activate
   */
  // this.mbActivate;

  /**
   * DB column: wf_terminate
   */
  // this.mbTerminate;

  /**
   * DB column: wf_in_use_date
   */
  // this.mbInUseDate;

  /**
   * DB column: wf_completion_date
   */
  // this.mbCompletionDate;

  /**
   * DB column: wf_template
   */
  // this.mbTemplateId;

  /**
   * DB column: wf_userterminate
   */
  // this.mbUserTerminate;

  /**
   * DB column: wf_userterminate
   */
  // this.lnUserTerminate;

  /**
   * DB column: wf_tag
   */
  // this.mbTag;

  /**
   * DB column: wf_designdepartment
   */
  // this.mbDesignDepartment;

  /**
   * DB column: wf_dx
   */
  // this.mbMoveCyclePosX;

  /**
   * DB column: wf_department2
   */
  // this.mbDepartment2;

  /**
   * DB column: wf_delaydays
   */
  // this.mbDelayDays;

  /**
   * DB column: wf_duedate
   */
  // this.mbDelayDate;

  /**
   * DB column: wf_deleted
   */
  // this.mbDeleted;

  /**
   * DB column: wf_prio
   */
  // this.mbPrio;

  /**
   * Member bit: The workflow node is deferred until this date.
   * ELO date format.
   * DB column: wf_user_delaydate
   * DB column: wf_user_delaydate
   */
  // this.mbUserDelayDate;

  /**
   * Member bit: Version ID.
   * DB column: wf_version
   */
  // this.mbVersionId;

  /**
   * Member bit: Version comment.
   * DB column: wf_version_name
   */
  // this.mbVersionName;

  /**
   * Column length: Version comment.
   * DB column: wf_version_name
   */
  // this.lnVersionName;

  /**
   * Member bit: ID of user who should be informed,
   * if the time-limit alertWait2 exceeds.
   * DB column: wf_alert_to2
   */
  // this.mbAlertTo2;

  /**
   * Member bit: Second Time-limit for a person node or begin node.
   * DB column: wf_alert_wait2
   */
  // this.mbAlertWait2;

  /**
   * Member bit: ID of user who should be informed,
   * if the time-limit alertWait2 exceeds.
   * DB column: wf_alert_to3
   */
  // this.mbAlertTo3;

  /**
   * Member bit: Third Time-limit for a person node or begin node.
   * DB column: wf_alert_wait3
   */
  // this.mbAlertWait3;

  /**
   * Member bit: Next server name. This value is used in replication environments
   * and defines the ID of the next server (resp. replication branch)
   * where the workflow continues processing.
   * DB column: nextserverid
   */
  // this.mbNextServerId;

  /**
   * Column length: Next server name. This value is used in replication environments
   * and defines the ID of the next server (resp. replication branch)
   * where the workflow continues processing.
   * DB column: nextserverid
   */
  // this.lnNextServerId;

  /**
   * Member bit: Version number.
   * DB column: wf_version_tag
   */
  // this.mbVersionTag;

  /**
   * Column length: Version number.
   * DB column: wf_version_tag
   */
  // this.lnVersionTag;

  /**
   * Member bit: ID of the user who created the workflow version.
   * DB column: wf_version_userid
   */
  // this.mbVersionUserId;

  /**
   * Member bit: ID of the user who created the workflow version.
   * DB column: wf_version_createdate
   */
  // this.mbVersionCreateDate;

  /**
   * Member bit: Object-GUID of an icon file that is displayed in the designer.
   * DB column: wf_icon_guid
   */
  // this.mbIconId;

  /**
   * Column length: Object-GUID of an icon file that is displayed in the designer.
   * DB column: wf_icon_guid
   */
  // this.lnIconId;

  /**
   * Member bit: User defined data to be stored in the database.
   * DB column: wf_form_spec
   */
  // this.mbFormSpec;

  /**
   * Column length: User defined data to be stored in the database.
   * DB column: wf_form_spec
   */
  // this.lnFormSpec;

  /**
   * All valid member bits.
   */
  // this.mbAllMembers;

 };

// ---------------- API class ActivityOptionC --------------------

/**
 * Constants for class ActivityOption
 * @see ActivityOption
 * @since 8.00.012.001
 */
de.elo.ix.client.ActivityOptionC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ActivityOptionC';

  /**
   * Option ID for receiver.
   */
  // this.ID_RECEIVER;

  /**
   * Option ID for shipping type.
   */
  // this.ID_TYPE;

  /**
   * Option ID for receiving status.
   */
  // this.ID_STATUS;

  /**
   * Option ID for transmission number.
   */
  // this.ID_TRANS;

  /**
   * Application defined IDs must be greater or equal to this value.
   * Up to 10 application defined IDs can be defined.
   * Their values have to be in the range from ID_VALUE+0 to ID_VALUE+9.
   */
  // this.ID_VALUE;

 };

// ---------------- API class Alert --------------------

/**
 * <p>Alerts are messages shown in the alert tab of ELO client.</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 */
de.elo.ix.client.Alert = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.Alert';

  // this.dest;

  /**
   * User name of the recipient.
   */
  // this.destName;

  /**
   * User ID of the sender.
   * DB column: source
   */
  // this.source;

  /**
   * User name of the sender.
   */
  // this.sourceName;

  /**
   * Alert type.
   * DB column: alerttype
   */
  // this.type;

  /**
   * Object ID.
   * DB column: objid
   */
  // this.objId;

  /**
   * Extra data 1.
   * DB column: extra1
   */
  // this.extra1;

  /**
   * Extra data 2.
   * DB column: extra2
   */
  // this.extra2;

  /**
   * Comment text.
   * DB column: alertmemo
   */
  // this.memo;

  /**
   * Date and time when the alert was created.
   * DB column: alerttime
   */
  // this.time;

  /**
   * ISO date when the alert was created.
   * Timezone is related to ClientInfo.timezone.
   */
  // this.timeIso;

 };

// ---------------- API class UserInfo --------------------

/**
 * <p>Data class containing the user information data for the user logged in to
 * the Index server. User information includes ID, name, rights, parent, etc.</p>
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 */
de.elo.ix.client.UserInfo = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.UserInfo';

  /**
   * User description.
   */
  // this.desc;

  /**
   * User rights. Possible values are combinations of <code>AccessC.FLAG_*</code> constants.
   */
  // this.flags;

  /**
   * The groups the user is a member of.
   * For Substitues, this list contains the IDs of the substituted users too.
   */
  // this.groupList;

  /**
   * User identifier
   */
  // this.id;

  /**
   * User keys. Array of key access rights. Each item is a combination of the
   * access constants <code>AccessC.LUR_*</code>. The key ID corresponds to the
   * index of the key access item in the key array. A user owns a key, if at least
   * one access constant is included in the key item.
   * Keys do not distinguish between <code>LUR_WRTE</code> and <code>LUR_LIST</code>:
   * <code>LUR_WRITE</code> implies <code>LUR_LIST</code> and v.v.
   */
  // this.keylist;

  /**
   * User name
   */
  // this.name;

  /**
   * User ID of the users parent (users adminstrator).
   */
  // this.parent;

  /**
   * User password
   */
  // this.pwd;

  /**
   * The currently active tickets for the user
   */
  // this.sessions;

  /**
   * User type. <code>TYPE_USER</code> for user, <code>TYPE_GROUP</code> for group.
   */
  // this.type;

  /**
   * Reserved (Additional user properties).
   * Index this array with constants named PROP_* in class UserInfoC.
   */
  // this.userProps;

  /**
   * GUID
   */
  // this.guid;

  /**
   * Timestamp
   * The format is JJJJ.MM.DD.hh.mm.ss
   */
  // this.tStamp;

  /**
   * Last login timestamp (in timezone UTC).
   * This value is read-only and undefined for groups.
   * Only the date part is valid.
   */
  // this.lastLoginIso;

  /**
   * ID of the users superior.
   * If the user does not have a superior, this value is equal to <code>id</code>.
   */
  // this.superiorId;

  /**
   * Second bitset of user rights.
   */
  // this.flags2;

 };

// ---------------- API class Bitset --------------------

/**
 * This class is used in the scripting API of IndexServer and
 * provides bit operations on 64 bit integers. JavaScript does
 * not support bit operations for 64 bit integers.
 * The global context of the JavaScripts executed by IndexServer
 * contain an object named Bitset which is an instance of
 * this class.
 */
de.elo.ix.client.Bitset = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.Bitset';

  /**
   * Internal 64 bit integer value
   */
  // this.v;

 };

// ---------------- API class ActivityProjectC --------------------

/**
 * Constants for class ActivityProject.
 */
de.elo.ix.client.ActivityProjectC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ActivityProjectC';

  // this.mbOptions;

  /**
   * Reserved.
   * This name is used internally only. Do not use this name in your code.
   */
  // this.SYSTEM;

  /**
   * Default project name.
   */
  // this.DEFAULT;

  /**
   * Activity for observing documents and folders.
   */
  // this.REQUEST;

  /**
   * Activity used to notify about a new document version or new sub-item.
   */
  // this.NOTIFY;

 };

// ---------------- API class ProcessFulltext --------------------

/**
 * Fulltext-Property to be added to/removed from an object.
 * 
 * <p>Copyright: Copyright (c) 2008</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.ProcessFulltext = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ProcessFulltext';

  /**
   * Add to the fulltext-service
   */
  // this.addToFulltext;

 };

// ---------------- API class MapData --------------------

/**
 * This class represents a map which contains
 * user defined key-value pairs.
 * @since 7.00.040.001
 */
de.elo.ix.client.MapData = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.MapData';

  /**
   * Map domain name.
   * An arbitary name or one of the predefined names in MapDomainC.
   */
  // this.domainName;

  /**
   * Map ID.
   * If the map belongs to a Sord ID, this value is equal to the member objId.
   */
  // this.id;

  /**
   * Object ID.
   * The ID of the associated Sord object or 0, if the map does not belong to a Sord object.
   */
  // this.objId;

  /**
   * User ID of the user that owns the lock on the map.
   * If the map is not locked, this value is -1.
   */
  // this.lockId;

  /**
   * User name of the user that owns the lock no the map.
   * If the map is not locked, this value is an empty string.
   */
  // this.lockName;

  /**
   * Timestamp
   */
  // this.TStamp;

  /**
   * Map items.
   */
  // this.items;

 };

// ---------------- API class DocMaskC --------------------

/**
 * <p>Constants related to class <code>DocMask</code>.
 * Some of the <code>MFG_</code> values are used in the member
 * <code>Flags</code> of class <code>Sord</code> too.
 * Each member of this class with prefix "mb" has a corresponding member in
 * class <code>DocMask</code></p> * </p>
 * @see DocMask DocMask
 */
de.elo.ix.client.DocMaskC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.DocMaskC';

  /**
   * Predifined GUID for keywording form "Freie Eingabe".
   */
  // this.GUID_BASIC;

  /**
   * Predifined GUID for keywording form "EMail".
   */
  // this.GUID_EMAIL;

  /**
   * Predifined GUID for keywording form "Strukturelement".
   */
  // this.GUID_STRUCTURE_ELEMENT;

  /**
   * Predifined GUID for keywording form "Kontakt".
   */
  // this.GUID_CONTACT;

  /**
   * Predifined GUID for the keywording form used for folders by default.
   */
  // this.GUID_FOLDER;

  /**
   * Predifined GUID for the keywording form used to search entries regardless of their storage mask.
   */
  // this.GUID_SEARCH;

  /**
   * Member bit: ACL
   */
  // this.mbAcl;

  /**
   * ACL length
   */
  // this.lnAcl;

  /**
   * Member bit: use the ACL items in the member
   * DocMask.aclItems and DocMask.docAclItems for reading and writing.
   */
  // this.mbAclItems;

  /**
   * Member bit: read or write index lines.
   */
  // this.mbMaskLines;

  /**
   * Member bit: read or write all elements.
   */
  // this.mbAllMembers;

  /**
   * Member bit: this bit should be set if the Mask is to be used for structure elements and not for
   * documents. The effect is that the member DocMask.details.sortOrder is
   * filled instead of DocMask.details.archivingMode.
   */
  // this.mbSortOrderNotArchivingMode;

  /**
   * Read or write all elements.
   */
  // this.mbAll;

  /**
   * Only lock or unlock
   */
  // this.mbOnlyLock;

  // this.mbDetails;

  // this.mbDocAclItems;

  // this.mbLines;

  // this.mbDeleted;

 };

// ---------------- API class SordTypeZ --------------------

/**
 * <p>This class encapsulates the constants of <code>SordTypeC</code></p>
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 * @see SordTypeC SordTypeC
 */
de.elo.ix.client.SordTypeZ = function() { 
  return new de.elo.ix.client.LongBitset("de.elo.ix.client.SordTypeZ", arguments);
 };

// ---------------- API class ImportOptionsC --------------------

/**
 * Defines the Options of an Import. Each Option is represented by one bit. Several Options can be
 * put together by a bit-logic and.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author Hennig
 */
de.elo.ix.client.ImportOptionsC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ImportOptionsC';

  /**
   * Import all data in a new structure.
   */
  // this.CREATE_SEPARATE_STRUCTURE;

  /**
   * Keep guids on import, generate new guid if guid is already used.
   */
  // this.GUIDS_KEEP;

  /**
   * import only guids that are not already used.
   */
  // this.GUIDS_KEEP_AND_SKIP;

  /**
   * generate new guids during import.
   */
  // this.GUIDS_NEW;

  /**
   * Use original filing-date (Sord.iDateIso saved in export) when filing during import.
   */
  // this.KEEP_FILING_DATE;

  /**
   * Use original filing-path for import (original path of exporting archive was saved during
   * export)
   */
  // this.USE_EXPORTED_PATH;

 };

// ---------------- API class ClientInfo --------------------

/**
 * <p>Contains the session ticket and the users language and country. Each
 * IndexServer interface function, except the login, requires a <code>ClientInfo</code>
 * object as parameter with a valid session ticket.</p>
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author unbekannt
 */
de.elo.ix.client.ClientInfo = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ClientInfo';

  /**
   * This string is used for debugging purposes only.
   * It is displayed in error messages and reports.
   */
  // this.callId;

  /**
   * Country in ISO 3166 format - this is the country for the ELO Client.
   * <table border="2"><tr></tr>
   * <tr><td>CZ</td><td>Czeach Republic</td></tr>
   * <tr><td>FR</td><td>France</td></tr>
   * <tr><td>DE</td><td>Germany</td></tr>
   * <tr><td>GR</td><td>Greece</td></tr>
   * <tr><td>ES</td><td>Spain</td></tr>
   * <tr><td>PL</td><td>Poland</td></tr>
   * <tr><td>GB</td><td>United Kingdom</td></tr>
   * <tr><td>US</td><td>United States</td></tr>
   * </table>
   */
  // this.country;

  /**
   * The users language in ISO 639 format. Exception messages will be supplied in this language.
   * <table border="2"><tr></tr>
   * <tr><td>cs</td><td>Czech</td></tr>
   * <tr><td>de</td><td>German</td></tr>
   * <tr><td>el</td><td>Greek</td></tr>
   * <tr><td>en</td><td>English</td></tr>
   * <tr><td>es</td><td>Spanish</td></tr>
   * <tr><td>fr</td><td>French</td></tr>
   * <tr><td>pl</td><td>Polish</td></tr>
   * </table>
   * Only languages for which the localisations of the IndexServer resources exist
   * can be selected, otherwise the messages are displayed in the default language.
   */
  // this.language;

  /**
   * <p>This is the session ID in the communication between the client and the IndexServer.
   * It has a limited lifetime. The lifetime can be configured at the ELOAM
   * (access manager server). The IndexServer returns a valid ticket if the
   * IXServicePortIF.login call succeeds. The lifetime of the ticket can be extended by calling
   * IXServicePortIF.alive. </p>
   */
  // this.ticket;

  /**
   * The time zone for the ELO client.
   * Can be one of the predefined time zone IDs in the Java platform or a string
   * of format "GMT" + sign + hh + ":" + mm.
   */
  // this.timeZone;

  /**
   * Internal use only.
   * Bit 0 of this member is set for requests that are send from one Indexserver instance to
   * another instance in load balancing scenarios.
   */
  // this.options;

 };

// ---------------- API class RepliHistC --------------------

/**
 * <p>Bit constants for members of RepliHist</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 * @see RepliHist
 */
de.elo.ix.client.RepliHistC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.RepliHistC';

  /**
   * DB column: rhrowid
   */
  // this.mbId;

  /**
   * DB column: rhtsdate
   */
  // this.mbTSDate;

  /**
   * DB column: rhtsdate
   */
  // this.lnTSDate;

  /**
   * DB column: rhimex
   */
  // this.mbImEx;

  /**
   * DB column: rhsucc
   */
  // this.mbSucc;

  /**
   * DB column: rharcguid
   */
  // this.mbArcGuid;

  /**
   * DB column: rharcguid
   */
  // this.lnArcGuid;

  /**
   * DB column: rharcshort
   */
  // this.mbArcShort;

  /**
   * DB column: rharcshort
   */
  // this.lnArcShort;

  /**
   * DB column: rharcdesc
   */
  // this.mbArcDesc;

  /**
   * DB column: rharcdesc
   */
  // this.lnArcDesc;

  /**
   * DB column: rhtsbegin
   */
  // this.mbTSBegin;

  /**
   * DB column: rhtsbegin
   */
  // this.lnTSBegin;

  /**
   * DB column: rhtsend
   */
  // this.mbTSEnd;

  /**
   * DB column: rhtsend
   */
  // this.lnTSEnd;

  /**
   * All valid member bits.
   */
  // this.mbAllMembers;

 };

// ---------------- API class ProcessScript --------------------

/**
 * NOT CURRENTLY SUPPORTED
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author tkalec
 */
de.elo.ix.client.ProcessScript = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ProcessScript';

  /**
   * Script name.
   */
  // this.name;

  /**
   * execution position in tree walks.
   */
  // this.processPostfix;

  /**
   * user defined tag.
   */
  // this.tag;

 };

// ---------------- API class WFTypeC --------------------

/**
 * Constants class for WFType. This class describes the workflow type/status.
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.WFTypeC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.WFTypeC';

  // this.bsetACTIVE;

  // this.bsetFINISHED;

  // this.bsetTEMPLATE;

  /**
   * The workflow is active.
   */
  // this.ACTIVE;

  /**
   * The workflow is finished (completed).
   */
  // this.FINISHED;

  /**
   * The workflow is a template workflow.
   */
  // this.TEMPLATE;

 };

// ---------------- API class FindAlertInfo --------------------

/**
 * Find criterias for selecting alerts.
 * RESERVED
 */
de.elo.ix.client.FindAlertInfo = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.FindAlertInfo';

  /**
   * Find alerts created by this user, ID or name.
   */
  // this.sourceId;

  /**
   * Find alerts sendet to this user, ID or name.
   * Only main administrators can set this value to an arbitary user ID.
   * Other users can only set one of her or his groups or one of her or
   * his substituted users.
   */
  // this.destId;

  /**
   * Find all notification types.
   * If this member is set, the other members related to
   * notification types are ignored.
   */
  // this.inclAll;

  /**
   * Find alarm notifications.
   * Ignored, if <code>inclAll</code> is true.
   */
  // this.inclAlam;

  /**
   * Find reminder notifications.
   * Ignored, if <code>inclAll</code> is true.
   */
  // this.inclReminder;

  /**
   * Find notifications related to the In Tray.
   * Ignored, if <code>inclAll</code> is true.
   */
  // this.inclInTray;

  /**
   * Find workflow notifications.
   * Ignored, if <code>inclAll</code> is true.
   */
  // this.inclWorkFlow;

  /**
   * Find all other notifications that are not explicitly
   * listed here.
   * Ignored, if <code>inclAll</code> is true.
   */
  // this.inclOthers;

  /**
   * Find notifications related to substitution rules.
   * Ignored, if <code>inclAll</code> is true.
   */
  // this.inclSubs;

  /**
   * Find notifications related to this object.
   * For valid values see <code>checkoutSord</code>.
   */
  // this.objId;

  /**
   * Find notifiations with this create date or
   * in this date range.
   * A date range must be separated by "...".
   */
  // this.timeIso;

 };

// ---------------- API class EloIxOpt_oldC --------------------

/**
 * <p>Bit constants for members of EloIxOpt_old</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 * @see EloIxOpt_old
 */
de.elo.ix.client.EloIxOpt_oldC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.EloIxOpt_oldC';

  /**
   * DB column: optno
   */
  // this.mbOptNo;

  /**
   * DB column: optval
   */
  // this.mbOptVal;

  /**
   * DB column: optval
   */
  // this.lnOptVal;

  /**
   * DB column: remark
   */
  // this.mbRemark;

  /**
   * DB column: remark
   */
  // this.lnRemark;

  /**
   * All valid member bits.
   */
  // this.mbAllMembers;

 };

// ---------------- API class FindByFulltextCtrlResultItem --------------------

/**
 * A search using FindByFulltextCtrl returns this result items
 * in addition to findResult.sords.
 * @see FindByFulltextCtrl
 * @since 7.00.040.008
 */
de.elo.ix.client.FindByFulltextCtrlResultItem = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.FindByFulltextCtrlResultItem';

  /**
   * Sord object.
   * Same as in <code>findResult.sords[.]</code>
   */
  // this.sord;

  /**
   * Timestamp of the last change of either indexing information, note data,
   * fulltext content or attachment fulltext content.
   */
  // this.TStamp;

  /**
   * Note object.
   * If this member is set, member <code>sord</code> can be ignored.
   */
  // this.note;

 };

// ---------------- API class NoteText --------------------

/**
 * This class conatins additional information for textual notes.
 * NoteText objects can be used in NoteTemplate and Note objects.
 * @see Note#noteText
 * @see NoteTemplate#noteText
 * @since 7.00.000.023
 */
de.elo.ix.client.NoteText = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.NoteText';

  /**
   * Font.
   * This member is null for type NoteC.TYPE_ANNOTATION_NOTE.
   */
  // this.fontInfo;

  /**
   * Stamp text.
   * The maximum length is NoteDataC.lnDesc - 50, if the NoteText object is used in
   * a Note object. The length for a text of a NoteTemplate object is defined by
   * NoteTemplateC.lnText
   */
  // this.text;

 };

// ---------------- API class ExecuteScriptResult --------------------

/**
 * The function executeScript returns an object of this class
 * to provide returned information or error information.
 */
de.elo.ix.client.ExecuteScriptResult = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ExecuteScriptResult';

  /**
   * Return value as string.
   */
  // this.returnedString;

  /**
   * Error message.
   */
  // this.errorMessage;

  /**
   * Line where the error occured.
   */
  // this.errorLine;

  /**
   * Column where the error occured.
   */
  // this.errorColumn;

 };

// ---------------- API class KeywordList --------------------

/**
 * This class provides general informations for a keyword list.
 * @since 7.00.000.033
 */
de.elo.ix.client.KeywordList = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.KeywordList';

  /**
   * ID
   */
  // this.id;

  /**
   * GUID
   */
  // this.guid;

  /**
   * Last modified, ISO - UTC
   * Read-only.
   */
  // this.tStamp;

  /**
   * RESERVED
   */
  // this.deleted;

  /**
   * ID of the user that has written the keyword list at last.
   * Read-only.
   */
  // this.userId;

  /**
   * Name of the user that has written the keyword list at last.
   * Read-only.
   */
  // this.userName;

  /**
   * The keyword list entries.
   */
  // this.children;

  /**
   * ID of the user who holds a lock on the keyword list.
   */
  // this.lockId;

 };

// ---------------- API class Thesaurus --------------------

/**
 * Internal class.
 */
de.elo.ix.client.Thesaurus = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.Thesaurus';

  /**
   * DB column: groupid
   */
  // this.groupId;

  /**
   * DB column: prio
   */
  // this.prio;

  /**
   * DB column: data
   */
  // this.data;

  /**
   * DB column: compare
   */
  // this.compare;

  /**
   * DB column: listid
   */
  // this.listId;

 };

// ---------------- API class DocVersion --------------------

/**
 * <p>Description: This class describes a document version, a document preview
 * or a signature.</p>
 * <p>Copyright: Copyright (c) 2002</p>
 * <p>Organisation: ELO DIgital Office GmbH</p>
 * @author unbekannt
 */
de.elo.ix.client.DocVersion = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.DocVersion';

  /**
   * Last access date. ClientInfo determines the Timezone.
   * <p>Applies to document version and signature.
   * Is undefined for preview and fulltextContent.</p>
   */
  // this.accessDateIso;

  /**
   * Version comment
   * <p>Applies to document version.
   * Is undefined for signature, preview and fulltextContent.</p>
   */
  // this.comment;

  /**
   * Create date. ClientInfo determines the Timezone.
   * <p>Applies to document version and signature.
   * Is undefined for preview and fulltextContent.</p>
   */
  // this.createDateIso;

  /**
   * Indicates whether the version is logically deleted.
   * <p>Applies to document version.
   * Is undefined for signature, preview and fulltextContent.</p>
   */
  // this.deleted;

  /**
   * Document file extension (without ".")
   * <p>Applies to document version, signature and preview.
   * Is readonly for fulltextContent.</p>
   * This value has precedence before <code>contentType</code>.
   */
  // this.ext;

  /**
   * Content-Type (MIME-Type).
   */
  // this.contentType;

  /**
   * Document, preview or fulltextContent file content. If <code>checkoutDoc</code> is called with option
   * <code>mbSordDocSmallContent</code> and the requested document (version) is small (less than
   * the configured value), this member contains the file data and content type. If
   * <code>mbPreview</code> is additionally set, <code>fileData</code> contains the content of
   * the preview - REGARDLESS of the size. In case there is no preview, <code>fileData</code>
   * contains the data of the document (if it's a small file).
   * <p>Applies to document version, signature and preview.</p>
   */
  // this.fileData;

  /**
   * Document GUID.
   * <p>Applies to document version and signature. Is undefined for preview and fulltextContent.</p>
   */
  // this.guid;

  /**
   * Document ID
   * <p>Applies to document version and signature. Is undefined for preview and fulltextContent.</p>
   */
  // this.id;

  /**
   * MD5 hash of the documet file.
   * <p>Applies to document version and signature. Is undefined for preview and fulltextContent.</p>
   */
  // this.md5;

  /**
   * Indicates whether the version is marked as a milestone version.
   * <p>Applies to document version. Is undefined for signature and preview and fulltextContent.</p>
   */
  // this.milestone;

  /**
   * The owners user ID.
   * <p>Applies to document version. Is undefined for signature and preview and fulltextContent.</p>
   */
  // this.ownerId;

  /**
   * The owners user name. This value is read only (ignored in checkinDoc...).
   * <p>Applies to document version. Is undefined for signature and preview and fulltextContent.</p>
   */
  // this.ownerName;

  /**
   * Storage path ID
   * <p>Applies to document version and signature. Is undefined for preview and fulltextContent.</p>
   */
  // this.pathId;

  /**
   * (to be defined)
   * <p>Applies to document version and signature. Is undefined for preview and fulltextContent.</p>
   */
  // this.pathId2;

  /**
   * Physical path
   * <p>Applies to document version and signature. Is undefined for preview and fulltextContent.</p>
   * Set SordC.mbPhysPath or EditInfoC.mbPhysPath in the member selector
   * passed to checkoutSord or checkoutDoc to read the physical path.
   */
  // this.physPath;

  /**
   * <p>URL to up-/download a document preview.</p>
   * <p>Applies to document version. Is empty for signature and preview and fulltextContent.</p>
   */
  // this.previewUrl;

  /**
   * Document signature
   * <p>Applies to document version. Is null for signature and preview and fulltextContent.</p>
   */
  // this.sig;

  /**
   * Document preview
   * <p>Applies to document version. Is null for signature and preview and fulltextContent.</p>
   */
  // this.preview;

  /**
   * File size.
   */
  // this.size;

  /**
   * Document timestamp
   * <p>Applies to document version and signature. Is undefined for preview. (Is available for fulltextContent)</p>
   * The format is JJJJ.MM.DD.hh.mm.ss
   */
  // this.tStamp;

  /**
   * Last update date. ClientInfo determines the Timezone.
   * <p>Applies to document version and signature. Is undefined for preview and fulltextContent.</p>
   */
  // this.updateDateIso;

  /**
   * Result from the ELODM if the document was uploaded.
   * <p>Applies to document version, signature, preview and fulltextContent.</p>
   */
  // this.uploadResult;

  /**
   * URL to up-/download
   * <p>Applies to document version, signature,preview and fulltextContent.</p>
   */
  // this.url;

  /**
   * Version number
   * <p>Applies to document version. Is undefined for signature, preview and fulltextContent.</p>
   */
  // this.version;

  /**
   * Indicates whether the version is the current work version.
   * <p>Applies to document version. Is undefined for signature, preview and fulltextContent.</p>
   */
  // this.workVersion;

  /**
   * ID of the encryption set. It's password is used to encrypt or decrypt the document.
   * It a new document or version should be checked in, this member must be set
   * to Sord.details.encryptionSet before checkinDocBegin is called.
   * When this object is retrieved via IX it is always set to Sord.details.encryptionSet.
   * <p>Applies to document version. Is undefined for signature, preview and fulltextContent.</p>
   */
  // this.encryptionSet;

  /**
   * This object provides the content of the fulltext database for the document version.
   * The information is read-only and only available for DocVersion objects that refer to
   * a document version (and not an attachment, preview or signature).
   * Currenly, only the members url, ext, contentType and encryptionSet are valid vor a DocVersion object
   * that belongs to fulltext content. Whereby ext is always txt and contentType is always text/plain.
   * A Byte Order Mark preceedes the content data.
   * If the related document version is encrypted, the appropriate encryption password
   * has to be set, before the fulltext information can be downloaded.
   * If the SessionOptionC.DECRYPT_DOCUMENTS is not set, the fulltext information is transmitted
   * encrypted.
   * <p>Applies to document version. Is undefined for signature and preview.</p>
   */
  // this.fulltextContent;

 };

// ---------------- API class EloIxOpt --------------------

/**
 * Internal class.
 */
de.elo.ix.client.EloIxOpt = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.EloIxOpt';

  /**
   * DB column: optname
   */
  // this.name;

  /**
   * DB column: ixid
   */
  // this.ixId;

  /**
   * DB column: optval
   */
  // this.value;

 };

// ---------------- API class InvalidateCacheC --------------------

/**
 * Constants for cache invalidation.
 * This constans can be used as bit combination in function invalidateCache.
 * @author Imig
 */
de.elo.ix.client.InvalidateCacheC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.InvalidateCacheC';

  /**
   * Flag used to specify that the cached DocMask objects are invalid.
   */
  // this.MASKS;

  /**
   * Flag used to specify that the cached ColorData objects are invalid.
   */
  // this.MARKERS;

  /**
   * Flag used to specify that the cached Path objects are invalid.
   */
  // this.PATHS;

  /**
   * Flag used to specify that the cached SordType objects are invalid.
   */
  // this.SORD_TYPES;

  /**
   * Flag used to specify that the cached ReplName objects are invalid.
   */
  // this.REPL_NAMES;

  /**
   * Flag used to specify that the cached crypt keys are invalid.
   */
  // this.CRYPT_INFO;

  /**
   * Flag used to specify that the cached users are invalid.
   */
  // this.USERS;

  /**
   * Flag used to specify that the cached keys are invalid.
   */
  // this.KEYS;

  /**
   * Flag used to specify that the translate terms are invalid.
   */
  // this.TRANSLATE_TERMS;

  /**
   * Flag used to specify that the note and cold background images are invalid.
   */
  // this.NOTE_AND_COLD_IMAGES;

  /**
   * Flag used to specify that all cached objects are invalid.
   */
  // this.ALL;

 };

// ---------------- API class NavigationInfo --------------------

/**
 * NavigationInfo is used as traversal information for structured bulk
 * operations restricting specific processsing, e.g. pooled jobs, to scalable amounts.
 * It provides parameters controlling the traversal.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author tkalec
 */
de.elo.ix.client.NavigationInfo = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.NavigationInfo';

  /**
   * ignore the navigation of documents
   */
  // this.ignoreDocuments;

  /**
   * maxCount is the overall maximum amount of visited nodes and is independent of successful processing.
   * maxCount does not depend on successful processing to be incremented, and it can stop the traversal
   * before any of the other limits have been reached.
   * Passing maxCount &lt; 1 will turn off this limit.
   */
  // this.maxCount;

  /**
   * The maximum depth of the tree walk. Passing maxDepth &lt; 1 turns off this limit.
   */
  // this.maxDepth;

  /**
   * The maximum number of siblings for one tree level. This limit is most
   * useful for ignoring the contents of large folders. Passing maxSiblings
   * &lt; 1 will turn the limit off.
   */
  // this.maxSiblings;

  /**
   * The starting points for the tree walk. Interdepending nodes will only be
   * traversed once. Providing null causes an invalid parameter exception,
   * while unresolvable IDs or GUIDs will simply be ignored.
   */
  // this.startIDs;

 };

// ---------------- API class NoteZ --------------------

/**
 * This class encapsulates the constants of the NoteC class.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.NoteZ = function() { 
  return new de.elo.ix.client.LongBitset("de.elo.ix.client.NoteZ", arguments);
 };

// ---------------- API class FindActivityProjectsInfo --------------------

/**
 * This class defines the options for IXServicePortIF.findActivityProjects.
 * @see IXServicePortIF#findActivityProjects(ClientInfo, FindActivityProjectsInfo)
 * @since 8.00.012.001
 */
de.elo.ix.client.FindActivityProjectsInfo = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.FindActivityProjectsInfo';

  /**
   * Project name.
   * This value can contain wildcards.
   */
  // this.projectName;

 };

// ---------------- API class ObjChangeC --------------------

/**
 * <p>Bit constants for members of ObjChange</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 * @see ObjChange
 */
de.elo.ix.client.ObjChangeC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ObjChangeC';

  /**
   * DB column: chgobjid
   */
  // this.mbObjId;

  /**
   * DB column: chgobjid
   */
  // this.lnObjId;

  /**
   * DB column: chgtstamp
   */
  // this.mbTStamp;

  /**
   * DB column: chgtstamp
   */
  // this.lnTStamp;

  /**
   * DB column: chgcode
   */
  // this.mbCode;

  /**
   * DB column: chgparam
   */
  // this.mbParam;

  /**
   * DB column: chgparam2
   */
  // this.mbParam2;

  /**
   * DB column: chgparam2
   */
  // this.lnParam2;

  /**
   * DB column: chguser
   */
  // this.mbUser;

  /**
   * All valid member bits.
   */
  // this.mbAllMembers;

 };

// ---------------- API class ActivityProject --------------------

/**
 * This class represents an activity project.
 * An activity project is a template for an activity.
 * @see Activity
 */
de.elo.ix.client.ActivityProject = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ActivityProject';

  /**
   * Project name.
   * This can be one of the predefined project names: ActivityProjectC.DEFAULT, ActivityProjectC.REQUEST, ActivityProjectC.NOTIFY.
   * Or an arbitrary name for an application defined use case.
   * The name must be unique because it is internally used as an ID.
   * It has to start with a letter and must only contain letters, numbers or underscores.
   */
  // this.project;

  /**
   * Reserved.
   */
  // this.major;

  /**
   * Reserved.
   */
  // this.minor;

  /**
   * Reserved.
   */
  // this.optValue;

  /**
   * Options.
   */
  // this.options;

  /**
   * Activity project is protected.
   */
  // this.protectedProject;

  /**
   * Activity project is locked when finished.
   */
  // this.lockedWhenFinished;

 };

// ---------------- API class FileData --------------------

/**
 * Class for the data contained in a file.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.FileData = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.FileData';

  /**
   * MIME-Type/document extension, for example text/xml or image/tiff or txt.
   */
  // this.contentType;

  /**
   * File data as byte array.
   */
  // this.data;

 };

// ---------------- API class DocMaskDetails --------------------

/**
 * This class contains a member of a <code>DocMask</code> object.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @see DocMask DocMask
 */
de.elo.ix.client.DocMaskDetails = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.DocMaskDetails';

  /**
   * Archiving mode.
   * Sort order and archiving mode share the same database column.
   * If the mask is used for documents, set <code>sortOrder=SordOrderC.NONE</code>.
   * ELO 7.0: This value is only valid for document masks, <code>documentMask=true</code>.
   */
  // this.archivingMode;

  /**
   * Encryption set number.
   */
  // this.encryptionSet;

  /**
   * Document is or should be containted in the fultext database.
   */
  // this.fulltext;

  /**
   * Sort order of child entries.
   * Sort order and archiving mode share the same database column.
   * If the mask is used for folders, set <code>archivingMode=ArchivingModeC.NONE</code>.
   * If both <code>sortOrder</code> and <code>archivingMode</code> are set, <code>sortOrder</code>
   * has precedence and <code>archivingMode</code> is ignored.
   * ELO 7.0: This value is only valid for folder masks, <code>folderMask=true</code>.
   */
  // this.sortOrder;

  /**
   * Mask can be used to edit indexing information of a document.
   */
  // this.documentMask;

  /**
   * Mask can be used to search for indexing information.
   */
  // this.searchMask;

  /**
   * Mask can be used to edit indexing information of a folder
   */
  // this.folderMask;

  /**
   * If <code>DocMask.index</code> is defined,
   * this option effects that the resulting archieve path is created, if
   * it does not exist.
   */
  // this.createIndexPath;

  /**
   * If <code>DocMask.index</code> is defined including reference paths,
   * this option effects that the resulting reference paths are created, if
   * they do not exist.
   */
  // this.createIndexReferencesPaths;

 };

// ---------------- API class TranslateTermC --------------------

/**
 * Constants for class TranslateTerm.
 * @see TranslateTerm
 * @since 7.00.000.000
 */
de.elo.ix.client.TranslateTermC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.TranslateTermC';

  /**
   * Use this value in parameter <code>termIds[.]</code> to
   * retrieve the system languages.
   */
  // this.GUID_SYSTEM_LANGUAGES;

  /**
   * Use this value as parameter <code>termIds</code> to
   * retrieve the system languages.
   */
  // this.TASKIDS_FOR_SYSTEM_LANGUAGES;

  /**
   * Maximum term length;
   */
  // this.lnTermLang;

 };

// ---------------- API class ColorData --------------------

/**
 * <p>Colours for marking entries in the archive.</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 * @see de.elo.ix.client.ColorDataC ColorDataC
 */
de.elo.ix.client.ColorData = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ColorData';

  /**
   * RGB value.
   */
  // this.RGB;

  /**
   * Colour number (ID).
   */
  // this.id;

  /**
   * Colour name
   */
  // this.name;

  /**
   * GUID
   */
  // this.guid;

  /**
   * TStamp
   */
  // this.TStamp;

  /**
   * Deleted
   */
  // this.deleted;

 };

// ---------------- API class EloFtStopC --------------------

/**
 * <p>Bit constants for members of EloFtStop</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 * @see EloFtStop
 */
de.elo.ix.client.EloFtStopC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.EloFtStopC';

  /**
   * DB column: stopword
   */
  // this.mbStopword;

  /**
   * DB column: stopword
   */
  // this.lnStopword;

  /**
   * All valid member bits.
   */
  // this.mbAllMembers;

 };

// ---------------- API class WorkFlowActiveDoc --------------------

/**
 * Internal class.
 */
de.elo.ix.client.WorkFlowActiveDoc = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.WorkFlowActiveDoc';

  /**
   * Workflow ID.
   * DB column: wf_flowid
   */
  // this.flowId;

  /**
   * Node ID.
   * DB column: wf_nodeid
   */
  // this.nodeId;

  /**
   * Workflow name.
   * DB column: wf_flow_name
   */
  // this.flowName;

  /**
   * Node name (work instruction).
   * DB column: wf_name
   */
  // this.name;

  /**
   * Node type (begin node, split node, etc.).
   * DB column: wf_node_type
   */
  // this.nodeType;

  /**
   * This value depends on the node type and is not processed anymore by IndexServer.
   * It is written for compability with workflows of older CLIENT versions.
   * DB column: wf_succ_type
   */
  // this.succType;

  /**
   * ID of user who has to process the node. Might
   * be a group ID too. Only valid for person nodes.
   * DB column: wf_department
   */
  // this.department;

  /**
   * ID of user who should be informed, if a time-limit exceeds. It might be
   * the time-limit for the entire workflow or for a signle person node.
   * DB column: wf_alert_to
   */
  // this.alertTo;

  /**
   * Time-limt for the entire workflow in minutes. This value is only valid for
   * the begin node.
   * DB column: wf_alert_from_begin
   */
  // this.alertFromBegin;

  /**
   * Time-limit for a single node. This value is only valid for person nodes.
   * DB column: wf_alert_wait
   */
  // this.alertWait;

  /**
   * IF-Nodes: test condition,
   * person nodes: index values or scripts,
   * split nodes: workflow status.
   * DB column: wf_yesnocondition
   */
  // this.yNCondition;

  /**
   * Contains the ACL of the workflow. Only valid for begin nodes.
   * DB column: wf_condition
   */
  // this.condition;

  /**
   * Comment, only valid for person nodes.
   * DB column: wf_comment
   */
  // this.comment;

  /**
   * Successor node(s) succ_0 ... Succ 19
   * DB column: wf_succ_0
   * This mebers are moved into WorkFlowNodeMatrix.
   * They are still here due to compatibiltiy with older stream versions.
   */
  // this.succ_0;

  /**
   * DB column: wf_succ_1
   */
  // this.succ_1;

  /**
   * DB column: wf_succ_2
   */
  // this.succ_2;

  /**
   * DB column: wf_succ_3
   */
  // this.succ_3;

  /**
   * DB column: wf_succ_4
   */
  // this.succ_4;

  /**
   * DB column: wf_succ_5
   */
  // this.succ_5;

  /**
   * DB column: wf_succ_6
   */
  // this.succ_6;

  /**
   * DB column: wf_succ_7
   */
  // this.succ_7;

  /**
   * DB column: wf_succ_8
   */
  // this.succ_8;

  /**
   * DB column: wf_succ_9
   */
  // this.succ_9;

  /**
   * DB column: wf_succ_10
   */
  // this.succ_10;

  /**
   * DB column: wf_succ_11
   */
  // this.succ_11;

  /**
   * DB column: wf_succ_12
   */
  // this.succ_12;

  /**
   * DB column: wf_succ_13
   */
  // this.succ_13;

  /**
   * DB column: wf_succ_14
   */
  // this.succ_14;

  /**
   * DB column: wf_succ_15
   */
  // this.succ_15;

  /**
   * DB column: wf_succ_16
   */
  // this.succ_16;

  /**
   * DB column: wf_succ_17
   */
  // this.succ_17;

  /**
   * DB column: wf_succ_18
   */
  // this.succ_18;

  /**
   * DB column: wf_succ_19
   */
  // this.succ_19;

  /**
   * If node is locked, it contains 1 otherwise 0
   * DB column: wf_locked
   */
  // this.locked;

  /**
   * Node X position in designer view.
   * DB column: pos_x
   */
  // this.posX;

  /**
   * Node Y position in designer view.
   * DB column: pos_y
   */
  // this.posY;

  /**
   * Name of script to be executed, if the node is activated (entered).
   * DB column: wf_ev_on_activate
   */
  // this.onActivate;

  /**
   * Name of script to be executed, if the node is leaved (exited).
   * DB column: wf_ev_on_terminate
   */
  // this.onTerminate;

  /**
   * Node flags.
   * DB column: wf_nodeflags
   */
  // this.nodeFlags;

  /**
   * Associated object ID. Only valid for non-template workflows.
   * DB column: wf_eloobjid
   */
  // this.eloObjId;

  /**
   * User ID of the owner of the lock.
   * DB column: wf_locked_owner
   */
  // this.lockId;

  /**
   * Contains 1, if this node is active.
   * DB column: wf_is_next
   */
  // this.isNext;

  /**
   * ELO-date when the node was entered.
   * DB column: wf_activate
   */
  // this.activate;

  /**
   * ELO-date when the node was exited.
   * DB column: wf_terminate
   */
  // this.terminate;

  /**
   * ELO-date when the node was visited the last time.
   * DB column: wf_in_use_date
   */
  // this.inUseDate;

  /**
   * ELO-date when the workflow was finished. All nodes contain the same value.
   * DB column: wf_completion_date
   */
  // this.completionDate;

  /**
   * Workflow template ID. Not valid for template workflows. For active and
   * finished workflows this member specifies the template ID that was used
   * to start the workflow. If the workflow is started as an adhoc workflow,
   * this member is 0 and flags contains the bit FLAG_ROOT_ADHOC.
   * DB column: wf_template
   */
  // this.templateId;

  /**
   * The ID of the user who has forwarded the node.
   * Not valid for template workflows.
   * Only valid for person nodes.
   * DB column: wf_userterminate
   */
  // this.userTerminate;

  /**
   * reserved.
   * DB column: wf_tag
   */
  // this.tag;

  /**
   * A group ID or user ID that was originally assigned in the designer.
   * DB column: wf_designdepartment
   */
  // this.designDepartment;

  /**
   * If a cycle is re-entered, the nodes in the cycle are duplicated. The copied
   * nodes will be placed in the designer moved by this value to the right. If
   * this value is 0, the nodes are moved 60 points right and 20 points up.
   * DB column: wf_dx
   */
  // this.moveCyclePosX;

  /**
   * A group ID to constrain access to the node. Only members of this group
   * are allowed to see and process the node.
   * Only valid for person nodes.
   * DB column: wf_department2
   */
  // this.department2;

  /**
   * An active person node (Activate is set) might be displayed to the user
   * delayed by this number of days.
   * Only valid for person nodes.
   * DB column: wf_delaydays
   */
  // this.delayDays;

  /**
   * Activate + DelayDays.
   * Not valid for template workflows.
   * Only valid for person nodes.
   * DB column: wf_duedate
   */
  // this.delayDate;

  /**
   * Flag that indicates whether the workflow template is deleted.
   * If the value is not 0, the workflow template is deleted.
   * Only valid for template workflows.
   * DB column: wf_deleted
   */
  // this.deleted;

  /**
   * Workflow priority: 0...high, 1...medium, 2...low.
   * DB column: wf_prio
   */
  // this.prio;

  /**
   * The workflow node is deferred until this date.
   * ELO date format.
   * DB column: wf_user_delaydate
   */
  // this.userDelayDate;

  /**
   * Version ID.
   */
  // this.versionId;

  /**
   * Version comment.
   */
  // this.versionName;

  /**
   * ID of user who should be informed,
   * if the time-limit alertWait2 exceeds.
   */
  // this.alertTo2;

  /**
   * Second Time-limit for a person node or begin node.
   */
  // this.alertWait2;

  /**
   * ID of user who should be informed,
   * if the time-limit alertWait2 exceeds.
   */
  // this.alertTo3;

  /**
   * Third Time-limit for a person node or begin node.
   */
  // this.alertWait3;

  /**
   * Next server name. This value is used in replication environments
   * and defines the ID of the next server (resp. replication branch)
   * where the workflow continues processing.
   */
  // this.nextServerId;

  /**
   * Version number.
   */
  // this.versionTag;

  /**
   * ID of the user who created the workflow version.
   */
  // this.versionUserId;

  /**
   * ID of the user who created the workflow version.
   */
  // this.versionCreateDate;

  /**
   * Object-GUID of an icon file that is displayed in the designer.
   */
  // this.iconId;

  /**
   * User defined data to be stored in the database.
   */
  // this.formSpec;

 };

// ---------------- API class KeywordListC --------------------

/**
 * <p>Bit constants for members of KeywordList</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 * @see KeywordList
 */
de.elo.ix.client.KeywordListC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.KeywordListC';

  /**
   * DB column: swlstatus
   */
  // this.mbStatus;

  /**
   * Member bit: ID
   * DB column: swlgroupid
   */
  // this.mbId;

  /**
   * Column length: ID
   * DB column: swlgroupid
   */
  // this.lnId;

  /**
   * Member bit: GUID
   * DB column: swlguid
   */
  // this.mbGuid;

  /**
   * Column length: GUID
   * DB column: swlguid
   */
  // this.lnGuid;

  /**
   * Member bit: Last modified, ISO - UTC
   * Read-only.
   * DB column: swltstamp
   */
  // this.mbTStamp;

  /**
   * Column length: Last modified, ISO - UTC
   * Read-only.
   * DB column: swltstamp
   */
  // this.lnTStamp;

  /**
   * Member bit: ID of the user that has written the keyword list at last.
   * Read-only.
   * DB column: swluser
   */
  // this.mbUserId;

  /**
   * Member bit: ID of the user who holds a lock on the keyword list.
   * DB column: swllock
   */
  // this.mbLockId;

  /**
   * All valid member bits.
   */
  // this.mbAllMembers;

 };

// ---------------- API class SortOrderC --------------------

/**
 * This class contains constants for sorting of archive entries and search results.
 * @author imw
 * @version $1.0$
 * @see FindOptions FindOptions
 * @see SordDetails#sortOrder SordDetails.sortOrder
 * @see DocMaskDetails#sortOrder DocMaskDetails.sortOrder
 * @see SordDetails SordDetails
 */
de.elo.ix.client.SortOrderC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.SortOrderC';

  /**
   * Subitems are sorted manually.
   */
  // this.MANUAL;

  /**
   * Subitems are sorted by name.
   */
  // this.ALPHA;

  /**
   * Subitems are sorted by external date.
   */
  // this.XDATE;

  /**
   * Subitems are sorted by internal date.
   */
  // this.IDATE;

  /**
   * Subitems are sorted by external date descending.
   */
  // this.IXDATE;

  /**
   * Subitems are sorted by longernal date descending.
   */
  // this.IIDATE;

  /**
   * Subitems are sorted by name descending.
   */
  // this.IALPHA;

  // this.DEFAULT;

  // this.NONE;

 };

// ---------------- API class WFCollectNode --------------------

/**
 * <p>Data used to display a workflow node int the task view.</p>
 * <p>This class bundles the data which is required for displaying a workflow
 * node. The class is used by <code>findFirstTasks</code> </p>
 * @see IXServicePortIF#findFirstTasks(ClientInfo, FindTasksInfo, int)
 */
de.elo.ix.client.WFCollectNode = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.WFCollectNode';

  /**
   * Date the node was activated
   */
  // this.activateDateIso;

  /**
   * Is the node active or not?
   */
  // this.active;

  /**
   * Workflow id
   */
  // this.flowId;

  /**
   * Workflow name
   */
  // this.flowName;

  /**
   * Date the node was set to <i>In Use</i>
   */
  // this.inUseDateIso;

  /**
   * Node identifier
   */
  // this.nodeId;

  /**
   * Description/processing instructions for the workflow node
   */
  // this.nodeName;

  /**
   * Object GUID of the object for which the workflow is started.
   */
  // this.objGuid;

  /**
   * Object id of the object for which the workflow is started.
   */
  // this.objId;

  /**
   * Object type of the object for which the workflow is started.
   * (1 for cabinet, 2 for folder, etc.)
   */
  // this.objType;

  /**
   * Node priority
   */
  // this.prio;

  /**
   * Date the node was completed/terminated
   */
  // this.terminateDateIso;

  /**
   * User number of the user for whom the workflow node is intended.
   */
  // this.userId;

  /**
   * User name of the user for whom the workflow node is intended.
   */
  // this.userName;

  /**
   * True, if the node exceeds the time limit.
   */
  // this.overTimeLimit;

  /**
   * Date the workfow was completed
   */
  // this.completionDateIso;

  /**
   * The workflow node is deferred until this date.
   * Not valid for template workflows.
   * Only valid for person nodes.
   * ELO date format.
   */
  // this.userDelayDateIso;

  /**
   * Workflow status.
   * This member is only valid when this object is returned by the
   * findFirstTasks or findNextTasks functions.
   */
  // this.flowStatus;

  /**
   * Node must be completed until this date.
   * This member is only valid when this object is returned by the
   * findFirstTasks or findNextTasks functions.
   */
  // this.timeLimitIso;

  /**
   * Additional definitions for time limits.
   */
  // this.timeLimitEscalations;

  /**
   * Workflow owner ID.
   * This member is only valid when this object is returned by the
   * findFirstTasks or findNextTasks functions.
   */
  // this.workflowOwnerId;

  /**
   * Workflow owner name.
   * This member is only valid when this object is returned by the
   * findFirstTasks or findNextTasks functions.
   */
  // this.workflowOwnerName;

  /**
   * ID of the user that was assigned to the node when the workflow started.
   */
  // this.designDepartmentId;

  /**
   * Name of the user that was assigned to the node when the workflow started.
   */
  // this.designDepartmentName;

  /**
   * Node description.
   */
  // this.nodeComment;

  /**
   * Sord name.
   */
  // this.objName;

  /**
   * Time limit in minutes.
   */
  // this.timeLimit;

  /**
   * The ID of the user that should be informed,
   * if the time-limit is exceeded.
   * The IndexServer does not send any notification to the
   * user. The client application is responsible for doing this.
   */
  // this.timeLimitUserId;

  /**
   * User name for timeLimitUserId;
   * When writing a workflow with checkinWorkFlow, this value has preceedence
   * before timeLimitUserId. Set timeLimitUserName to an empty string, if
   * timeLimitUserId should be used.
   */
  // this.timeLimitUserName;

 };

// ---------------- API class CounterInfoC --------------------

/**
 * Constants class for the CounterInfo class.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.CounterInfoC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.CounterInfoC';

  /**
   * length field for Name.
   */
  // this.lnName;

 };

// ---------------- API class RepliHist --------------------

/**
 * Internal class
 */
de.elo.ix.client.RepliHist = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.RepliHist';

  /**
   * DB column: rhrowid
   */
  // this.id;

  /**
   * DB column: rhtsdate
   */
  // this.tSDate;

  /**
   * DB column: rhimex
   */
  // this.imEx;

  /**
   * DB column: rhsucc
   */
  // this.succ;

  /**
   * DB column: rharcguid
   */
  // this.arcGuid;

  /**
   * DB column: rharcshort
   */
  // this.arcShort;

  /**
   * DB column: rharcdesc
   */
  // this.arcDesc;

  /**
   * DB column: rhtsbegin
   */
  // this.tSBegin;

  /**
   * DB column: rhtsend
   */
  // this.tSEnd;

 };

// ---------------- API class CheckoutUsersC --------------------

/**
 * <p>Constants to select users and groups</p>
 * @author imw
 */
de.elo.ix.client.CheckoutUsersC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.CheckoutUsersC';

  /**
   * Internal use only.
   */
  // this.bsetNOTHING;

  /**
   * Internal use only.
   */
  // this.bsetBY_IDS;

  /**
   * Internal use only.
   */
  // this.bsetALL_USERS;

  /**
   * Internal use only.
   */
  // this.bsetALL_GROUPS;

  /**
   * Internal use only.
   */
  // this.bsetALL_USERS_AND_GROUPS;

  /**
   * Internal use only.
   */
  // this.bsetMEMBERS_OF_GROUP;

  /**
   * Internal use only.
   */
  // this.bsetUSERS_OF_GROUP;

  /**
   * Internal use only.
   */
  // this.bsetMEMBERS_OF_GROUP_RECURSIVE;

  /**
   * Internal use only.
   */
  // this.bsetUSERS_OF_GROUP_RECURSIVE;

  /**
   * Internal use only.
   */
  // this.bsetGROUPS_OF_MEMBER;

  /**
   * Internal use only.
   */
  // this.bsetGROUPS_OF_MEMBER_RECURSIVE;

  /**
   * Internal use only.
   */
  // this.bsetSESSION_INFO;

  /**
   * Internal use only.
   */
  // this.bsetSELECT_MASK;

  /**
   * Internal use only.
   */
  // this.bsetMY_USERS;

  /**
   * Internal use only.
   */
  // this.bsetEFFECTIVE_RIGHTS;

  /**
   * Select no user or group. Makes sense if you only want to lock user data.
   */
  // this.NOTHING;

  /**
   * Selects the user objects of the specified users.
   * Returned user data contains effective rights.
   */
  // this.BY_IDS;

  /**
   * Selects the user objects of the specified users.
   * Returned user data does not contain effective rights.
   */
  // this.BY_IDS_RAW;

  /**
   * Selects all users.
   * Returned user data contains effective rights.
   */
  // this.ALL_USERS;

  /**
   * Selects all users.
   * Returned user data does not contain effective rights.
   */
  // this.ALL_USERS_RAW;

  /**
   * Selects all groups.
   * Returned user data contains effective rights.
   */
  // this.ALL_GROUPS;

  /**
   * Selects all groups.
   * Returned user data does not contain effective rights.
   */
  // this.ALL_GROUPS_RAW;

  /**
   * Selects all users an all groups.
   * Returned user data contains effective rights.
   */
  // this.ALL_USERS_AND_GROUPS;

  /**
   * Selects all users an all groups.
   * Returned user data does not contain effective rights.
   */
  // this.ALL_USERS_AND_GROUPS_RAW;

  /**
   * Selects all members (users and groups) of the specified group. Does not look
   * for members of member groups recursively.
   * Returned user data contains effective rights.
   */
  // this.MEMBERS_OF_GROUP;

  /**
   * Selects all members (users and groups) of the specified group. Does not look
   * for members of member groups recursively.
   * Returned user data does not contain effective rights.
   */
  // this.MEMBERS_OF_GROUP_RAW;

  /**
   * Selects all users of the specified group. Does not look
   * for members of member groups recursively.
   * Returned user data contains effective rights.
   */
  // this.USERS_OF_GROUP;

  /**
   * Selects all users of the specified group. Does not look
   * for members of member groups recursively.
   * Returned user data does not contain effective rights.
   */
  // this.USERS_OF_GROUP_RAW;

  /**
   * Selects all members (users and groups) of the specified group. Walks recursively
   * over the group members and selects all members directly or indirectly contained
   * in the specified group.
   * Returned user data contains effective rights.
   */
  // this.MEMBERS_OF_GROUP_RECURSIVE;

  /**
   * Selects all members (users and groups) of the specified group. Walks recursively
   * over the group members and selects all members directly or indirectly contained
   * in the specified group.
   * Returned user data does not contain effective rights.
   */
  // this.MEMBERS_OF_GROUP_RECURSIVE_RAW;

  /**
   * Selects all users of the specified group. Walks recursively
   * over the group members and selects all users directly or indirectly contained
   * in the specified group.
   * Returned user data contains effective rights.
   */
  // this.USERS_OF_GROUP_RECURSIVE;

  /**
   * Selects all users of the specified group. Walks recursively
   * over the group members and selects all users directly or indirectly contained
   * in the specified group.
   * Returned user data does not contain effective rights.
   */
  // this.USERS_OF_GROUP_RECURSIVE_RAW;

  /**
   * Selects all direct groups of a user (or group). Does not look for groups
   * recursively.
   * Returned user data contains effective rights.
   */
  // this.GROUPS_OF_MEMBER;

  /**
   * Selects all direct groups of a user (or group). Does not look for groups
   * recursively.
   * Returned user data does not contain effective rights.
   */
  // this.GROUPS_OF_MEMBER_RAW;

  /**
   * Selects all direct groups of a user (or group). Does not look for groups
   * recursively. Walks recursively over the users groups.
   * Returned user data contains effective rights.
   */
  // this.GROUPS_OF_MEMBER_RECURSIVE;

  /**
   * Selects all direct groups of a user (or group). Does not look for groups
   * recursively. Walks recursively over the users groups.
   * Returned user data does not contain effective rights.
   */
  // this.GROUPS_OF_MEMBER_RECURSIVE_RAW;

  /**
   * Selects all active users.
   */
  // this.SESSION_USERS;

  /**
   * Selects all active users.
   * Returned user data does not contain effective rights.
   */
  // this.SESSION_USERS_RAW;

 };

// ---------------- API class Keyword --------------------

de.elo.ix.client.Keyword = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.Keyword';

  /**
   * <p>Prefix the text of a child keyword with the text of this keyword.
   * This member is interpreted in <code>cookKeywords</code>.
   * The following relationship exists between the members <code>enabled, add, raw</code></p>
   * <table border="2">
   * <tr><td>condition</td><td>conclusion</td></tr>
   * <tr><td><code>add=true</code></td><td><code>enabled=false, raw=true</code></td></tr>
   * <tr><td><code>enabled=true</code></td><td><code>add=false, raw=any</code></td></tr>
   * </table>
   */
  // this.add;

  /**
   * Child array.
   */
  // this.children;

  /**
   * If true, this keyword can be used as a value for an index property.
   * Otherwise its only purpose is to structure the keyword hierachy.
   */
  // this.enabled;

  /**
   * Keyword ID. Consists of: groupid + orderid, orderid begins with a ".".
   */
  // this.id;

  /**
   * The function <code>cookKeyword()</code> must be called for this keyword in
   * order to use it for an index property. This is because it contains placeholders
   * that must be substituted or one of the parent keywords should be added.
   */
  // this.raw;

  /**
   * Keyword text. This term is assigned to an index property. The member
   * <code>raw</code> should be checked before this term is used.
   * This text can be translated into reps. from the users language:
   * set <code>SessionOptionsC.TRANSLATE_TERM</code>.
   */
  // this.text;

 };

// ---------------- API class ReportModeC --------------------

de.elo.ix.client.ReportModeC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ReportModeC';

  // this.bsetNO;

  // this.bsetLIMITED;

  // this.bsetVERBOSE;

  // this.bsetFULL;

  /**
   * Do not write report.
   */
  // this.NO;

  /**
   * Write limited report.
   */
  // this.LIMITED;

  /**
   * Write verbose report.
   */
  // this.VERBOSE;

  /**
   * Write full report.
   */
  // this.FULL;

 };

// ---------------- API class DocMaskLine --------------------

/**
 * This class contains data for a line in the document mask.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.DocMaskLine = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.DocMaskLine';

  /**
   * Quickinfo text for the attribute.
   */
  // this.comment;

  /**
   * The ID of the line information.
   */
  // this.id;

  /**
   * The attribute group name.
   * This member corresponds to <code>ObjKey.name</code>.
   */
  // this.key;

  /**
   * This line information belongs to a storage mask with the ID MaskId.
   */
  // this.maskId;

  /**
   * The maximum value of this attribute.
   */
  // this.max;

  /**
   * The minimum value of this attribute.
   */
  // this.min;

  /**
   * The name of the attribute.
   * This value is displayed in the lable before the edit field.
   * It can be translated into reps. from the users language:
   * set <code>SessionOptionsC.TRANSLATE_TERM</code>.
   */
  // this.name;

  /**
   * Access control for mask line.
   * Currently this can only be null or one item representing a key.
   */
  // this.aclItems;

  /**
   * Determines whether the index line can be modified.
   * Read-only.
   */
  // this.canEdit;

  /**
   * Column position of edit control
   */
  // this.editCol;

  /**
   * Row postion of edit control
   */
  // this.editRow;

  /**
   * With of edit control
   */
  // this.editWidth;

  /**
   * This value should not be displayed to the user.
   */
  // this.hidden;

  /**
   * Column position of label control
   */
  // this.labelCol;

  /**
   * Row position of label control
   */
  // this.labelRow;

  // this.nextTab;

  /**
   * The index line can only contain buzzwords.
   */
  // this.onlyBuzzwords;

  /**
   * Add "*" after index value in search operation.
   */
  // this.postfixAsterix;

  /**
   * Add "*" before index value in search operation.
   */
  // this.prefixAsterix;

  /**
   * This value should not be edited in a user interface (convention).
   * Scripts are allowed to edit the value.
   */
  // this.readOnly;

  /**
   * Tabulator order of edit control
   */
  // this.tabOrder;

  /**
   * The type of the line information.
   * This can be one of the <code>DocMaskLineC.TYPE_*</code> constants.
   */
  // this.type;

  /**
   * External data.
   * Can be used to store an arbitary string.
   */
  // this.externalData;

  /**
   * Display index value next to the objects short description.
   * This element has to be interpreted by the client application.
   * IndexServer ignores this value.
   */
  // this.important;

  /**
   * Display index value in version information dialog when
   * checking in a document.
   * This element has to be interpreted by the client application.
   * IndexServer ignores this value.
   */
  // this.version;

  /**
   * Translate index values into or from the users language.
   */
  // this.translate;

  /**
   * Access control for mask line.
   */
  // this.acl;

  /**
   * Bitset of AccessC.LUR_* constants.
   * It contains the access bits for the current user.
   * Only AccessC.LUR_READ and AccessC.LUR_WRITE are used.
   */
  // this.access;

  /**
   * Disable word wheel.
   * Clients should not provide a function to list all
   * existing values for this index vlaue.
   * The IndexServer does not set or test this value.
   */
  // this.disableWordWheel;

  /**
   * This value is assigned to the ObjKey.data element for a new Sord object.
   */
  // this.defaultValue;

 };

// ---------------- API class UserProfileData --------------------

/**
 * Internal class.
 */
de.elo.ix.client.UserProfileData = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.UserProfileData';

  /**
   * User ID.
   * 
   * DB column: userid
   */
  // this.user;

  /**
   * Option key.
   * DB column: optkey
   */
  // this.key;

  /**
   * Option value.
   * DB column: optvalue
   */
  // this.value;

 };

// ---------------- API class UserName --------------------

/**
 * <p>Contains user name, ID and type (group or user). </p>
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 */
de.elo.ix.client.UserName = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.UserName';

  /**
   * User ID
   */
  // this.id;

  /**
   * User name.
   */
  // this.name;

  /**
   * User type.
   */
  // this.type;

  /**
   * User rights.
   * To detect a suspended user, test bit AccessC.FLAG_NOLOGIN.
   */
  // this.flags;

  /**
   * User rights, second set.
   * This member is a bit set of AccessC.FLAGS2_* constants.
   */
  // this.flags2;

 };

// ---------------- API class AdminModeC --------------------

/**
 * Constants for the administration mode.
 * @see IXServicePortIF#adminMode(ClientInfo, int)
 * @since 7.00.040.022
 */
de.elo.ix.client.AdminModeC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.AdminModeC';

  /**
   * Administration mode is active
   */
  // this.ON;

  /**
   * Administration mode is inactive
   */
  // this.OFF;

  /**
   * Query administration mode
   */
  // this.QUERY;

 };

// ---------------- API class CombineAclOptions --------------------

/**
 * This class specifies additional options for compareAcl.
 * @since 7.00.020.000
 */
de.elo.ix.client.CombineAclOptions = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.CombineAclOptions';

  /**
   * Left operand for ACL operation in String representation.
   */
  // this.lhsAclStr;

  /**
   * Right operand for ACL operation in String representation.
   */
  // this.rhsAclStr;

 };

// ---------------- API class NoteDataC --------------------

/**
 * <p>Bit constants for members of Note</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 * @see Note
 */
de.elo.ix.client.NoteDataC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.NoteDataC';

  /**
   * DB column: noteid
   */
  // this.mbId;

  /**
   * DB column: parentid
   */
  // this.mbParentId;

  /**
   * DB column: pageno
   */
  // this.mbPageNo;

  /**
   * DB column: xpos
   */
  // this.mbXPos;

  /**
   * DB column: ypos
   */
  // this.mbYPos;

  /**
   * DB column: userid
   */
  // this.mbOwnerId;

  /**
   * DB column: notetype
   */
  // this.mbType;

  /**
   * DB column: hlock
   */
  // this.mbHLock;

  /**
   * DB column: createdate
   */
  // this.mbCreateDate;

  /**
   * DB column: pidesc
   */
  // this.mbDesc;

  /**
   * DB column: pidesc
   */
  // this.lnDesc;

  /**
   * DB column: noteguid
   */
  // this.mbGuid;

  /**
   * DB column: noteguid
   */
  // this.lnGuid;

  /**
   * DB column: notetstamp
   */
  // this.mbTStamp;

  /**
   * DB column: notetstamp
   */
  // this.lnTStamp;

  /**
   * DB column: notestatus
   */
  // this.mbStatus;

  /**
   * DB column: width
   */
  // this.mbWidth;

  /**
   * DB column: height
   */
  // this.mbHeight;

  /**
   * DB column: noteacl
   */
  // this.mbAcl;

  /**
   * DB column: noteacl
   */
  // this.lnAcl;

  /**
   * DB column: color
   */
  // this.mbColor;

  /**
   * All valid member bits.
   */
  // this.mbAllMembers;

 };

// ---------------- API class NoteTemplateZ --------------------

de.elo.ix.client.NoteTemplateZ = function() { 
  return new de.elo.ix.client.LongBitset("de.elo.ix.client.NoteTemplateZ", arguments);
 };

// ---------------- API class EventBusParams --------------------

/**
 * This class supplies params to control the creation of an event bus ID.
 * Only one of the members ticket, userId and channelId should be set.
 * @see IXServicePortIF#openEventBus(ClientInfo, EventBusParams)
 */
de.elo.ix.client.EventBusParams = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.EventBusParams';

  /**
   * Create event bus ID based on this ticket.
   */
  // this.ticket;

  /**
   * Get the event bus ID for this user.
   * A numeric ID, GUID or user name can be specified.
   * The returned bus ID is computed as EventBusC.BUSID_USER + uid,
   * where uid is the numeric user ID.
   */
  // this.userId;

  /**
   * Create an event bus ID based on this string.
   * An arbitary string can be supplied.
   */
  // this.channelId;

 };

// ---------------- API class MapDomainC --------------------

/**
 * This class defines constants for the predefined map tables.
 * @since 7.00.040.001
 */
de.elo.ix.client.MapDomainC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.MapDomainC';

  // this.DOMAIN_SORD;

  // this.DOMAIN_WORKFLOW_ACTIVE;

  // this.DOMAIN_WORKFLOW_FINISHED;

  // this.DOMAIN_IX_OPTIONS;

  // this.DOMAIN_DM_OPTIONS;

  // this.DOMAIN_FT_OPTIONS;

 };

// ---------------- API class FindByAcl --------------------

/**
 * Find objects by ACL
 * @author Imig
 * @since 7.00.000.011
 */
de.elo.ix.client.FindByAcl = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.FindByAcl';

  /**
   * Return a list of unique ACL entries.
   * The ACL entries are wrapped in arbitary Sord objects which
   * are returned in FindResult.sords.
   * This functionality can be combinded with a FindChildren object
   * to return all ACLs used in a sub tree.
   */
  // this.distinctAcl;

  /**
   * Find objects that are protected by one of this ACLs.
   * For access checking, the order of the ACL items is irrelevant.
   * That means, two ACL lists with the same items in different order are equal.
   * But for this search option, the order of the items are relevant.
   * Thus, the ACLs in the database must exactly match the given values.
   * Wildcard * is supported, if only one ACL is supplied.
   * This member is ignored, if {@link #distinctAcl} is true.
   */
  // this.acls;

 };

// ---------------- API class ReplSetNameC --------------------

/**
 * <p>Bit constants for members of ReplSetName</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 * @see ReplSetName
 */
de.elo.ix.client.ReplSetNameC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ReplSetNameC';

  /**
   * DB column: rsid
   */
  // this.mbId;

  /**
   * DB column: rsimage
   */
  // this.mbImage;

  /**
   * DB column: rsname
   */
  // this.mbName;

  /**
   * DB column: rsname
   */
  // this.lnName;

  /**
   * DB column: rsdesc
   */
  // this.mbDesc;

  /**
   * DB column: rsdesc
   */
  // this.lnDesc;

  /**
   * DB column: rststamp
   */
  // this.mbTStamp;

  /**
   * DB column: rststamp
   */
  // this.lnTStamp;

  /**
   * DB column: rsmobile
   */
  // this.mbMobile;

  /**
   * All valid member bits.
   */
  // this.mbAllMembers;

 };

// ---------------- API class WFNode --------------------

/**
 * <p>Objects of this class represent a workflow node.</p>
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.WFNode = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.WFNode';

  /**
   * Can this node be activated?
   * A script can set this value to prevent the activation of the node.
   * This member is valid for all node types.
   */
  // this.allowActivate;

  /**
   * Comment text for the node.
   * This member is valid for all node types.
   */
  // this.comment;

  /**
   * An active person node (Activate is set) might be displayed to the user
   * delayed by this number of days.
   * Only valid for person nodes.
   */
  // this.delayDays;

  /**
   * A group ID to constrain access to the node. Only members of this group
   * are allowed to see and process the node.
   * Only valid for person nodes.
   */
  // this.department2;

  /**
   * A group ID or user ID that was originally assigned in the designer.
   * Only valid for person nodes.
   */
  // this.designDepartment;

  /**
   * The node was activated on this date.
   * This member is valid for all node types.
   */
  // this.enterDateIso;

  /**
   * The node was exited/completed on this date.
   * This member is valid for all node types.
   */
  // this.exitDateIso;

  /**
   * Control flags for the node, a combination of WFNode.C.FLAG_* constants.
   * For start nodes (TYPE_BEGINNODE), the flags should be specified in
   * WFDiagram.flags. To ensure compatibility with older client programs,
   * the WFNode.flags of the start node are or-ed with the WFDiagram.flags.
   * This member is valid for all node types.
   */
  // this.flags;

  /**
   * Node ID.
   * This member is valid for all node types.
   */
  // this.id;

  /**
   * The date when the node was last used(activated or completed).
   * This member is valid for all node types.
   */
  // this.inUseDateIso;

  /**
   * The activation state of the node.
   * This member is valid for all node types.
   */
  // this.isNext;

  /**
   * If a cycle is re-entered, the nodes in the cycle are duplicated. The copied
   * nodes will be placed in the designer moved by this value to the right. If
   * this value is 0, the nodes are moved 60 points right and 20 points up.
   * This member is valid for all node types.
   */
  // this.moveCyclePosX;

  /**
   * The node description (work instruction).
   * This member is valid for all node types.
   */
  // this.name;

  /**
   * The number of predecessor nodes that must be processed to forward this
   * collector node.
   * A value of -1 means that all predecessor nodes must be processed. If set to
   * 0, the collect node switches when it is activated regardless of the state of
   * the predecessor nodes.
   * This member is only valid for collect nodes.
   */
  // this.nbOfDonesToExit;

  /**
   * The script name that is executed when the node is activated.
   * This member is valid for all node types.
   */
  // this.onEnter;

  /**
   * The script name that is executed when the node is exited/completed.
   * This member is valid for all node types.
   */
  // this.onExit;

  /**
   * The X position in the designer view.
   * This member is valid for all node types.
   */
  // this.posX;

  /**
   * The Y position in the designer view.
   * This member is valid for all node types.
   */
  // this.posY;

  /**
   * reserved.
   * DB column: wf_tag
   */
  // this.tag;

  /**
   * The time-limit to process the node.
   * Measured in minutes.
   * This member is only valid for person nodes.
   */
  // this.timeLimit;

  /**
   * After this date the node exceeds the time-limit for processing.
   * This member is only valid for person nodes.
   */
  // this.timeLimitIso;

  /**
   * The node type.
   * This member is valid for all node types.
   */
  // this.type;

  /**
   * This user has to edit the node.
   * This member is only valid for person nodes.
   */
  // this.userId;

  /**
   * The name of the user that has the ID <code>userId</code>
   * This member is only valid for person nodes.
   */
  // this.userName;

  /**
   * The ID of the user who has forwarded the node.
   * Not valid for template workflows.
   * This member is only valid for person nodes.
   */
  // this.userTerminate;

  /**
   * IF node: test condition, numeric values must be formatted according to the servers locale.
   * split node: sets the workflow status to this value,
   * begin node: contains workflow status
   * cycle node: condition that evaluates true to leave the cycle
   */
  // this.yesNoCondition;

  /**
   * The node is displayed to the user at this date. This date is computed by
   * enterDateIso + delayDays.
   * This member is only valid for person nodes.
   */
  // this.delayDateIso;

  /**
   * True, if the node exceeds the time limit.
   * This member is only valid for person nodes in active or finished workflows.
   * Read-only.
   */
  // this.overTimeLimit;

  /**
   * The workflow node is deferred until this date.
   * This member is only valid for person nodes in active or finished workflows.
   * ISO date format.
   */
  // this.userDelayDateIso;

  /**
   * Server ID (resp. replication branch).
   * If the node is activated, the server ID is set to this value.
   * This member is only valid for nodes of type WFNodeC.TYPE_SET_SERVER_ID.
   */
  // this.processOnServerId;

  /**
   * Additional definitions for time limits.
   * This member is only valid for person nodes.
   */
  // this.timeLimitEscalations;

  /**
   * Group names of index values (DocMaskLine.key resp. ObjKey.name)
   * for which an edit box is to be displayed when forwarding a person node.
   * This member is only valid for person nodes.
   */
  // this.objKeyNames;

  /**
   * Script names used as action scripts in buttons
   * when forwarding a person node.
   * Script files for the Windows CLIENT have to be named
   * as ELOWF_ + scriptNames[.].
   * This member is only valid for person nodes.
   */
  // this.scriptNames;

  /**
   * Object-GUID of an icon file that is displayed in the designer.
   */
  // this.iconId;

  /**
   * User defined data to be stored in the database.
   */
  // this.formSpec;

 };

// ---------------- API class ActivityDataC --------------------

/**
 * <p>Bit constants for members of Activity</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 * @see Activity
 */
de.elo.ix.client.ActivityDataC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ActivityDataC';

  /**
   * DB column: actguid
   */
  // this.mbGuid;

  /**
   * DB column: actguid
   */
  // this.lnGuid;

  /**
   * DB column: docguid
   */
  // this.mbObjGuid;

  /**
   * DB column: docguid
   */
  // this.lnObjGuid;

  /**
   * DB column: acttstamp
   */
  // this.mbTStamp;

  /**
   * DB column: acttstamp
   */
  // this.lnTStamp;

  /**
   * DB column: project
   */
  // this.mbProject;

  /**
   * DB column: project
   */
  // this.lnProject;

  /**
   * DB column: revvers
   */
  // this.mbRevVers;

  /**
   * DB column: revvers
   */
  // this.lnRevVers;

  /**
   * DB column: owner
   */
  // this.mbReceiverId;

  /**
   * DB column: creator
   */
  // this.mbSenderId;

  /**
   * DB column: prio
   */
  // this.mbPrio;

  /**
   * DB column: shortdesc
   */
  // this.mbName;

  /**
   * DB column: shortdesc
   */
  // this.lnName;

  /**
   * DB column: destination
   */
  // this.mbDestination;

  /**
   * DB column: destination
   */
  // this.lnDestination;

  /**
   * DB column: sentat
   */
  // this.mbSentAtIso;

  /**
   * DB column: sentat
   */
  // this.lnSentAtIso;

  /**
   * DB column: sentmode
   */
  // this.mbSentMode;

  /**
   * DB column: sentmode
   */
  // this.lnSentMode;

  /**
   * DB column: duedate
   */
  // this.mbDueDateIso;

  /**
   * DB column: duedate
   */
  // this.lnDueDateIso;

  /**
   * DB column: backat
   */
  // this.mbBackAt;

  /**
   * DB column: backat
   */
  // this.lnBackAt;

  /**
   * DB column: backmode
   */
  // this.mbBackMode;

  /**
   * DB column: backmode
   */
  // this.lnBackMode;

  /**
   * DB column: actcomment
   */
  // this.mbComment;

  /**
   * DB column: actcomment
   */
  // this.lnComment;

  /**
   * DB column: filename
   */
  // this.mbFileName;

  /**
   * DB column: filename
   */
  // this.lnFileName;

  /**
   * DB column: ud0
   */
  // this.mbUd0;

  /**
   * DB column: ud0
   */
  // this.lnUd0;

  /**
   * DB column: ud1
   */
  // this.mbUd1;

  /**
   * DB column: ud1
   */
  // this.lnUd1;

  /**
   * DB column: ud2
   */
  // this.mbUd2;

  /**
   * DB column: ud2
   */
  // this.lnUd2;

  /**
   * DB column: ud3
   */
  // this.mbUd3;

  /**
   * DB column: ud3
   */
  // this.lnUd3;

  /**
   * DB column: ud4
   */
  // this.mbUd4;

  /**
   * DB column: ud4
   */
  // this.lnUd4;

  /**
   * DB column: ud5
   */
  // this.mbUd5;

  /**
   * DB column: ud5
   */
  // this.lnUd5;

  /**
   * DB column: ud6
   */
  // this.mbUd6;

  /**
   * DB column: ud6
   */
  // this.lnUd6;

  /**
   * DB column: ud7
   */
  // this.mbUd7;

  /**
   * DB column: ud7
   */
  // this.lnUd7;

  /**
   * DB column: ud8
   */
  // this.mbUd8;

  /**
   * DB column: ud8
   */
  // this.lnUd8;

  /**
   * DB column: ud9
   */
  // this.mbUd9;

  /**
   * DB column: ud9
   */
  // this.lnUd9;

  /**
   * Member bit: Application defined value.
   * DB column: transmitid
   */
  // this.mbTransId;

  /**
   * Column length: Application defined value.
   * DB column: transmitid
   */
  // this.lnTransId;

  /**
   * All valid member bits.
   */
  // this.mbAllMembers;

 };

// ---------------- API class CheckoutUsersZ --------------------

/**
 * This class encapsulates the constants of CheckoutUsersC.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.CheckoutUsersZ = function() { 
  return new de.elo.ix.client.LongBitset("de.elo.ix.client.CheckoutUsersZ", arguments);
 };

// ---------------- API class CopyOptions --------------------

/**
 * Structure for the options for the copy-process.
 * <p>
 * Copyright: Copyright (c) 2009
 * </p>
 * <p>
 * Organisation: ELO Digital Office GmbH
 * </p>
 * @since 7.00.020.001
 * @version 1.1
 */
de.elo.ix.client.CopyOptions = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.CopyOptions';

  /**
   * Name of the target archive element.
   */
  // this.targetName;

  /**
   * ParentId of the new element.
   */
  // this.newParentId;

  /**
   * Copy only the base element.
   */
  // this.copyOnlyBaseElement;

  /**
   * Copy all structures with the documents.
   */
  // this.copyStructuresAndDocuments;

  /**
   * Keep the original owner of the archive element.
   */
  // this.keepOriginalOwner;

  /**
   * Keep the current documentnotes.
   */
  // this.keepCurrentNotes;

  /**
   * Keep references to original objects in copied parents.
   * This member is ignored, if ProcessInfo.inclReferences=false.
   * If this member is true or only the parent is included in the tree,
   * the copied reference links the copied parent to the original object.
   * If this member is false and both the parent and object of a reference is included
   * in the tree, the copied reference links the copied parent to the copied object.
   */
  // this.keepReferences;

 };

// ---------------- API class TranslateTermData --------------------

de.elo.ix.client.TranslateTermData = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.TranslateTermData';

  /**
   * GUID
   */
  // this.guid;

  /**
   * Timestamp.
   * Last mofified time, ISO date with dots measured in UTC
   * The format is JJJJ.MM.DD.hh.mm.ss
   */
  // this.TStamp;

  /**
   * Status.
   * The object is not deleted, if <code>status</code> is -1.
   */
  // this.status;

  /**
   * Language 1. System language.
   */
  // this.lang1;

  /**
   * Language 2
   */
  // this.lang2;

  /**
   * Language 3
   */
  // this.lang3;

  /**
   * Language 4
   */
  // this.lang4;

  /**
   * Language 5
   */
  // this.lang5;

  /**
   * Language 6
   */
  // this.lang6;

  /**
   * Language 7
   */
  // this.lang7;

  /**
   * Language 8
   */
  // this.lang8;

  /**
   * Language 9
   */
  // this.lang9;

 };

// ---------------- API class FindByVersion --------------------

/**
 * This class holds additional information for FindInfo, in order to restrict
 * a search using the document history (version).
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.FindByVersion = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.FindByVersion';

  /**
   * User defined version description. The wildcard * is allowed,
   * it matches any number of characters.
   */
  // this.versionComment;

  /**
   * The md5 Hash value for the file.
   */
  // this.versionMD5;

  /**
   * User defined version number or version id. The wildcard * is allowed,
   * it matches any number of characters.
   */
  // this.versionNumber;

  /**
   * Optional flag to restrict the search to active versions only.
   */
  // this.workVersionOnly;

 };

// ---------------- API class MapItem --------------------

/**
 * Internal class.
 */
de.elo.ix.client.MapItem = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.MapItem';

  /**
   * Map id.
   */
  // this.id;

  /**
   * Map key.
   */
  // this.key;

  /**
   * Map value.
   */
  // this.value;

 };

// ---------------- API class WFTypeZ --------------------

/**
 * This class encapsulates the constants of the WFTypeC class.
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.WFTypeZ = function() { 
  return new de.elo.ix.client.LongBitset("de.elo.ix.client.WFTypeZ", arguments);
 };

// ---------------- API class NotifyServerInfo --------------------

/**
 * This class is used in IXServicePortIF.notifyServer to describe which
 * operation(s) has (have) been processed by the client application.
 * @since 8.00.000.005
 */
de.elo.ix.client.NotifyServerInfo = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.NotifyServerInfo';

  /**
   * The number of scanned documents.
   */
  // this.scanCount;

  /**
   * The number of documents for which OCR was processed.
   */
  // this.ocrCount;

 };

// ---------------- API class DocMask --------------------

/**
 * <p>Contains the data for a storage mask.</p>
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author unbekannt
 */
de.elo.ix.client.DocMask = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.DocMask';

  /**
   * New objects are created with these ACL permission settings.
   */
  // this.DAcl;

  /**
   * The marker color ID for new objects created with this mask.
   */
  // this.DKind;

  /**
   * Document storage path name where the documents of this mask
   * should be stored.
   */
  // this.DPath;

  /**
   * Last update time of the storage mask data.
   */
  // this.TStamp;

  /**
   * Barcode string.
   */
  // this.barcode;

  /**
   * The ID of a workflow that is started if a new object with this
   * mask is created.
   * If the SessionOption START_DOCMASK_WORKFLOWS is set, the IndexServer
   * starts this workflow, if an associated document is created. Otherwise the
   * client application is responsible for starting the workflow.
   */
  // this.flowId;

  /**
   * Storage mask ID.
   */
  // this.id;

  /**
   * This control string provides a way of storing new storage mask objects
   * automatically in a particular archive path.
   */
  // this.index;

  /**
   * New objects are valid for this length of time.
   */
  // this.lifetime;

  /**
   * User ID of the user that has locked the storage mask.
   * If -1, no lock is held.
   */
  // this.lockId;

  /**
   * Name of the user that has locked th storage mask.
   * Read-only, ignored in checkinDocMask.
   */
  // this.lockName;

  /**
   * Storage mask name.
   * It can be translated into reps. from the users language:
   * set <code>SessionOptionsC.TRANSLATE_TERM</code>.
   */
  // this.name;

  /**
   * RESERVED!
   */
  // this.text;

  /**
   * Access control for the mask line
   */
  // this.acl;

  /**
   * Access control to mask line. Currently this can only be null or one item representing a key.
   */
  // this.aclItems;

  /**
   * Detailed properties for the DocMask object.
   */
  // this.details;

  /**
   * These access control items are the initial values for new documents inserted with this mask.
   */
  // this.docAclItems;

  /**
   * Access control to mask. Currently this can only be null or one item representing a key.
   */
  // this.lines;

  /**
   * GUID
   */
  // this.guid;

  /**
   * Deleted status.
   */
  // this.deleted;

  /**
   * The ID of a workflow that is to be started if a new version of an associated
   * document is checked in.
   * If the SessionOption START_DOCMASK_WORKFLOWS is set, the IndexServer
   * starts this workflow, if an associated document is checked in. Otherwise the
   * client application is responsible for starting the workflow.
   */
  // this.flowId2;

 };

// ---------------- API class ReportModeZ --------------------

/**
 * <p>This class encapsulates the constants of <code>ReportModeC</code></p>
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 * @see ReportModeC ReportModeC
 */
de.elo.ix.client.ReportModeZ = function() { 
  return new de.elo.ix.client.LongBitset("de.elo.ix.client.ReportModeZ", arguments);
 };

// ---------------- API class ServerInfoDMC --------------------

/**
 * Constants used by the members of the class ServerInfoDM.
 * @see ServerInfoDM
 * @since 7.00.040.025
 */
de.elo.ix.client.ServerInfoDMC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ServerInfoDMC';

  /**
   * This bitmask selects the lower two bits of the ServerInfoDM.storeMode.
   * This bits are equal to one of the STOREMODE_BASEPATH_* constants.
   */
  // this.STOREMODE_BASEPATH_MASK;

  /**
   * Fill up base paths subsequently.
   */
  // this.STOREMODE_BASEPATH_FILL_UP;

  /**
   * Fill base paths by round robin algorithm.
   */
  // this.STOREMODE_BASEPATH_ROUNDROBIN;

 };

// ---------------- API class NoteTemplateC --------------------

/**
 * Constants for class NoteTemplate
 * @see NoteTemplate
 * @since 7.00.000.023
 */
de.elo.ix.client.NoteTemplateC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.NoteTemplateC';

  /**
   * Member bit: id
   */
  // this.mbId;

  /**
   * Member bit: name
   */
  // this.mbName;

  /**
   * Member bit: UserId
   */
  // this.mbUserId;

  /**
   * Member bit: noteText
   */
  // this.mbNoteText;

  /**
   * Member bit: noteImage
   */
  // this.mbNoteImage;

  /**
   * Member bit: acl, aclItems
   */
  // this.mbAcl;

  /**
   * Member bit: all members
   */
  // this.mbAllMembers;

  /**
   * Elementselector: mbId
   */
  // this.mbMin;

  /**
   * Elementselector: mbAllMembers
   */
  // this.mbAll;

  /**
   * Placeholder for user name.
   * This constant can be used in NoteTemplate.textInfo.text as
   * a placeholder for the current user name.
   */
  // this.PLACEHOLDER_USERNAME;

  /**
   * Placeholder for date.
   * This constant can be used in NoteTemplate.textInfo.text as
   * a placeholder for the current date.
   */
  // this.PLACEHOLDER_DATE;

  /**
   * Placeholder for time.
   * This constant can be used in NoteTemplate.textInfo.text as
   * a placeholder for the current time.
   */
  // this.PLACEHOLDER_TIME;

  /**
   * Read/write note template visible for all users
   */
  // this.USERID_ALL;

  /**
   * Separates the values in the raw data representation.
   */
  // this.RAW_ITEM_SEPARATOR;

  /**
   * Separates the values of the subitems in the raw data representation.
   */
  // this.RAW_SUBITEM_SEPARATOR;

  /**
   * Separates the values of the name and text in the raw data representation.
   */
  // this.RAW_STAMPINFO_SEPARATOR;

  /**
   * Length of note template name.
   */
  // this.lnName;

  /**
   * Length of text in class NoteText.
   */
  // this.lnText;

 };

// ---------------- API class CryptInfo --------------------

/**
 * This class defines an encryption set.
 * @author Imig
 */
de.elo.ix.client.CryptInfo = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.CryptInfo';

  /**
   * Numerical ID of the encryption information. The first ID is 1.
   */
  // this.id;

  /**
   * Name.
   */
  // this.name;

  /**
   * External password used for encrypting documents. It is empty if this object
   * was returned by <code>checkoutCryptInfos</code>.
   */
  // this.pwd;

  /**
   * Key material. Contains the external and internal password in serialized and
   * encrypted format. Only for internal use.
   * This member is ignored in <code>checkinCryptInfos</code>.
   */
  // this.keyInfo;

 };

// ---------------- API class ProcessCountElements --------------------

/**
 * This class make possible the count of the archive elements.
 * 
 * <p>Copyright: Copyright (c) 2008</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @see CountResult countResult
 */
de.elo.ix.client.ProcessCountElements = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ProcessCountElements';

  /**
   * Result of the countprocess.
   */
  // this.countResult;

 };

// ---------------- API class EloFtOptC --------------------

/**
 * Internal class.
 */
de.elo.ix.client.EloFtOptC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.EloFtOptC';

 };

// ---------------- API class ConfigFile --------------------

/**
 * Used for accessing directories or files on the server.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.ConfigFile = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ConfigFile';

  /**
   * The path to the file.
   */
  // this.dir;

  /**
   * The content of the file.
   */
  // this.fileData;

  /**
   * Returns true if the object is a directory, false if it is a file.
   */
  // this.isDirectory;

  /**
   * The last-modified date of the script file.
   * This value is related to the UTC time-zone.
   */
  // this.lastModifiedISO;

  /**
   * The name of the file or the extension.
   */
  // this.name;

  /**
   * File size.
   */
  // this.size;

  /**
   * HTTP-Response returned when file is uploaded.
   */
  // this.uploadResult;

  /**
   * Download or upload URL.
   */
  // this.url;

 };

// ---------------- API class ArcPath --------------------

/**
 * Archive path.
 */
de.elo.ix.client.ArcPath = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ArcPath';

  /**
   * IdName array. Contains the identifiers and names for the archive paths.
   * The first element is for the cabinet level. An entry does not exist for the archive level.
   */
  // this.path;

  /**
   * Path as string. The first charachter is the path separator.
   */
  // this.pathAsString;

 };

// ---------------- API class ProcessCopyElements --------------------

/**
 * Copy archive elements in other position in the archive.
 * <p>
 * Copyright: Copyright (c) 2009
 * </p>
 * <p>
 * Organisation: ELO Digital Office GmbH
 * </p>
 * @version 1.2
 */
de.elo.ix.client.ProcessCopyElements = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ProcessCopyElements';

  /**
   * Options for the copy-process
   */
  // this.copyOptions;

 };

// ---------------- API class WFNodeZ --------------------

/**
 * This class encapsulates the constants of the WFNodeC class.
 * 
 * <p>Copyright: Copyright (c) 2011</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.WFNodeZ = function() { 
  return new de.elo.ix.client.LongBitset("de.elo.ix.client.WFNodeZ", arguments);
 };

// ---------------- API class ExportOptionsC --------------------

/**
 * Constants class for the ExportOptions class. Contains constants used when
 * exporting objects from the ELO archive.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.ExportOptionsC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ExportOptionsC';

  /**
   * Include other versions in the export. The default is to only export the
   * current active document.
   */
  // this.EXPORT_ALL_VERSIONS;

  /**
   * Include the document-files in the export.
   */
  // this.EXPORT_DOCUMENTS;

  /**
   * Include the used keyword-lists in the export.
   */
  // this.EXPORT_KEYWORDS;

  /**
   * Include refereced documents in the export.
   */
  // this.EXPORT_REFERENCED_DOCUMENTS;

 };

// ---------------- API class SordType --------------------

/**
 * Each file structure element is assigned a SordType. This SordType has three
 * icons , which are used in the different view in the client: a standard icon,
 * a disabled icon (empty folders or references) and a workflow icon.<br>
 * The icons are available in BMP, ICO and JPEG format.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * 
 * see@ SordTypeC SordTypeC
 */
de.elo.ix.client.SordType = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.SordType';

  /**
   * File data of disabled icon.
   */
  // this.disabledIcon;

  /**
   * For document types, this array lists the associated file extensions.
   */
  // this.extensions;

  /**
   * File data of normal icon.
   */
  // this.icon;

  /**
   * Sord type ID.
   */
  // this.id;

  /**
   * Type name.
   */
  // this.name;

  /**
   * File data of workflow icon.
   */
  // this.workflowIcon;

 };

// ---------------- API class FindWorkflowInfo --------------------

/**
 * This class contains the search criteria for selecting workflows.
 * 
 * <p>
 * Copyright: Copyright (c) 2008, 2010
 * </p>
 * <p>
 * Organisation: ELO Digital Office GmbH
 * </p>
 */
de.elo.ix.client.FindWorkflowInfo = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.FindWorkflowInfo';

  /**
   * Collect workflows for this users.
   * For every given user or group in this list, those workflows are returned where
   * the user or her or his groups or her or his substituted users has any
   * node assigned.
   * If this value is null or empty and the current user is a workflow administrator,
   * the returned list of workflows is not constrained to any user ID.
   * If this value is null or empty and the current user is not a workflow administrator,
   * workflows for the current user inclusive her or his groups and inclusive her or his substituted users are returned.
   * A Workflow administrator (privilege AccessC.FLAG_EDITWF) can specify
   * any user or group ID here. Another user can only specify her or his user ID
   * or her or his groups or her or his substituted users.
   */
  // this.userIds;

  /**
   * Workflow name.
   * If not null and not empty, it the search is restricted to workflows named like this value.
   * It may contain wildcards, e. g. *bill*.
   */
  // this.name;

  /**
   * Workflow type. This parameter controls the search for nodes of either active or
   * finished workflows. If this parameter is null, the search is performed on active workflows.
   */
  // this.type;

  /**
   * Collect only WFs that exceeded the time limit.
   * The entire WF or one of its nodes must be over time.
   */
  // this.overTimeLimit;

  /**
   * Object ID. Active and finished workflows only.
   * If not null and not empty, only workflows assigned to this object are returned.
   */
  // this.objId;

  /**
   * Start date.
   * If not null and not empty, workflows started at this date or in this date range are returned.
   * It can be a single date value or a time span of two ISO dates separated by "...". To
   * return workflows with a start date up to a given time, set startDateIso="..."+time
   * (the first time value can be omitted).
   */
  // this.startDateIso;

  /**
   * Completion date.
   * If not null and not empty, workflows completed at this date or in this date range are returned.
   * Only valid if <code>wfType=FINISHED</code>.
   * A time span can be specified by using "...".
   */
  // this.completionDateIso;

  /**
   * Workflow template ID or name.
   * If not null and not empty, the result is constrained to workflows based on this workflow template.
   */
  // this.templateId;

  /**
   * Only template workflows: include deleted templates.
   */
  // this.inclDeleted;

  /**
   * List with ownerIds. If not null and not empty only the workflows with these owners will be returned.
   */
  // this.ownerIds;

  /**
   * List with userIds. If not null and not empty only the workflows with this active users will be returned.
   * ActiveUsers are the users of the active workflow node.
   */
  // this.activeUserIds;

 };

// ---------------- API class AnyC --------------------

/**
 * This class defines the constants for the type member in Any.
 * @see Any
 * @since 7.00.040.019
 */
de.elo.ix.client.AnyC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.AnyC';

  // this.TYPE_OBJECT;

  // this.TYPE_BOOLEAN;

  // this.TYPE_INT;

  // this.TYPE_LONG;

  // this.TYPE_DOUBLE;

  // this.TYPE_STRING;

  // this.TYPE_HANDLE;

  // this.TYPE_ARRAY_BYTE;

  // this.TYPE_ARRAY_ANY;

 };

// ---------------- API class ProcessReplSet --------------------

/**
 * Replication sets to be added to/removed from an object. The replication set parameter must refer to existing objects that may contain empty lists. Null values are not allowed.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @see ReplSet ReplSet
 */
de.elo.ix.client.ProcessReplSet = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ProcessReplSet';

  /**
   * Replication sets to be added.
   */
  // this.addReplSets;

  /**
   * Replication sets to be intersected with.
   */
  // this.andReplSets;

  /**
   * Replication sets to be set directly overriding any former settings.
   */
  // this.setReplSets;

  /**
   * Replication sets to be subtracted.
   */
  // this.subReplSets;

 };

// ---------------- API class StoreInfo --------------------

/**
 * <p>This class represents a storage path.</p>
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 */
de.elo.ix.client.StoreInfo = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.StoreInfo';

  /**
   * Create date (UTC).
   */
  // this.createDateISO;

  /**
   * Physical directory where the documents of this path are stored.
   */
  // this.dir;

  /**
   * Bitset of options.
   */
  // this.flags;

  /**
   * Path ID
   * Set this value to -1 in order to create a new storage path.
   */
  // this.id;

  /**
   * Path name.
   */
  // this.name;

  /**
   * Granularity of subdirectories in the physical directory.
   */
  // this.scatter;

  /**
   * standard path?
   * read-only
   */
  // this.stdPath;

  /**
   * Update date (UTC).
   */
  // this.updateDateISO;

  /**
   * Physical directory where previews stored.
   */
  // this.previewDir;

  /**
   * Physical directory where fulltext content is stored.
   */
  // this.fulltextDir;

 };

// ---------------- API class LoginResult --------------------

/**
 * <p>Object returned when logging in to the IX. This class contains the
 * information required after the login has been carried out.</p>
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.LoginResult = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.LoginResult';

  /**
   * <p>ClientInfo object returned by the IX when the login is carried out.
   * Contains information about the client settings.</p>
   */
  // this.clientInfo;

  /**
   * <p>Contains the lifetime of the ticket in seconds. The connection
   * is terminated once this lifetime has expired.</p>
   */
  // this.ticketLifetime;

  /**
   * <p>Contains the data detailling the user used to login to the IX.</p>
   */
  // this.user;

 };

// ---------------- API class EventBusC --------------------

/**
 * Constants related to the event bus API.
 * @see IXServicePortIF#sendEvents(ClientInfo, long, Event[])
 */
de.elo.ix.client.EventBusC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.EventBusC';

  /**
   * Broadcast bus ID.
   * The EventBusC.BUSID_BROADCAST refers to a
   * public communication channel that can used by all applications and users.
   * Any user can send events to this bus and is allowed to listen to it.
   */
  // this.BUSID_BROADCAST;

  /**
   * User related bus ID.
   * For each user, an event bus exists with the bus ID EventBusC.BUSID_USER + user-ID. Any user can send
   * events to this bus but only the owning user can listen to it.
   */
  // this.BUSID_USER;

  /**
   * Reserved.
   */
  // this.BUSID_MAX_SYSTEM;

  /**
   * Open chat event type.
   * Events of this type are used to invite subscribers
   * to open a public final static chat channel.
   */
  // this.EVENT_TYPE_OPEN_CHAT;

  /**
   * Chat event type.
   * Events of this type contain chat text.
   */
  // this.EVENT_TYPE_CHAT;

  /**
   * Close chat event type.
   * An event of this type is sent to notify the subscribers that the
   * chat channel (resp. event bus) will be closed shortly.
   */
  // this.EVENT_TYPE_CLOSE_CHAT;

  /**
   * Watch folder event.
   * An event of this type is sent, if the contents of a given folder have been changed.
   * <p>
   * In order to register a listener for such events, the folder to be watched has to be
   * specified with an object ID expression in <code>EventFilter.param2</code>(see checkoutSord):
   * <pre><code>
   * IXConnection conn = ...
   * 
   * // Folder to be watched
   * int folderId = ...
   * 
   * // Register listener
   * conn.getEventBusApi().getBroadcastBus().addListener(
   * EventBusC.EVENT_TYPE_WATCH_FOLDER,
   * Integer.toString(folderId) );
   * </code></pre>
   * </p><p>
   * For each modified Sord object in the watched folder, the client application receives one <code>Event</code>,
   * whereby the data members are set as follows:
   * <pre><code>
   * Event ev = ...
   * 
   * // Folder being watched
   * int folderId = Integer.parseInt(ev.getParam2());
   * 
   * // Arguments
   * Object[] args = (Object[])AnyToObject.toObject(ev.getAny());
   * 
   * // Inserted, updated (e.g. locked) or deleted Sord
   * Sord sord = (Sord)args[0];
   * 
   * // Valid members of args[0]
   * SordZ sordMembersZ = (SordZ)args[1];
   * 
   * // What has happened: EventBusC.WATCH_INSERT, EventBusC.WATCH_UPDATE, EventBusC.WATCH_DELETE
   * int what = (Integer)args[2];
   * </code></pre>
   * </p><p>
   * Watch folder events are sent to every current acitve connection, provided that a listener
   * was registered for it and the associated user has at least read access to the changed object.
   * It is also sent to the connection that fires this event.
   * </p>
   */
  // this.EVENT_TYPE_WATCH_FOLDER;

  /**
   * An object was inserted.
   */
  // this.WATCH_INSERT;

  /**
   * An object was updated, locked or unlocked.
   */
  // this.WATCH_UPDATE;

  /**
   * An object was deleted.
   */
  // this.WATCH_DELETE;

  /**
   * User defined events must have a higher type value than this limit.
   */
  // this.EVENT_TYPE_MAX_SYSTEM;

 };

// ---------------- API class SordHistC --------------------

/**
 * Constanst for class SordHist.
 * @author Imig
 */
de.elo.ix.client.SordHistC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.SordHistC';

  /**
   * History entry created by unknown program.
   */
  // this.SRC_NONE;

  /**
   * History entry created by ELO Windows Client.
   */
  // this.SRC_CLIENT;

  /**
   * History entry created by ELO Automation Interface.
   */
  // this.SRC_OLE;

  /**
   * History entry created by ELO Internet Gateway.
   */
  // this.SRC_IGW;

  /**
   * History entry created by ELO XML Importer
   */
  // this.SRC_XML;

  /**
   * History entry created by ELO SAPALINK.
   */
  // this.SRC_SAP;

  /**
   * History entry created by ELO IndexServer.
   */
  // this.SRC_IX;

  /**
   * History entry created by ELO Replication.
   */
  // this.SRC_REPL;

  /**
   * History entry created by ELO Archive Synchronisation.
   */
  // this.SRC_SYNC;

 };

// ---------------- API class NoteFreehand --------------------

/**
 * This class describes a freehand line annotation.
 * @see Note
 * @since 7.00.000.023
 */
de.elo.ix.client.NoteFreehand = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.NoteFreehand';

  /**
   * Line width.
   */
  // this.width;

  /**
   * Points.
   */
  // this.points;

  /**
   * Line width for strikeout pen (only TYPE_ANNOTATION_STRIKEOUT).
   */
  // this.strikeoutWidth;

  /**
   * Color for strikeout pen (only TYPE_ANNOTATION_STRIKEOUT).
   */
  // this.strikeoutColor;

 };

// ---------------- API class PointInfo --------------------

/**
 * This class describes a 2D point.
 */
de.elo.ix.client.PointInfo = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.PointInfo';

  /**
   * X coordinate
   */
  // this.x;

  /**
   * Y coordinate
   */
  // this.y;

 };

// ---------------- API class ObjHistC --------------------

/**
 * <p>Bit constants for members of SordHist</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 * @see SordHist
 */
de.elo.ix.client.ObjHistC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ObjHistC';

  /**
   * Member bit: Serialisation version ID
   * DB column: objhistguid
   */
  // this.mbHistGuid;

  /**
   * Column length: Serialisation version ID
   * DB column: objhistguid
   */
  // this.lnHistGuid;

  /**
   * DB column: objhistts
   */
  // this.mbTimeStampUTC;

  /**
   * DB column: objhistts
   */
  // this.lnTimeStampUTC;

  /**
   * DB column: objguid
   */
  // this.mbObjGuid;

  /**
   * DB column: objguid
   */
  // this.lnObjGuid;

  /**
   * DB column: objuser
   */
  // this.mbUserNo;

  /**
   * DB column: username
   */
  // this.mbUserName;

  /**
   * DB column: username
   */
  // this.lnUserName;

  /**
   * DB column: objhistsrc
   */
  // this.mbHistSource;

  /**
   * DB column: objhistlocts
   */
  // this.mbTimeStampLocal;

  /**
   * DB column: objhistlocts
   */
  // this.lnTimeStampLocal;

  /**
   * DB column: objhistwks
   */
  // this.mbWorkStation;

  /**
   * DB column: objhistwks
   */
  // this.lnWorkStation;

  /**
   * All valid member bits.
   */
  // this.mbAllMembers;

 };

// ---------------- API class WFNodeAssoc --------------------

/**
 * <p>Represents a bridge (connection) in a workflow diagram</p>
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author unbekannt
 */
de.elo.ix.client.WFNodeAssoc = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.WFNodeAssoc';

  /**
   * Indicates whether the bridge has been passed through/over (used).
   * For a condition node, this member is true for both paths (TRUE and FALSE) if either has been passed.
   * Thus it cannot be used in a client application to find out, which path the workflow has taken.
   */
  // this.done;

  /**
   * Start node (starting location)
   */
  // this.nodeFrom;

  /**
   * Destination (end) node
   */
  // this.nodeTo;

  /**
   * Type of bridge (connection): EVER, TRUE, FALSE
   */
  // this.type;

 };

// ---------------- API class DocMaskLineDataC --------------------

/**
 * <p>Bit constants for members of DocMaskLine</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 * @see DocMaskLine
 */
de.elo.ix.client.DocMaskLineDataC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.DocMaskLineDataC';

  /**
   * DB column: maskno
   */
  // this.mbMaskId;

  /**
   * DB column: mlineno
   */
  // this.mbId;

  /**
   * DB column: linetype
   */
  // this.mbRawType;

  /**
   * DB column: linebez
   */
  // this.mbName;

  /**
   * DB column: linebez
   */
  // this.lnName;

  /**
   * DB column: linekey
   */
  // this.mbKey;

  /**
   * DB column: linekey
   */
  // this.lnKey;

  /**
   * DB column: linemin
   */
  // this.mbMin;

  /**
   * DB column: linemax
   */
  // this.mbMax;

  /**
   * DB column: linelkey
   */
  // this.mbLKey;

  /**
   * DB column: lineflags
   */
  // this.mbRawFlags;

  /**
   * DB column: linecomment
   */
  // this.mbComment;

  /**
   * DB column: linecomment
   */
  // this.lnComment;

  /**
   * Member bit: External data.
   * Can be used to store an arbitary string.
   * DB column: lineext
   */
  // this.mbExternalData;

  /**
   * Column length: External data.
   * Can be used to store an arbitary string.
   * DB column: lineext
   */
  // this.lnExternalData;

  /**
   * Member bit: Internal acl.
   * DB column: lineacl
   */
  // this.mbInternalAcl;

  /**
   * Column length: Internal acl.
   * DB column: lineacl
   */
  // this.lnInternalAcl;

  /**
   * Member bit: This value is assigned to the ObjKey.data element for a new Sord object.
   * DB column: linedefault
   */
  // this.mbDefaultValue;

  /**
   * Column length: This value is assigned to the ObjKey.data element for a new Sord object.
   * DB column: linedefault
   */
  // this.lnDefaultValue;

  /**
   * All valid member bits.
   */
  // this.mbAllMembers;

 };

// ---------------- API class EloIxOptC --------------------

de.elo.ix.client.EloIxOptC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.EloIxOptC';

 };

// ---------------- API class EventListener --------------------

/**
 * This class describes an event bus listener.
 * @see IXServicePortIF#openEventBus(ClientInfo, EventBusParams)
 * @see IXServicePortIF#createEventBusListener(ClientInfo, long, EventListener)
 */
de.elo.ix.client.EventListener = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.EventListener';

  /**
   * Array of event filters.
   */
  // this.filters;

 };

// ---------------- API class WFNodeC --------------------

/**
 * <p>Constants for <code>WorkFlowNode</code>.</p>
 * @see WFNode WFNode
 */
de.elo.ix.client.WFNodeC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.WFNodeC';

  /**
   * Member bit: Node ID
   */
  // this.mbId;

  /**
   * Member bit: Type
   */
  // this.mbType;

  /**
   * Member bit: Activated at this date.
   */
  // this.mbEnterDate;

  /**
   * Member bit: Leaved at this date.
   */
  // this.mbExitDate;

  /**
   * Member bit: In use at this date.
   */
  // this.mbInUseDate;

  /**
   * Member bit: Name
   */
  // this.mbName;

  /**
   * Maximum length of node name.
   */
  // this.lnName;

  /**
   * Member bit: User ID
   */
  // this.mbUserId;

  /**
   * Member bit: number of predecessor nodes that must be processed to forward this node.
   */
  // this.mbNbOfDonesToExit;

  /**
   * Member bit: (to be defined)
   */
  // this.mbTimeLimit;

  /**
   * Member bit: Node comment.
   */
  // this.mbComment;

  /**
   * Maximum length of comment.
   */
  // this.lnComment;

  /**
   * Member bit: x position in designer view.
   */
  // this.mbPosX;

  /**
   * Member bit: y position in designer view.
   */
  // this.mbPosY;

  /**
   * Member bit: locked from user.
   */
  // this.mbLockId;

  /**
   * Member bit: script to execute when node is activated.
   */
  // this.mbOnEnter;

  // this.lnOnEnter;

  /**
   * Member bit: script to execute when node is leaved.
   */
  // this.mbOnExit;

  // this.lnOnExit;

  /**
   * Member bit: control flags.
   */
  // this.mbFlags;

  /**
   * Member bit: (to be defined)
   */
  // this.mbIsNext;

  /**
   * Member bit: yes/no condition
   */
  // this.mbYesNoCondition;

  // this.lnYesNoCondition;

  /**
   * Member bit: condition, is only internally used
   */
  // this.mbCondition;

  // this.lnCondition;

  /**
   * Member bit: Condition result.
   */
  // this.mbResult;

  /**
   * Member bit: The ID of the user who has forwarded the node.
   * Not valid for template workflows.
   * Only valid for person nodes.
   * DB column: wf_userterminate
   */
  // this.mbUserTerminate;

  /**
   * Member bit: reserved.
   * DB column: wf_tag
   */
  // this.mbTag;

  /**
   * Member bit: A group ID or user ID that was originally assigned in the designer.
   * DB column: wf_designdepartment
   */
  // this.mbDesignDepartment;

  /**
   * Member bit: If a cycle is re-entered, the nodes in the cycle are duplicated. The copied
   * nodes will be placed in the designer moved by this value to the right. If
   * this value is 0, the nodes are moved 60 points right and 20 points up.
   * DB column: wf_dx
   */
  // this.mbMoveCyclePosX;

  /**
   * Member bit: A group ID to constrain access to the node. Only members of this group
   * are allowed to see and process the node.
   * Only valid for person nodes.
   * DB column: wf_department2
   */
  // this.mbDepartment2;

  /**
   * Member bit: An active person node (Activate is set) might be displayed to the user
   * delayed by this number of days.
   * Only valid for person nodes.
   * DB column: wf_deldays
   */
  // this.mbDelayDays;

  /**
   * Member bit: DelayDaye.
   * Not valid for template workflows.
   * Only valid for person nodes.
   * DB column: wf_duedate
   */
  // this.mbDelayDate;

  /**
   * Member bit: UserDelayDate.
   * Not valid for template workflows.
   * Only valid for person nodes.
   * DB column: wf_duedate
   */
  // this.mbUserDelayDate;

  /**
   * Member bit: processOnServerId;
   */
  // this.mbProcessOnServerId;

  /**
   * Maximum length of processOnServerId.
   */
  // this.lnProcessOnServerId;

  /**
   * Member bit: timeLimitEscalation
   */
  // this.mbTimeLimitEscalations;

  /**
   * Member bit: objKeyNames
   */
  // this.mbObjKeyNames;

  /**
   * Member bit: scriptNames
   */
  // this.mbScriptNames;

  /**
   * Member bit: Icon GUID.
   */
  // this.mbIconId;

  /**
   * Member bit: FormSpec.
   */
  // this.mbFormSpec;

  // this.mbEnterDateIso;

  // this.mbExitDateIso;

  // this.mbInUseDateIso;

  // this.mbTimeLimitIso;

  // this.mbUserName;

  // this.mbDelayDateIso;

  // this.mbUserDelayDateIso;

  /**
   * All members.
   */
  // this.mbAllMembers;

  /**
   * All members.
   */
  // this.mbAll;

  /**
   * Node flag: Only one user can receive this node.
   */
  // this.FLAG_ONE_SUCCESSOR;

  /**
   * Node flag: The start node of an Adhoc workflow has this flag.
   */
  // this.FLAG_ROOT_ADHOC;

  /**
   * Node flag: Not released. A personal node of an Adhoc workflow has this flag
   * set, if the user has not released the node.
   * The IndexServer does not use this flag anywhere.
   */
  // this.FLAG_NOT_VALID;

  /**
   * Node flag: End of workflow.
   * This flag is set to the end node of an Adhoc workflow.
   * The IndexServer does not need this flag but maybe the ELO Windows Client.
   */
  // this.FLAG_TERMINATE_USER;

  /**
   * Node flag: Reset the ExitDate of the following nodes, if this node is activated.
   */
  // this.FLAG_RESET_CHILDREN;

  /**
   * Node flag: This flag denotes, whether a cycle node (TYPE_CYCLE) is the
   * end of a cycle.
   */
  // this.FLAG_CYCLE_END;

  /**
   * Node flag: This is a copied start node of a cylce. Do not use this flag in
   * workflow templates. The workflow engine will mark copied cycle.
   * nodes with this flag.
   */
  // this.FLAG_CYCLE_X;

  /**
   * Node flag: This flag inicates that weekend days should be skipped when
   * evaluating time limits.
   */
  // this.FLAG_WORKINGDAYS;

  /**
   * Node type: undefined or deleted
   */
  // this.TYPE_NOTHING;

  /**
   * Node type: Start of workflow.
   */
  // this.TYPE_BEGINNODE;

  /**
   * Node type: Personal node. A user must edit the node to continue the workflow.
   */
  // this.TYPE_PERSONNODE;

  /**
   * Node type: Distribute to many following nodes.
   */
  // this.TYPE_SPLITNODE;

  /**
   * Node type: Decision node.
   */
  // this.TYPE_IFNODE;

  /**
   * Node type: Collects many workflow paths.
   */
  // this.TYPE_COLLECTNODE;

  /**
   * Node type: Cycle
   * Cycle nodes are contained in pairs in a workflow. One cycle node denotes the
   * beginning of a cycle and an associated cycle node marks the end. Both cycle
   * nodes must have the same name (WFNode.name). The begin node must be flagged
   * with FLAG_CYCLE_END.
   */
  // this.TYPE_CYCLE;

  /**
   * Note type: Set the server ID where the WF can be continued.
   * This node is used in replicated workflows.
   */
  // this.TYPE_SET_SERVER_ID;

  /**
   * Set WFNode.userId to this value, if a workflow node should belong to the
   * owner of the associated Sord object.
   */
  // this.USERID_OWNER;

  /**
   * This value can be used in Node.department2 to make clear,
   * that Node.department2 has to be ignored.
   */
  // this.USERID_IGNORE;

  /**
   * This ID is a placeholder for the superior of the
   * workflow owner.
   */
  // this.USERID_SUPERIOR;

 };

// ---------------- API class VtDocC --------------------

/**
 * <p>Bit constants for members of VtDoc</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 * @see VtDoc
 */
de.elo.ix.client.VtDocC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.VtDocC';

  /**
   * DB column: objid
   */
  // this.mbObjId;

  /**
   * DB column: objdoc
   */
  // this.mbDocId;

  /**
   * DB column: vtcode
   */
  // this.mbCode;

  /**
   * All valid member bits.
   */
  // this.mbAllMembers;

 };

// ---------------- API class ServerStateC --------------------

/**
 * <p>Bit constants for members of ServerState</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 * @see ServerState
 */
de.elo.ix.client.ServerStateC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ServerStateC';

  /**
   * DB column: actionid
   */
  // this.mbActionId;

  /**
   * DB column: subkey
   */
  // this.mbSubKey;

  /**
   * DB column: action
   */
  // this.mbAction;

  /**
   * DB column: action
   */
  // this.lnAction;

  /**
   * All valid member bits.
   */
  // this.mbAllMembers;

 };

// ---------------- API class LinkSordZ --------------------

/**
 * This class encapsulates the constants of LinkSordC.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.LinkSordZ = function() { 
  return new de.elo.ix.client.LongBitset("de.elo.ix.client.LinkSordZ", arguments);
 };

// ---------------- API class FontInfo --------------------

/**
 * This class describes a font.
 * @since 7.00.000.023
 */
de.elo.ix.client.FontInfo = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.FontInfo';

  /**
   * Font face name
   */
  // this.faceName;

  /**
   * Bold
   */
  // this.bold;

  /**
   * Italic
   */
  // this.italic;

  /**
   * Strike out
   */
  // this.strikeOut;

  /**
   * Underline
   */
  // this.underline;

  /**
   * Read-green-blue value. On byte each color.
   * Read is at the lowest significant byte.
   */
  // this.RGB;

  /**
   * Font heigth.
   */
  // this.height;

  /**
   * The font height is related to the cell height of the font rather than the
   * character heigth.
   */
  // this.heightPerCell;

  /**
   * Specifies the angle, in tenths of degrees, between the escapement vector and the x-axis of the device.
   * The escapement vector is parallel to the base line of a row of text.
   */
  // this.escapement;

 };

// ---------------- API class PhysDel --------------------

/**
 * This class represents one row in the database table physdel.
 * This table contains the guids of physically deleted objects.
 * Those objects can be any objects with a guid: e.g.
 * folders, documents, versions, users, workflows...
 */
de.elo.ix.client.PhysDel = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.PhysDel';

  /**
   * GUID of deleted object.
   */
  // this.guid;

  /**
   * Type of deleted object.
   */
  // this.type;

  /**
   * The object is deleted at this timestamp.
   * Measured in the UTC time-zone.
   */
  // this.TStamp;

 };

// ---------------- API class ColorDataC --------------------

de.elo.ix.client.ColorDataC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ColorDataC';

  /**
   * System color
   */
  // this.GUID_SYSTEM;

  /**
   * Color red
   */
  // this.GUID_RED;

  /**
   * Color green
   */
  // this.GUID_GREEN;

  /**
   * Color blue
   */
  // this.GUID_BLUE;

  // this.mbDeleted;

 };

// ---------------- API class ObjChange --------------------

/**
 * Internal class.
 */
de.elo.ix.client.ObjChange = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ObjChange';

  /**
   * DB column: chgobjid
   */
  // this.objId;

  /**
   * DB column: chgtstamp
   */
  // this.tStamp;

  /**
   * DB column: chgcode
   */
  // this.code;

  /**
   * DB column: chgparam
   */
  // this.param;

  /**
   * DB column: chgparam2
   */
  // this.param2;

  /**
   * DB column: chguser
   */
  // this.user;

 };

// ---------------- API class AclItemC --------------------

/**
 * <p>Types of ACL items.</p>
 * @author imw
 * @see AclItem AclItem
 */
de.elo.ix.client.AclItemC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.AclItemC';

  /**
   * ACL item for group.
   */
  // this.TYPE_GROUP;

  /**
   * ACL item for user.
   */
  // this.TYPE_USER;

  /**
   * ACL item for key.
   */
  // this.TYPE_KEY;

  /**
   * ACL item to inherit rights.
   */
  // this.TYPE_INHERIT;

  /**
   * ACL item to set rights for the owner.
   */
  // this.TYPE_OWNER;

  /**
   * String representation of an ACL entry for
   * group "Everyone" with full access.
   */
  // this.ACL_EVERYONE_RAW;

  /**
   * ACL items for
   * group "Everyone" with full access.
   */
  // this.ACL_EVERYONE;

 };

// ---------------- API class RestoreOptions --------------------

/**
 * <p>This class contains several options for undeleting archive SORDs by <code>restoreSord</code></p>
 * <p>Copyright: Copyright (c) 2004-2006</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author Tkalec
 * @see IXServicePortIF#restoreSord IXServicePortIF.restoreSord()
 */
de.elo.ix.client.RestoreOptions = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.RestoreOptions';

  /**
   * <p><code>minIDate</code> ist the ISO representation of the local date
   * used to mark the lower limit for restoring.</p>
   */
  // this.minIDate;

  /**
   * <p><code>singleObject=true</code> restricts the operation to the specified
   * object not traversing sub trees.</p>
   */
  // this.singleObject;

 };

// ---------------- API class BackupProfile --------------------

/**
 * This class represents settings of a ELOdm backup profile.
 * @since 8.00.000.006
 */
de.elo.ix.client.BackupProfile = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.BackupProfile';

  /**
   * Backup profile name
   */
  // this.name;

  /**
   * Storage path id
   */
  // this.pathId;

  /**
   * Backup slot
   */
  // this.slot;

  /**
   * Store keywording too
   */
  // this.writeKeywording;

  /**
   * Optional SQL command to select the documents to be stored.
   */
  // this.sqlDocSelect;

  /**
   * Maximum number of documents per backup loop.
   */
  // this.nbOfDocsPerLoop;

  /**
   * Reserved
   */
  // this.retention;

 };

// ---------------- API class FindByType --------------------

/**
 * This class holds additional information for FindInfo, in order to restrict
 * a search using document types.
 * The default resolving sequence is ordered by the grade of restriction: <br>
 * 1. typeIDs, typeNames, typeExtensions is the most specialised information, <br>
 * 2. typeDocuments containing all document types (IDs, Names, Extensions), <br>
 * 3. and typeStructures including all levels of structure elements. <br>
 * 4. If none of the parameters above is valid, the complete restriction
 * FindByType is omitted. <br>
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.FindByType = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.FindByType';

  /**
   * Include all document types
   */
  // this.typeDocuments;

  /**
   * Associated document extensions; must be resolved to typeIDs
   */
  // this.typeExtensions;

  /**
   * Type identifiers; a direct mapping of objtype
   */
  // this.typeIDs;

  /**
   * Type names; must be resolved to typeIDs
   */
  // this.typeNames;

  /**
   * Include all structure elements
   */
  // this.typeStructures;

 };

// ---------------- API class CountResult --------------------

/**
 * Class for the results of one count process.
 * @author Vladov
 * @since 7.00.000.002
 */
de.elo.ix.client.CountResult = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.CountResult';

  /**
   * count of the found documents
   */
  // this.docCount;

  /**
   * count of the found structures
   */
  // this.structCount;

  /**
   * count of the found document attachments
   */
  // this.docAttachCount;

  /**
   * count of the documents in the version history
   */
  // this.docVersionsCount;

  /**
   * count of the other attachment versions
   */
  // this.otherAttachVersionsCount;

  /**
   * count of the bytes of the current document version
   */
  // this.docBytesCount;

  /**
   * count of the bytes of other document versions
   */
  // this.otherDocVersBytesCount;

  /**
   * count of the bytes of the current attachment version
   */
  // this.attBytesCount;

  /**
   * count of the bytes of other attachment versions
   */
  // this.otherAttVersBytesCount;

 };

// ---------------- API class EloFtStop --------------------

/**
 * Internal class.
 */
de.elo.ix.client.EloFtStop = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.EloFtStop';

  /**
   * DB column: stopword
   */
  // this.stopword;

 };

// ---------------- API class Activity --------------------

/**
 * This class represents an activity.
 * <p>
 * An activity is a task delegated to an instance outside the ELO system.
 * It is created when the task is sent to the instance and deleted, if it is received back.
 * An activity defines a date for expecting the response, <code>dueDateIso</code>.
 * At this date, the activity appears in the task list of the initiator. If the task is finished,
 * the initiator sets the <code>backAt</code> member and the activity is closed.
 * </p><p>
 * Activities can be used to observe a document or a folder. For each modification,
 * a ELO_NOTIFY activity is created and displayed in the task list of the user that wants to
 * observe the object.
 * </p><p>
 * An activity object is an instance on an activity project. The project defines
 * the properties the user can edit or select to provide more information to the task.
 * </p>
 * @see ActivityProject
 */
de.elo.ix.client.Activity = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.Activity';

  /**
   * Date and time of the last update.
   * Readonly
   */
  // this.TStamp;

  /**
   * Date when activity object was returned, ISO format.
   * This value does not contain a time portion.
   */
  // this.backAt;

  /**
   * Application defined purpose.
   */
  // this.backMode;

  /**
   * Comment for the activity.
   */
  // this.comment;

  /**
   * Application defined purpose.
   */
  // this.destination;

  /**
   * Date when activity object is expected to be returned.
   * This value does not contain a time portion.
   */
  // this.dueDateIso;

  /**
   * Application defined purpose.
   */
  // this.fileName;

  /**
   * GUID of the activity object.
   */
  // this.guid;

  /**
   * Short name/description of the activity object.
   */
  // this.name;

  /**
   * GUID of the assigned archive entry.
   */
  // this.objGuid;

  /**
   * Priority for the activity.
   * Priority A has value 0, UserTaskPriorityC.HIGHEST
   * Priority B has value 1.
   * Priority C has value 2, UserTaskPriorityC#LOWEST
   */
  // this.prio;

  /**
   * Project name for the activity.
   */
  // this.project;

  /**
   * The ID of the recipient.
   */
  // this.receiverId;

  /**
   * Revision version of the activity object.
   */
  // this.revVers;

  /**
   * ID of the user who created the activity.
   */
  // this.senderId;

  /**
   * Date the activity was sent in ISO format.
   * This value does not contain a time portion.
   */
  // this.sentAtIso;

  /**
   * Application defined purpose.
   */
  // this.sentMode;

  /**
   * First application defined value.
   */
  // this.ud0;

  /**
   * Second application defined value.
   */
  // this.ud1;

  /**
   * Third application defined value.
   */
  // this.ud2;

  /**
   * Fourth application defined value.
   */
  // this.ud3;

  /**
   * Fifth application defined value.
   */
  // this.ud4;

  /**
   * Sixth application defined value.
   */
  // this.ud5;

  /**
   * Seventh application defined value.
   */
  // this.ud6;

  /**
   * Eighth application defined value.
   */
  // this.ud7;

  /**
   * Ninth application defined value.
   */
  // this.ud8;

  /**
   * Tenth application defined value.
   */
  // this.ud9;

  /**
   * Activity was created for this user.
   * Readonly.
   */
  // this.receiverName;

  /**
   * Activity was created by this user.
   * Readonly.
   */
  // this.senderName;

  /**
   * Application defined value.
   */
  // this.transId;

 };

// ---------------- API class WFNodeMatrix --------------------

/**
 * <p>Stores the relationship between workflow nodes </p>
 * <p>Administers the bridges(connections) in a workflow diagram. These are
 * objects of type WorkFlowNodeAssoc.</p>
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office </p>
 * @author unbekannt
 */
de.elo.ix.client.WFNodeMatrix = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.WFNodeMatrix';

  /**
   * List of the bridges(connections)
   */
  // this.assocs;

 };

// ---------------- API class StoreInfoC --------------------

/**
 * Definition of a document path.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.StoreInfoC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.StoreInfoC';

  /**
   * No sub directories.
   */
  // this.SP_FLAT;

  /**
   * 64k documents per sub directory
   */
  // this.SP_64K;

  /**
   * 16k documents per sub directory
   */
  // this.SP_16;

  /**
   * 4k documents per sub directory
   */
  // this.SP_4K;

  /**
   * 1k documents per sub directory
   */
  // this.SP_1K;

  /**
   * 256 folders with 256 documents
   */
  // this.SP_FULL;

  /**
   * Store using MD5 hash.
   */
  // this.SP_MD5_HASH;

  /**
   * Store on CENTERA device.
   */
  // this.SP_CENTERA;

  /**
   * Store on TSM device.
   */
  // this.SP_TSM;

  /**
   * External storage definition. A physical (relative) path is specified for each document.
   */
  // this.SP_REL_FILE_PATH;

  /**
   * Store in KGS Activator.
   */
  // this.SP_ACTIVATOR;

  /**
   * Only ELO 5.0: path has been changed.
   */
  // this.FLAG_ELO5_PATH_CHANGED;

  /**
   * Only ELO 5.0: path is protected.
   */
  // this.FLAG_ELO5_PATH_PROTECTED;

  /**
   * Only ELO 5.0: no NT security.
   */
  // this.FLAG_ELO5_NO_NT_SECURITY;

  /**
   * Backup path.
   */
  // this.FLAG_BACKUP;

  /**
   * Path is read-only.
   */
  // this.FLAG_READONLY;

  /**
   * Used with FLAG_BACKUP, document files are not restored in a normal path.
   */
  // this.FLAG_NO_RESTORE;

  /**
   * Path can only be written once. DM does not use temporary files.
   */
  // this.FLAG_WORM;

 };

// ---------------- API class EloIxOpt_old --------------------

/**
 * Internal class.
 */
de.elo.ix.client.EloIxOpt_old = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.EloIxOpt_old';

  /**
   * DB column: optno
   */
  // this.optNo;

  /**
   * DB column: optval
   */
  // this.optVal;

  /**
   * DB column: remark
   */
  // this.remark;

 };

// ---------------- API class ColorDataInternC --------------------

/**
 * <p>Bit constants for members of ColorData</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 * @see ColorData
 */
de.elo.ix.client.ColorDataInternC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ColorDataInternC';

  /**
   * DB column: colorno
   */
  // this.mbId;

  /**
   * DB column: colorname
   */
  // this.mbName;

  /**
   * DB column: colorname
   */
  // this.lnName;

  /**
   * DB column: colorid
   */
  // this.mbRGB;

  /**
   * DB column: colorstatus
   */
  // this.mbStatus;

  /**
   * Member bit: GUID
   * DB column: colorguid
   */
  // this.mbGuid;

  /**
   * Column length: GUID
   * DB column: colorguid
   */
  // this.lnGuid;

  /**
   * Member bit: TStamp
   * DB column: colortstamp
   */
  // this.mbTStamp;

  /**
   * Column length: TStamp
   * DB column: colortstamp
   */
  // this.lnTStamp;

  /**
   * All valid member bits.
   */
  // this.mbAllMembers;

 };

// ---------------- API class MapItemC --------------------

/**
 * <p>Bit constants for members of MapItem</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 * @see MapItem
 */
de.elo.ix.client.MapItemC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.MapItemC';

  /**
   * DB column: mapid
   */
  // this.mbId;

  /**
   * DB column: mapid
   */
  // this.lnId;

  /**
   * DB column: mapkey
   */
  // this.mbKey;

  /**
   * DB column: mapkey
   */
  // this.lnKey;

  /**
   * DB column: mapvalue
   */
  // this.mbValue;

  /**
   * DB column: mapvalue
   */
  // this.lnValue;

  /**
   * All valid member bits.
   */
  // this.mbAllMembers;

 };

// ---------------- API class CounterInfo --------------------

/**
 * This class provides counters for use by the access manager.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.CounterInfo = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.CounterInfo';

  /**
   * Name of the counter
   */
  // this.name;

  /**
   * The current value of the counter
   */
  // this.value;

 };

// ---------------- API class AlertC --------------------

de.elo.ix.client.AlertC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.AlertC';

  /**
   * (to be defined)
   */
  // this.MASKALARM;

  /**
   * (to be defined)
   */
  // this.MASKWV;

  /**
   * (to be defined)
   */
  // this.MASKPOST;

  /**
   * (to be defined)
   */
  // this.MASKWF;

  /**
   * (to be defined)
   */
  // this.MASKSONST;

  /**
   * (to be defined)
   */
  // this.MASKVERT;

  /**
   * (to be defined)
   */
  // this.MASKWVEDMSG;

  /**
   * (to be defined)
   */
  // this.MASKWVDELMSG;

  /**
   * (to be defined)
   */
  // this.WVSEEN;

  /**
   * (to be defined)
   */
  // this.WVDELETED;

  /**
   * (to be defined)
   */
  // this.WVEDITED;

  /**
   * (to be defined)
   */
  // this.POSTMOVE;

  /**
   * (to be defined)
   */
  // this.WFSTART;

  /**
   * (to be defined)
   */
  // this.WFARRIVED;

  /**
   * (to be defined)
   */
  // this.MESSAGE;

  /**
   * (to be defined)
   */
  // this.NEWVERT;

  /**
   * (to be defined)
   */
  // this.DELVERT;

  /**
   * Alert is a message from the replication module
   */
  // this.REPLERR;

 };

// ---------------- API class ReminderDataC --------------------

/**
 * <p>Bit constants for members of Reminder</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 * @see Reminder
 */
de.elo.ix.client.ReminderDataC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ReminderDataC';

  /**
   * DB column: wvident
   */
  // this.mbId;

  /**
   * DB column: parentid
   */
  // this.mbObjId;

  /**
   * DB column: userowner
   */
  // this.mbReceiverId;

  /**
   * DB column: userfrom
   */
  // this.mbSenderId;

  /**
   * DB column: wvdate
   */
  // this.mbPromptDate;

  /**
   * DB column: createdate
   */
  // this.mbCreateDate;

  /**
   * DB column: duedate
   */
  // this.mbDueDate;

  /**
   * DB column: prio
   */
  // this.mbPrio;

  /**
   * DB column: action
   */
  // this.mbActionCode;

  /**
   * DB column: wvlock
   */
  // this.mbLockId;

  /**
   * DB column: parenttype
   */
  // this.mbObjType;

  /**
   * DB column: short
   */
  // this.mbName;

  /**
   * DB column: short
   */
  // this.lnName;

  /**
   * DB column: wvdesc
   */
  // this.mbDesc;

  /**
   * DB column: wvdesc
   */
  // this.lnDesc;

  /**
   * All valid member bits.
   */
  // this.mbAllMembers;

 };

// ---------------- API class SordHistKeyC --------------------

de.elo.ix.client.SordHistKeyC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.SordHistKeyC';

  /**
   * Entry IDs greater or equal of this value are used for Sord.name, Sord.xDate etc.
   */
  // this.ID_RESERVED_MIN;

  /**
   * Entry ID for Sord.name.
   */
  // this.ID_SORD_NAME;

  /**
   * Entry name for Sord.name.
   */
  // this.NAME_SORD_NAME;

  /**
   * Entry ID for Sord.xDate.
   */
  // this.ID_SORD_XDATE;

  /**
   * Entry name for Sord.xDate.
   */
  // this.NAME_SORD_XDATE;

  /**
   * Entry ID for Sord.desc.
   */
  // this.ID_SORD_DESC;

  /**
   * Entry name for Sord.desc.
   */
  // this.NAME_SORD_DESC;

  /**
   * Entry ID for Sord.mask.
   */
  // this.ID_DOCMASK_NAME;

  /**
   * Entry mame for Sord.name.
   */
  // this.NAME_DOCMASK_NAME;

 };

// ---------------- API class DocHistoryC --------------------

/**
 * <p>Bit constants for members of DocHistory</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 * @see DocHistory
 */
de.elo.ix.client.DocHistoryC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.DocHistoryC';

  /**
   * DB column: objectid
   */
  // this.mbObjId;

  /**
   * DB column: documentid
   */
  // this.mbDocId;

  /**
   * DB column: userid
   */
  // this.mbUser;

  /**
   * DB column: createdate
   */
  // this.mbCreateDate;

  /**
   * DB column: histcomment
   */
  // this.mbComment;

  /**
   * DB column: histcomment
   */
  // this.lnComment;

  /**
   * DB column: histversion
   */
  // this.mbVersion;

  /**
   * DB column: histversion
   */
  // this.lnVersion;

  /**
   * DB column: docmd5
   */
  // this.mbDocMD5;

  /**
   * DB column: docmd5
   */
  // this.lnDocMD5;

  /**
   * DB column: docguid
   */
  // this.mbGuid;

  /**
   * DB column: docguid
   */
  // this.lnGuid;

  /**
   * DB column: doctstamp
   */
  // this.mbTStamp;

  /**
   * DB column: doctstamp
   */
  // this.lnTStamp;

  /**
   * DB column: docsignature
   */
  // this.mbSigId;

  /**
   * DB column: docstatus
   */
  // this.mbStatus;

  /**
   * DB column: docflags
   */
  // this.mbFlags;

  /**
   * All valid member bits.
   */
  // this.mbAllMembers;

 };

// ---------------- API class DeleteActivityOptions --------------------

/**
 * This class defines options for the API function deleteActivity.
 * @see IXServicePortIF#deleteActivity(ClientInfo, String, DeleteActivityOptions, LockZ)
 * @since 8.00.012.001
 */
de.elo.ix.client.DeleteActivityOptions = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.DeleteActivityOptions';

  /**
   * Delete activity finally.
   * The database information for the activity is deleted, if this member is true.
   * Otherwise the Activity.backAt is set to the current date.
   */
  // this.deleteFinally;

 };

// ---------------- API class TranslateTermDataC --------------------

/**
 * <p>Bit constants for members of TranslateTermData</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 * @see TranslateTermData
 */
de.elo.ix.client.TranslateTermDataC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.TranslateTermDataC';

  /**
   * Member bit: GUID
   * DB column: guid
   */
  // this.mbGuid;

  /**
   * Column length: GUID
   * DB column: guid
   */
  // this.lnGuid;

  /**
   * Member bit: Timestamp.
   * Last mofified time, ISO date with dots measured in UTC
   * The format is JJJJ.MM.DD.hh.mm.ss
   * DB column: tstamp
   */
  // this.mbTStamp;

  /**
   * Column length: Timestamp.
   * Last mofified time, ISO date with dots measured in UTC
   * The format is JJJJ.MM.DD.hh.mm.ss
   * DB column: tstamp
   */
  // this.lnTStamp;

  /**
   * Member bit: Status.
   * The object is not deleted, if <code>status</code> is -1.
   * DB column: status
   */
  // this.mbStatus;

  /**
   * Member bit: Language 1. System language.
   * DB column: lang1
   */
  // this.mbLang1;

  /**
   * Column length: Language 1. System language.
   * DB column: lang1
   */
  // this.lnLang1;

  /**
   * Member bit: Language 2
   * DB column: lang2
   */
  // this.mbLang2;

  /**
   * Column length: Language 2
   * DB column: lang2
   */
  // this.lnLang2;

  /**
   * Member bit: Language 3
   * DB column: lang3
   */
  // this.mbLang3;

  /**
   * Column length: Language 3
   * DB column: lang3
   */
  // this.lnLang3;

  /**
   * Member bit: Language 4
   * DB column: lang4
   */
  // this.mbLang4;

  /**
   * Column length: Language 4
   * DB column: lang4
   */
  // this.lnLang4;

  /**
   * Member bit: Language 5
   * DB column: lang5
   */
  // this.mbLang5;

  /**
   * Column length: Language 5
   * DB column: lang5
   */
  // this.lnLang5;

  /**
   * Member bit: Language 6
   * DB column: lang6
   */
  // this.mbLang6;

  /**
   * Column length: Language 6
   * DB column: lang6
   */
  // this.lnLang6;

  /**
   * Member bit: Language 7
   * DB column: lang7
   */
  // this.mbLang7;

  /**
   * Column length: Language 7
   * DB column: lang7
   */
  // this.lnLang7;

  /**
   * Member bit: Language 8
   * DB column: lang8
   */
  // this.mbLang8;

  /**
   * Column length: Language 8
   * DB column: lang8
   */
  // this.lnLang8;

  /**
   * Member bit: Language 9
   * DB column: lang9
   */
  // this.mbLang9;

  /**
   * Column length: Language 9
   * DB column: lang9
   */
  // this.lnLang9;

  /**
   * All valid member bits.
   */
  // this.mbAllMembers;

 };

// ---------------- API class SordC --------------------

/**
 * <p>Constants for indexing information. Each member of this class with prefix
 * "mb" has a corresponding member in class <code>Sord</code></p>
 * @author imw
 * @see Sord Sord
 */
de.elo.ix.client.SordC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.SordC';

  /**
   * ACL in a human readable format.
   */
  // this.mbAclItems;

  /**
   * Replication set.
   */
  // this.mbReplSet;

  /**
   * Replication set names.
   */
  // this.mbReplNames;

  /**
   * Index lines.
   */
  // this.mbObjKeys;

  /**
   * Version information of the current document work version.
   */
  // this.mbDocVersionMembers;

  /**
   * Return the content of a "small" document in <code>DocVersion.fileData</code>.
   * Using this option, an explicit
   * download of the document from <code>DocVersion.url</code> is obsoloete.
   * Reading small documents is up to 3 times faster this way.
   * The IX configuration defines the maximum size of a
   * "small" document (e. g. less than 100KB).
   */
  // this.mbSmallDocumentContent;

  /**
   * Detects whether there is a preview for a given document availiable.
   */
  // this.mbPreview;

  /**
   * Set this option to return the physical path of the document in the DocVersion object.
   * This Option requires always a request to Document Manager.
   */
  // this.mbPhysPath;

  /**
   * GUIDs of parents that reference <code>this</code>
   */
  // this.mbParentIds;

  /**
   * GUIDs of linked archive entries.
   */
  // this.mbLinks;

  // this.mbRefPaths;

  /**
   * Member bit for Sord.attVersion
   */
  // this.mbAttVersionMembers;

  // this.mbIDateIso;

  // this.mbXDateIso;

  // this.mbDelDateIso;

  // this.mbDeleted;

  // this.mbDetails;

  // this.mbDocVersion;

  // this.mbHiddenText;

  // this.mbLinksComeIn;

  // this.mbLinksGoOut;

  // this.mbOwnerName;

  /**
   * Description and Hidden Text
   */
  // this.mbDesc;

  /**
   * This members are read-only and ignored in checkinSord
   */
  // this.mbReadOnlyMembers;

  /**
   * This members are write-only and were not read in checkoutSord, checkoutDoc, findFirstSords.
   * mbSDesc, mbSName
   */
  // this.mbWriteOnlyMembers;

  /**
   * Length of description + hidden text
   */
  // this.lnDesc;

  /**
   * All members - without mbSmallDocumentContent
   */
  // this.mbAllMembers;

  /**
   * Includes:
   * ObjDataC.mbAllMembers with mbAclItems, mbObjKeys
   */
  // this.mbLeanMembers;

  /**
   * Includes:
   * mbLeanMembers without mbObjKeys
   */
  // this.mbMinMembers;

  /**
   * <code>Sord</code> objects with type greater or equal than
   * <code>LBT_DOCUMENT</code> and less or equal than
   * <code>LBT_DOCUMENT_MAX</code> are documents.
   */
  // this.LBT_DOCUMENT;

  /**
   * <code>Sord</code> objects with type greater or equal than
   * <code>LBT_DOCUMENT</code> and less or equal than
   * <code>LBT_DOCUMENT_MAX</code> are documents.
   */
  // this.LBT_DOCUMENT_MAX;

  /**
   * There is one <code>Sord</code> object inside the archive database with ID 1.
   * It contains some archive configuration and has this type:
   */
  // this.LBT_ARCHIVE;

  /**
   * Implementation detail: This flag is added to the object ID in the table
   * "dochistory" to differentiate between documents and attachments.
   */
  // this.ATTACHMENT_FLAG_IN_DOCHISTORY;

  /**
   * All members
   * without
   * mbSmallDocumentContent
   * mbPreview
   */
  // this.mbAll;

  /**
   * Lean members
   */
  // this.mbLean;

  /**
   * All members
   * without
   * mbSmallDocumentContent
   * mbPreview
   * mbDocVersionMembers
   * mbRefPaths
   * mbAttVersionMembers
   */
  // this.mbAllIndex;

  /**
   * Minimum members.
   */
  // this.mbMin;

  /**
   * Includes only <code>Sord.id</code>
   */
  // this.mbOnlyId;

  /**
   * Includes only <code>Sord.guid</code>
   */
  // this.mbOnlyGuid;

  /**
   * Do not store/read any members. Evaluate the lock flag only.
   */
  // this.mbOnlyLock;

  /**
   * Same as mbOnlyLock
   */
  // this.mbOnlyUnlock;

  /**
   * Includes:
   * mbMinMembers,
   * mbDocVersionMembers,
   * mbPreview
   */
  // this.mbMinDocVersion;

  /**
   * Includes:
   * mbAllMembers,
   * mbSmallDocumentContent
   * without
   * mbPreview
   */
  // this.mbCheckout;

  /**
   * Includes:
   * mbAllMembers,
   * mbSmallDocumentContent,
   * mbPreview
   */
  // this.mbCheckoutPreview;

  /**
   * The objdesc column in the database is splitted into a visible and an
   * invisible part. This constant is the delimiter between them.
   */
  // this.DESC_DELIM;

  /**
   * GUID of folder "Replication Base"
   */
  // this.GUID_REPLICATION_BASE;

  /**
   * GUID of folder "Scripting Base"
   */
  // this.GUID_SCRIPTING_BASE;

  /**
   * GUID of folder "IndexServer Scripting Base"
   */
  // this.GUID_IX_SCRIPTING_BASE;

  /**
   * GUID of folder "Administration". This folder contains "Replication Base", "Scripting Base" etc.
   */
  // this.GUID_ADMINISTRATION_BASE;

  /**
   * Archive folder /Administration/COLD Background Images
   */
  // this.GUID_COLD_BACKGROUND_IMAGES;

  /**
   * Archive folder /Administration/ELOscripts, VB scripts for Windows Client.
   */
  // this.GUID_WIN_SCRIPTING_BASE;

  /**
   * Archive folder that contains the icons for the workflow nodes.
   */
  // this.GUID_WORKFLOW_ICONS_BASE;

  /**
   * Object-GUID of icon file for begin node.
   */
  // this.GUID_WFNODE_ICON_BEGINNODE;

  /**
   * Object-GUID of icon file for person node.
   */
  // this.GUID_WFNODE_ICON_PERSONNODE;

  /**
   * Object-GUID of icon file for decision node.
   */
  // this.GUID_WFNODE_ICON_IFNODE;

  /**
   * Object-GUID of icon file for collect node.
   */
  // this.GUID_WFNODE_ICON_COLLECTNODE;

  /**
   * reserved
   */
  // this.GUID_WFNODE_ICON_TERMINATE;

  /**
   * Object-GUID of icon file for cycle node.
   */
  // this.GUID_WFNODE_ICON_CYCLE_BEGIN;

  /**
   * Object-GUID of icon file for cycle node.
   */
  // this.GUID_WFNODE_ICON_CYCLE_END;

  /**
   * Object-GUID of icon file for server node.
   */
  // this.GUID_WFNODE_ICON_SET_SERVER_ID;

  /**
   * Object-GUID of icon file for split node.
   */
  // this.GUID_WFNODE_ICON_SPLITNODE;

 };

// ---------------- API class SearchTermsC --------------------

de.elo.ix.client.SearchTermsC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.SearchTermsC';

  // this.TERMS;

  // this.SYNONYMS;

  // this.CORRECTION;

 };

// ---------------- API class FindInfo --------------------

/**
 * This class controls the search function findFirstSords.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.FindInfo = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.FindInfo';

  /**
   * If not null the results are constrained to documents including this
   * fulltext term (or terms).
   */
  // this.findByFulltext;

  /**
   * Terms for google-like search in Java-Client.
   */
  // this.findDirect;

  /**
   * If not null the function searches through the indexing information.
   */
  // this.findByIndex;

  /**
   * If not null the function searches through the notes. (NOT CURRENTLY IMPLEMENTED!)
   */
  // this.findByNotes;

  /**
   * If not null the function searches in versioning history of indexing information.
   */
  // this.findBySordHist;

  /**
   * If not null the function searches using objtype.
   */
  // this.findByType;

  /**
   * If not null the function searches using histversion and histcomment.
   */
  // this.findByVersion;

  /**
   * If not null, the results are constrained to child entries of the
   * specified parent in this object. To retrieve child lists for an archive
   * entry this member must be set with the related parent ID and
   * all others members in this class must be null.
   */
  // this.findChildren;

  /**
   * This member controls several options, e. g. sorting, time limitation.
   */
  // this.findOptions;

  /**
   * Find sords by ACL.
   */
  // this.findByAcl;

  /**
   * Find sords by preview control information.
   */
  // this.findByPreviewCtrl;

  /**
   * Find the sords that have to be indexed by the fulltext engine.
   */
  // this.findByFulltextCtrl;

  // this.findByRegisteredFunction;

 };

// ---------------- API class HttpResponseInfo --------------------

/**
 * This class contains information for the HttpServletResponse object to be sent by the Indexserver servlet.
 * @since 8.00.012.002
 */
de.elo.ix.client.HttpResponseInfo = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.HttpResponseInfo';

  /**
   * Content type header.
   * HttpServletResponse.setContentType()
   */
  // this.contentType;

  /**
   * Response text.
   * Written to -> HttpServletResponse.getOutputStream()
   */
  // this.responseString;

 };

// ---------------- API class ServerInfoDM --------------------

/**
 * This class contains infomation about the filing paths of the document manager (DM).
 * @see IXServicePortIF#setServerInfo(ClientInfo, ServerInfo)
 * @since 7.00.040.025
 */
de.elo.ix.client.ServerInfoDM = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ServerInfoDM';

  /**
   * IDs of the paths to be used for filing docments. The first path ID is the ID of the default
   * filing path. This array can contain up to 4 elements.
   */
  // this.basisStoreIds;

  /**
   * reserved.
   */
  // this.backupStoreIds;

  /**
   * ID of restore path.
   */
  // this.restoreStoreId;

  /**
   * Mode to be used to fill the filing paths. This value is a bitset of the
   * ServerInfoDMC.STOREMODE_* constants.
   */
  // this.storeMode;

  /**
   * DM proxy mode. Read-only.
   * <table>
   * <tr>
   * <td>-1</td>
   * <td>Proxy mode is not active</td>
   * </tr>
   * <tr>
   * <td>0</td>
   * <td>Main instance</td>
   * </tr>
   * <tr>
   * <td>&gt;0</td>
   * <td>Branch instance</td>
   * </tr>
   * </table>
   */
  // this.proxyMode;

  /**
   * DM is enabled for blackening of document parts.
   */
  // this.blackeningEnabled;

 };

// ---------------- API class FindDirectC --------------------

/**
 * Constants used in class FindDirect
 * @see FindDirect
 */
de.elo.ix.client.FindDirectC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.FindDirectC';

  /**
   * ELO iSearch field: descripton (memo text, Sord.desc)
   */
  // this.FIELD_DESC;

  /**
   * ELO iSearch field: document file extension without leading dot (DocVersion.ext)
   */
  // this.FIELD_EXT;

  /**
   * ELO iSearch field: owner name (Sord.ownerName)
   */
  // this.FIELD_OWNER;

  /**
   * ELO iSearch field: last modified time stamp, UTC (Sord.tStamp)
   */
  // this.FIELD_TSTAMP;

  /**
   * ELO iSearch field: GUID (Sord.guid)
   */
  // this.FIELD_GUID;

  /**
   * ELO iSearch field: ID (Sord.id)
   */
  // this.FIELD_ID;

  /**
   * ELO iSearch field: ISO formatted delete date, UTC (Sord.delDateIso)
   */
  // this.FIELD_DELDATE;

  /**
   * ELO iSearch field: Year of delete date, UTC (Sord.delDateIso)
   */
  // this.FIELD_DELDATE_YEAR;

  /**
   * ELO iSearch field: Month of delete date, UTC (Sord.delDateIso), always 2 characters, e.g. 01 for January.
   */
  // this.FIELD_DELDATE_MONTH;

  /**
   * ELO iSearch field: ISO formatted archiving date, UTC (Sord.iDateIso)
   */
  // this.FIELD_IDATE;

  /**
   * ELO iSearch field: Year of archiving date, UTC (Sord.iDateIso)
   */
  // this.FIELD_IDATE_YEAR;

  /**
   * ELO iSearch field: Month of archiving date, UTC (Sord.iDateIso), always 2 characters, e.g. 01 for January.
   */
  // this.FIELD_IDATE_MONTH;

  /**
   * ELO iSearch field: ISO formatted document date, UTC (Sord.xDateIso)
   */
  // this.FIELD_XDATE;

  /**
   * ELO iSearch field: Year of document date, UTC (Sord.xDateIso)
   */
  // this.FIELD_XDATE_YEAR;

  /**
   * ELO iSearch field: Month of document date, UTC (Sord.xDateIso), always 2 characters, e.g. 01 for January.
   */
  // this.FIELD_XDATE_MONTH;

  /**
   * ELO iSearch field: Keywording form ID, (Sord.mask)
   */
  // this.FIELD_MASK_ID;

  /**
   * ELO iSearch field: Keywording form name, (Sord.maskName)
   */
  // this.FIELD_MASK_NAME;

  /**
   * ELO iSearch field: short description (Sord.name)
   */
  // this.FIELD_NAME;

  /**
   * ELO iSearch field: owner ID (Sord.ownerId)
   */
  // this.FIELD_OWNER_ID;

  /**
   * ELO iSearch field: folder or document type (Sord.type)
   */
  // this.FIELD_TYPE;

  /**
   * ELO iSearch field: group name of index field (Sord.objKey[.].name, DocMask.line[.].key)
   */
  // this.FIELD_OBJ_KEY;

  /**
   * ELO iSearch field: group name of index field (Sord.objKey[.].name, DocMask.line[.].key)
   * This field contains tokenized content (linguistic processing applied)
   */
  // this.FIELD_OBJ_KEY_TOKENIZED;

 };

// ---------------- API class ReportC --------------------

/**
 * <p>Bit constants for members of ReportInfo</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 * @see ReportInfo
 */
de.elo.ix.client.ReportC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ReportC';

  /**
   * DB column: reportid
   */
  // this.mbId;

  /**
   * DB column: reportid
   */
  // this.lnId;

  /**
   * DB column: actionno
   */
  // this.mbActionNo;

  /**
   * DB column: userid
   */
  // this.mbUserId;

  /**
   * DB column: acttime
   */
  // this.mbActTime;

  /**
   * DB column: docid
   */
  // this.mbObjId;

  /**
   * DB column: extra1
   */
  // this.mbExtra1;

  /**
   * DB column: extra2
   */
  // this.mbExtra2;

  /**
   * DB column: sessionno
   */
  // this.mbSessionNo;

  /**
   * DB column: addtext
   */
  // this.mbText;

  /**
   * DB column: addtext
   */
  // this.lnText;

  /**
   * All valid member bits.
   */
  // this.mbAllMembers;

 };

// ---------------- API class UserTaskSortOrderZ --------------------

/**
 * This class encapsulates the constants of the UserTaskSortOrderC class.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.UserTaskSortOrderZ = function() { 
  return new de.elo.ix.client.LongBitset("de.elo.ix.client.UserTaskSortOrderZ", arguments);
 };

// ---------------- API class SordHistKey --------------------

/**
 * This class provides the version information for a keywording attribute
 * that has been modified.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.SordHistKey = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.SordHistKey';

  /**
   * GUID of the assigned SordHist object.
   */
  // this.histGuid;

  /**
   * Value of dat of the attribute.
   */
  // this.keyData;

  /**
   * Name of the attribute.
   */
  // this.keyName;

  /**
   * ID of the attribute.
   */
  // this.keyNo;

 };

// ---------------- API class UserTaskSortOrderC --------------------

de.elo.ix.client.UserTaskSortOrderC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.UserTaskSortOrderC';

  // this.bsetPRIORITY_DATE_NAME;

  // this.bsetDATE_PRIORITY_NAME;

  // this.bsetNAME_PRIORITY_DATE;

  /**
   * Order collected tasks by priority, date and NAME.
   */
  // this.PRIORITY_DATE_NAME;

  /**
   * Order collected tasks by date, priority and NAME.
   */
  // this.DATE_PRIORITY_NAME;

  /**
   * Order collected tasks by NAME, priority, date.
   */
  // this.NAME_PRIORITY_DATE;

 };

// ---------------- API class IndexServerForArchive --------------------

/**
 * <p>Association between IndexServer URL and archive name.</p>
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH </p>
 * @author imw
 */
de.elo.ix.client.IndexServerForArchive = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.IndexServerForArchive';

  /**
   * Archive name.
   */
  // this.arcName;

  /**
   * Index Server URL.
   */
  // this.url;

 };

// ---------------- API class WFTakeNodeC --------------------

/**
 * Constant class for controlling the taking over(passing to another user) of a workflow object.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @see IXServicePortIF#takeWorkFlowNode IXServicePortIF.takeWorkFlowNode(...)
 */
de.elo.ix.client.WFTakeNodeC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.WFTakeNodeC';

  /**
   * Standard action. Neither WFNode.department2 nor WFNode.inUseDateIso are returned.
   */
  // this.DEFAULT;

  /**
   * WFNode.department2 is set when the node is taken over by another user.
   */
  // this.RESET_DEPARTMENT2;

  /**
   * WFNode.inUseDateIso is set when the node is taken over by another user.
   */
  // this.RESET_IN_USE_DATE;

 };

// ---------------- API class UserProfileC --------------------

/**
 * The constants in this class exist due to compatibility requirements with
 * older Index Server versions, which gave back formatted data (Sord.xDataDispl).
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.UserProfileC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.UserProfileC';

  // this.DATE_FORMAT;

  // this.SORD_DATE_FORMAT;

  // this.SORD_IDATE_FORMAT;

  // this.SORD_XDATE_FORMAT;

  // this.SORD_DELDATE_FORMAT;

  // this.DOC_VERSION_DATE_FORMAT;

  // this.DOC_VERSION_CREATE_FORMAT;

  // this.DOC_VERSION_ACCESS_FORMAT;

  // this.DOC_VERSION_UPDATE_FORMAT;

  /**
   * Read/write user profile options for all users.
   */
  // this.USERID_ALL;

  /**
   * Extended access control for documents or folders used in workflows.
   * <p>
   * There are two concepts of extending access control for folders and documents routed though a workflow.
   * The rules are only applied if (a) the current user has an active workflow task for the folder or document and
   * (b) the right AccessC.FLAG2_EXTEND_WORKFLOW_RIGHTS is assigned to the current user.
   * </p><p>
   * 1. Overlay additional access rights over the objects ACL: the lower 8 bits of the keys value
   * specify a combination of AccessC.LUR_* constants that are added to the ACL access rights when access checking is performed.
   * The objects ACL is not modified, this rule only changes the internal program logic.
   * </p><p>
   * 2. Permanently add additional access to the ACL: the higher 8 bits of the keys value
   * specify a combination of AccessC.LUR_* constants for a new ACL entry to be added for the current user.
   * The ACL is only extended, if checkoutSord or checkoutDoc detects less access for the current user.
   */
  // this.KEY_EXTEND_DOCUMENT_ACCESS_IN_WORKFLOW;

  /**
   * Maximum length of key
   */
  // this.lnKey;

  /**
   * Maximum length of value
   */
  // this.lnValue;

 };

// ---------------- API class ObjKey --------------------

/**
 * This class wraps the ObjKeyData class to provide a convenient way to access
 * the index lines that have multiple columns. Unlike ObjKeyData the getData and
 * setData functions work with String arrays inspite of single String objects.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 */
de.elo.ix.client.ObjKey = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ObjKey';

  /**
   * Internal data array.
   * The values can be translated into resp. from the system language, if
   * <code>SessionOptionsC.TRANSLATE_TERMS</code> is set and the corresponding
   * <code>DocMaskLine</code> has set the property <code>translate</code>.
   */
  // this.data;

  /**
   * ID of the index line
   */
  // this.id;

  /**
   * The group name of the index line
   */
  // this.name;

  /**
   * The ELO object ID this object belongs to
   */
  // this.objId;

 };

// ---------------- API class WFDiagram --------------------

/**
 * This class represents an active or finished workflow or a workflow template
 */
de.elo.ix.client.WFDiagram = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.WFDiagram';

  /**
   * Access control list in the internal format. It defines who is able to edit
   * the workflow. This member is only valid for workflow templates.
   */
  // this.acl;

  /**
   * Access control list in a more convenient format than member acl.
   * It defines who is able to edit
   * the workflow. This member is only valid for workflow templates.
   */
  // this.aclItems;

  /**
   * Date of completion in ISO format.
   */
  // this.completionDateIso;

  /**
   * Flag that indicates whether the workflow template is deleted.
   * Only valid for template workflows.
   */
  // this.deleted;

  /**
   * Workflow ID.
   */
  // this.id;

  /**
   * The ID of the user who has currently locked the workflow.
   */
  // this.lockId;

  /**
   * The name of the user who has currently locked the workflow.
   */
  // this.lockName;

  /**
   * Node matrix.
   */
  // this.matrix;

  /**
   * Workflow name.
   */
  // this.name;

  /**
   * Array of nodes.
   */
  // this.nodes;

  /**
   * ID or GUID of the associated folder or document object.
   * checkoutWorkFlow will always return the numeric object ID in this field.
   * checkinWorkFlow is able to receive a GUID too.
   */
  // this.objId;

  /**
   * Sord type of the associated folder or document.
   */
  // this.objType;

  /**
   * ID of the user who has started the workflow.
   */
  // this.ownerId;

  /**
   * Name of the user who has started the workflow.
   */
  // this.ownerName;

  /**
   * Workflow priortiy: 0...high, 1...medium, 2...low.
   */
  // this.prio;

  /**
   * Date of start in ISO format.
   */
  // this.startDateIso;

  /**
   * The workflow was started based on this workflow template. This member is
   * only valid for active and finished workflows.
   */
  // this.templateId;

  /**
   * The workflow was started based on the workflow template with this name. This member is
   * only valid for active and finished workflows.
   */
  // this.templateName;

  /**
   * Time-limit for the entire workflow in minutes.
   */
  // this.timeLimit;

  /**
   * The entire workflow should be finished by this date.
   * Otherwise the time-limit is exceeded. This member is only valid for active
   * and finished workflows.
   * Read-only.
   */
  // this.timeLimitIso;

  /**
   * The ID of the user that should be informed,if the time-limit for the
   * workflow is exceeded.
   * The IndexServer does not send any notification to the
   * user. The client application is responsible for doing this.
   */
  // this.timeLimitUserId;

  /**
   * The name of the user that should be informed, if the time-limit is exceeded.
   * When writing a workflow with checkinWorkFlow, this value has preceedence
   * before timeLimitUserId. Set timeLimitUserName to an empty string, if
   * timeLimitUserId should be used.
   */
  // this.timeLimitUserName;

  /**
   * Typeof template: template, active or finished.
   */
  // this.type;

  /**
   * True, if the workflow exceeds the time limit.
   * Read-only.
   */
  // this.overTimeLimit;

  /**
   * Flags of the begin node.
   * This value is a combination of the node flags suitable to begin nodes,
   * e. g. WFNodeC.FLAG_WORKINGDAYS.
   * To ensure compatibility with older client programs,
   * the WFNode.flags of the start node are or-ed with the WFDiagram.flags.
   */
  // this.flags;

  /**
   * Access rights to the object for the current user.
   * A combination of LUR_* constants.
   * Read-only.
   */
  // this.access;

  /**
   * Only templates: version information.
   */
  // this.version;

  /**
   * GUID
   */
  // this.guid;

  /**
   * TStamp
   */
  // this.tStamp;

  /**
   * If not empty, the workflow can only be continued on
   * this server (resp. replication branch).
   * The current server ID can be read by getServerInfo().
   * This member is only valid for ACTIVE or FINISHED workflows.
   */
  // this.processOnServerId;

  /**
   * Additional definitions for time limits.
   */
  // this.timeLimitEscalations;

  /**
   * Sord name. Readonly.
   */
  // this.objName;

 };

// ---------------- API class Reminder --------------------

de.elo.ix.client.Reminder = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.Reminder';

  /**
   * Memo text
   */
  // this.desc;

  /**
   * Reminder ID
   */
  // this.id;

  /**
   * ID of user who has locked the reminder record in DB
   */
  // this.lockId;

  /**
   * Short description visible in the task list.
   */
  // this.name;

  /**
   * Reminder is linked to this Sord.
   */
  // this.objId;

  /**
   * Sord type.
   */
  // this.objType;

  /**
   * Priority: 0...high, 1...medium, 2...low
   */
  // this.prio;

  /**
   * Reminder was created for this user.
   */
  // this.receiverId;

  /**
   * Reminder was created by this user.
   */
  // this.senderId;

  /**
   * Reminder was created at this date.
   */
  // this.createDateIso;

  /**
   * Reminder is deleted logically if set. Read-only.
   */
  // this.deleted;

  /**
   * On this date the receiver has seen the reminder.
   */
  // this.dueDateIso;

  /**
   * Reminder is locked by this user.
   */
  // this.lockName;

  /**
   * Notify sender if receiver deletes the reminder.
   */
  // this.notifyOnDelete;

  /**
   * Notify sender if receiver views the reminder.
   */
  // this.notifyOnView;

  /**
   * Sord GUID.
   */
  // this.objGuid;

  /**
   * At this Date the instruction of the reminder should be accomplished by receiver.
   */
  // this.promptDateIso;

  /**
   * Reminder was created for this user.
   */
  // this.receiverName;

  /**
   * Reminder was created by this user.
   */
  // this.senderName;

 };

// ---------------- API class NoteImage --------------------

/**
 * This class contains additional information for image stamps.
 * @see Note
 * @since 7.00.000.023
 */
de.elo.ix.client.NoteImage = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.NoteImage';

  /**
   * Image file name.
   */
  // this.fileName;

  /**
   * Image file content.
   * Read only.
   */
  // this.fileData;

 };

// ---------------- API class ContextTerm --------------------

de.elo.ix.client.ContextTerm = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ContextTerm';

  // this.term;

  // this.docNum;

 };

// ---------------- API class FindByFulltext --------------------

/**
 * Performs a fulltext search.
 * It depends on the system configuration, which fulltext engine is used.
 * The returned list of sords might contain sords with sord.id=0 and no
 * further data. This happens when the fulltext engine retuns a sord but
 * the current user does not have read access.
 */
de.elo.ix.client.FindByFulltext = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.FindByFulltext';

  /**
   * Search term to be located in the fulltext database.
   * Can be a single word or a number of words.
   * Wildcard * is allowed, it matches any number of characters. Term is
   * interpreted based on the options given by FindOptions in FindInfo.
   * Exception: FindOptionsC.ONE_TERM is not supported.
   */
  // this.term;

 };

// ---------------- API class ObjKeyData --------------------

/**
 * <p>Internal use.</p>
 */
de.elo.ix.client.ObjKeyData = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ObjKeyData';

  /**
   * DB column: parentid
   */
  // this.objId;

  /**
   * DB column: okeyno
   */
  // this.id;

  /**
   * DB column: okeyname
   */
  // this.name;

  /**
   * DB column: okeydata
   */
  // this.data;

  /**
   * DB column: okeyudata
   */
  // this.udata;

  /**
   * DB column: okeysdata
   */
  // this.sdata;

 };

// ---------------- API class ReplSetName --------------------

/**
 * Properties of a replication set.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.ReplSetName = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ReplSetName';

  /**
   * Timestamp of the last change.
   * The format is JJJJ.MM.DD.hh.mm.ss
   */
  // this.TStamp;

  /**
   * Descriptive text for the replication set.
   */
  // this.desc;

  /**
   * Identifier for the replication set.
   */
  // this.id;

  /**
   * Image used for the replication set in list function in the client application.
   */
  // this.image;

  /**
   * Replication set is used for archive synchronisation(ELO MOBIL).
   */
  // this.mobile;

  /**
   * Name of the replication set.
   */
  // this.name;

 };

// ---------------- API class FindOptions --------------------

/**
 * This class contains several options to control the search process of
 * findFirstSords.
 * @see IXServicePortIF#findFirstSords IXServicePortIF_Stub.findFirstSords(...)
 * @see FindInfo FindInfo
 */
de.elo.ix.client.FindOptions = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.FindOptions';

  /**
   * SQL escape character. Overwrites the character that can be specified
   * by setSessionOptions.
   */
  // this.escapeChar;

  /**
   * Include logically deleted objects.
   */
  // this.inclDeleted;

  /**
   * Restricts the results to objects with these IDs or GUIDs.
   */
  // this.objIds;

  /**
   * An SQL ORDER BY clause can be provided here, if required.
   */
  // this.orderBy;

  /**
   * Range values can be used to search many index and date attribute values.
   * The delimiter between the lower limit and upper limit value is defined
   * by rangeDelimiter. The default rangeDelimiter is "...".
   */
  // this.rangeDelimiter;

  /**
   * Results are returned only for objects that reside in this replication set.
   */
  // this.replSet;

  /**
   * This value is reserved for internal testing purposes and must be set
   * to 0  in all cases.
   */
  // this.reserved;

  /**
   * Restricts the results to objects returned by a previous search.
   */
  // this.searchId;

  /**
   * The searchMode describes how search terms are concatinated with the
   * boolean operators AND or OR.
   */
  // this.searchMode;

  /**
   * Defines the sort order of the results.
   * If sortOrder is 0 and the search process searches for child objects
   * (FindInfo.findChildren!=null), the objects are sorted by the sort flags
   * of the parent.
   * If sortOrder is 0 and the search uses FindInfo.findByIndex, the
   * objects are sorted alphabetically.
   */
  // this.sortOrder;

  /**
   * Specifies the time limit for the search. If the limit is exceeded, the
   * search is interruped. If the search is not to have a time limit
   * timeoutSeconds=0 must be used.
   */
  // this.timeoutSeconds;

  /**
   * The search is terminated if this number of objects are found.
   * If the number of results should not be constrained, set this value to
   * 2^32-1 = 2147483647 (maximum value of a positive 32bit integer minus 1).
   * If totalCount is not set, the IndexServer option totalCount is used,
   * which is 10000 by default.
   */
  // this.totalCount;

  /**
   * Compute the number of results.
   * The number of results are returned in FindResult.count.
   * Be aware of the fact that
   * this option needs to read all database result rows and check user access
   * before findFirstSords returns.
   */
  // this.evalCount;

  /**
   * Only logically deleted objects.
   * If this member is true, inclDeleted is ignored.
   */
  // this.onlyDeleted;

  /**
   * Return objects that were last modified at this time or in this time range.
   * The time stamp is an ISO formatted value in the UTC timezone. It might include dots
   * to separate the date and time elements. A time range is separated by the <code>rangeDelimiter</code>.
   * The selection includes the range limits.
   * Because the FindOptions cannot be the only criteria in FindInfo, use FindByIndex.name="*" to
   * select over the entire archive.
   */
  // this.TStamp;

  /**
   * This characters are used as wildcards in search terms.
   * The first wildcard is used for zero or more characters.
   * The second wildcard is used for exactly one character.
   * By default (if this member is null or empty), only the first wildcard is defined: *.
   */
  // this.wildcards;

  /**
   * Lock all result Sords.
   * If at least one of the sords cannot be locked, an exception is thrown from findFirstSords.
   * Be aware of the fact that
   * this option needs to read all database result rows and check user access.
   * The objects are unlocked by a call to findClose.
   */
  // this.lockZ;

 };

// ---------------- API class WorkFlowHead --------------------

/**
 * Helperclass to access the DB table workflowtemplhead, workflowactivedochead, ...
 * @author Imig
 * @since 7.00.000.010
 */
de.elo.ix.client.WorkFlowHead = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.WorkFlowHead';

  /**
   * Workflow ID
   */
  // this.flowId;

  /**
   * Timestamp
   * The format is JJJJ.MM.DD.hh.mm.ss
   */
  // this.tStamp;

  /**
   * GUID
   */
  // this.guid;

  /**
   * Status, != 0 means deleted
   */
  // this.status;

  /**
   * Workflow type.
   */
  // this.type;

  /**
   * The current sever ID (resp. replication branch) where the
   * workflow can be condinued.
   */
  // this.actServerId;

 };

// ---------------- API class ObjKeyC --------------------

/**
 * <p>Constants for the ObjKey class.</p>
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 */
de.elo.ix.client.ObjKeyC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ObjKeyC';

 };

// ---------------- API class NoteTemplateDataC --------------------

/**
 * <p>Bit constants for members of NoteTemplate</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 * @see NoteTemplate
 */
de.elo.ix.client.NoteTemplateDataC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.NoteTemplateDataC';

  /**
   * DB column: userid
   */
  // this.mbUserIdInt;

  /**
   * DB column: optkey
   */
  // this.mbOptKey;

  /**
   * DB column: optkey
   */
  // this.lnOptKey;

  /**
   * DB column: optvalue
   */
  // this.mbOptValue;

  /**
   * DB column: optvalue
   */
  // this.lnOptValue;

  /**
   * All valid member bits.
   */
  // this.mbAllMembers;

 };

// ---------------- API class ProcessInfoC --------------------

/**
 * Constants class for the ProcessInfo class.
 * 
 * Errors:
 * The error modes are ordered by increasing failure tolerance. In most cases a tree walk will traverse nodes in prefix mode
 * except scripts, that may have an user defined processing position, so the operational success of a given node directly
 * influences further processing. ERRORMODE_ALL, the zero failure tolerance, stops the job (nearly) immediately, while
 * ERRORMODE_SKIP_SUBTREE just skips subtree traversals, but continues with lists or siblings. If you pass ERRORMODE_SKIP_PROCINFO
 * the sequence of ProcessInfo members will be executed completely, whether errors occur or not. The most tolerant mode is
 * ERRORMODE_SKIP_PROCINFO where only errors impeding further traversing stop the job.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author tkalec
 * @see ProcessInfo
 */
de.elo.ix.client.ProcessInfoC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ProcessInfoC';

  /**
   * Do not filter by SORD status.
   */
  // this.DELSTATUS_ALL;

  /**
   * filter ony deleted SORDs.
   */
  // this.DELSTATUS_DELETED;

  /**
   * Filter only undeleted SORDs.
   */
  // this.DELSTATUS_VALID;

  /**
   * Processing will be stopped when an error occurs, regardless of the error type.
   */
  // this.ERRORMODE_ALL;

  /**
   * Stop only on non-recoverable errors.
   */
  // this.ERRORMODE_CRITICAL_ONLY;

  /**
   * Stop the ProcessInfo sequence for the current Node.
   */
  // this.ERRORMODE_SKIP_PROCINFO;

  /**
   * Stop the subtree processing (processTrees only), but continue with list
   * elements respectively siblings.
   */
  // this.ERRORMODE_SKIP_SUBTREE;

  /**
   * Maximum allowed amount of error messages.
   */
  // this.PROCMSGMAX;

 };

// ---------------- API class PhysDelDocsC --------------------

/**
 * <p>Bit constants for members of PhysDelDocs</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 * @see PhysDelDocs
 */
de.elo.ix.client.PhysDelDocsC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.PhysDelDocsC';

  /**
   * DB column: objid
   */
  // this.mbObjId;

  /**
   * All valid member bits.
   */
  // this.mbAllMembers;

 };

// ---------------- API class License --------------------

/**
 * <p>This class contains license information.</p>
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 */
de.elo.ix.client.License = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.License';

  /**
   * Backup enabled.
   */
  // this.backup;

  /**
   * COLD
   */
  // this.cold;

  /**
   * Demo version.
   */
  // this.demoVersion;

  /**
   * Dispatch folder (Versendemappe)
   */
  // this.dispatchFolder;

  /**
   * DOMEA
   */
  // this.domea;

  /**
   * EMail
   */
  // this.emailOnly;

  /**
   * Binary coded license information
   */
  // this.features;

  /**
   * Fulltext enabled.
   */
  // this.fultext;

  /**
   * HTTP DocServer
   */
  // this.httpServer;

  /**
   * IndexServer
   */
  // this.indexServer;

  /**
   * Limited Internet Gateway
   */
  // this.limitedIg;

  /**
   * Limited version.
   */
  // this.limitedVersion;

  /**
   * Number of ELO Internet Gateway users.
   */
  // this.nbOfIgLicenses;

  /**
   * Number of server licenses.
   */
  // this.nbOfServerLicenses;

  /**
   * True for ELOprofessional
   */
  // this.professional;

  /**
   * Replication enabled.
   */
  // this.replication;

  /**
   * SAPALINK interface
   */
  // this.sapALink;

  /**
   * License key.
   */
  // this.serno;

  /**
   * SIGNATURE
   */
  // this.signature;

  /**
   * STACK
   */
  // this.stack;

  /**
   * Tobit
   */
  // this.tobid;

  /**
   * XML-Import
   */
  // this.xmlImport;

 };

// ---------------- API class UserProfile --------------------

/**
 * User profile options
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 */
de.elo.ix.client.UserProfile = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.UserProfile';

  /**
   * Options as name-value-pairs.
   * This array contains the sum of default options, group options and user options.
   */
  // this.options;

  /**
   * The user name or UserProfileC.USERID_ALL, if the options for all users are represented by this object.
   * The values null or empty are equal to UserProfileC.USERID_ALL.
   */
  // this.userId;

  /**
   * Do not read values of option groups.
   * Only valid for checkoutUserProfile.
   */
  // this.excludeGroupValues;

  /**
   * Do not read values for all users.
   * Only valid for checkoutUserProfile.
   */
  // this.excludeDefaultValues;

  /**
   * Options as name-value-pairs.
   * This array contains the options defined for the given user.
   * Read-only.
   */
  // this.userOptions;

  /**
   * Options as name-value-pairs.
   * This array contains the options defined for the users option group.
   * Read-only.
   */
  // this.groupOptions;

  /**
   * Options as name-value-pairs.
   * This array contains the default options valid for all users.
   * Read-only.
   */
  // this.defaultOptions;

  /**
   * The users option group ID.
   * This value is -1, if the user is not member of an option group.
   * Read-only.
   */
  // this.groupId;

 };

// ---------------- API class MapHeadC --------------------

/**
 * <p>Bit constants for members of MapHead</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 * @see MapHead
 */
de.elo.ix.client.MapHeadC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.MapHeadC';

  /**
   * DB column: mapid
   */
  // this.mbId;

  /**
   * DB column: mapid
   */
  // this.lnId;

  /**
   * DB column: maplockid
   */
  // this.mbLockId;

  /**
   * DB column: mapobjid
   */
  // this.mbObjId;

  /**
   * DB column: maptstamp
   */
  // this.mbTStamp;

  /**
   * DB column: maptstamp
   */
  // this.lnTStamp;

  /**
   * DB column: mapguid
   */
  // this.mbGuid;

  /**
   * DB column: mapguid
   */
  // this.lnGuid;

  /**
   * All valid member bits.
   */
  // this.mbAllMembers;

 };

// ---------------- API class ServerState --------------------

/**
 * Internal class.
 */
de.elo.ix.client.ServerState = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ServerState';

  /**
   * DB column: actionid
   */
  // this.actionId;

  /**
   * DB column: subkey
   */
  // this.subKey;

  /**
   * DB column: action
   */
  // this.action;

 };

// ---------------- API class SordZ --------------------

/**
 * <p>This class encapsulates the constants of <code>SordC</code></p>
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 * @see SordC SordC
 */
de.elo.ix.client.SordZ = function() { 
  return new de.elo.ix.client.LongBitset("de.elo.ix.client.SordZ", arguments);
 };

// ---------------- API class ReportErpCode --------------------

/**
 * This class describes an ERP code - a filter code number in the ELO report.
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH </p>
 * @author imw
 */
de.elo.ix.client.ReportErpCode = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ReportErpCode';

  /**
   * ERP code
   */
  // this.id;

  /**
   * This code is wirtten in limited report
   */
  // this.limited;

  /**
   * ERP name
   */
  // this.name;

  /**
   * This code is written in verbose report
   */
  // this.verbose;

 };

// ---------------- API class FindByFulltextResultItem --------------------

/**
 * Additional information for an item found
 * by fulltext search.
 */
de.elo.ix.client.FindByFulltextResultItem = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.FindByFulltextResultItem';

  /**
   * Relevance in per mill.
   */
  // this.relevance;

  /**
   * Textpart from document.
   */
  // this.summaryFulltext;

  /**
   * Textpart from memo text.
   */
  // this.summaryDesc;

  /**
   * List of index field names that contain the query text.
   */
  // this.fieldNames;

  /**
   * Sord object.
   */
  // this.sord;

 };

// ---------------- API class ExecuteScriptParams --------------------

/**
 * This class is used to specify which script has to be executed in
 * function executeScript.
 * The script has to be an ELO Windows CLIENT OLE-Automation script.
 */
de.elo.ix.client.ExecuteScriptParams = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ExecuteScriptParams';

  /**
   * This value defines the scripting engine to be used to execute the script.
   * Currently, this value must be null or empty or "EloixAuto".
   * If the value is null or empty, EloixAuto is used by default.
   */
  // this.scriptEngine;

  /**
   * This object contains the script code to be executed as a byte array.
   * The FileData.contentType is either "text/javascript" or "text/vbscript".
   * FileData.data has to be encoded in UTF-8.
   * The scriptCode.data length must be less or equal than 65535.
   * If this member is set, the members scriptString and scriptObjId should be null.
   */
  // this.scriptCode;

  /**
   * This object contains the script code to be executed as a string object.
   * The string must either start with "javascript:" or "vbscript:".
   * The maximum scriptString length is 65535 UTF-8 characters.
   * If this member is set, the members scriptCode and scriptObjId should be null.
   */
  // this.scriptString;

  /**
   * If the script to be executed is available in the ELO archive,
   * this member can specify the object ID (or ARCPATH: - see checkoutSord)
   * of the script document.
   * The file is assumed to be encoded in characterset ISO-8859-1, if it does not start with a BOM.
   * If this member is set, the members scriptCode and scriptString should be null.
   */
  // this.scriptObjId;

  /**
   * Call this function in the script code.
   * A function defined in script code that was supplied in a previsious call can be invoked too,
   * as long as this object does not specify scriptCode, scriptString or scriptObjId.
   */
  // this.functionName;

  /**
   * Function parameters.
   */
  // this.functionParams;

 };

// ---------------- API class DeleteOptions --------------------

/**
 * This class contains options for deleting archive SORDs using the deleteSord function.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @see IXServicePortIF#deleteSord IXServicePortIF.deleteSord(...)
 */
de.elo.ix.client.DeleteOptions = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.DeleteOptions';

  /**
   * deleteFinally=true causes the objects to be removed physically.
   * When used together with <code>cleanupStart</code>, this option is always true.
   * Exception: see {@link #deleteExpiredOnly}
   */
  // this.deleteFinally;

  /**
   * maxIDate ist the ISO representation of the local date used to mark the upper limit for deleting.
   */
  // this.maxIDate;

  /**
   * Delete only expired objects.
   * Only supported in function <code>cleanupStart</code>.
   * This option can be combined with <code>deleteFinally</code>.
   * <table border="2">
   * <tr><td><code>deleteFinally</code></td><td>Action</td></tr>
   * <tr><td><code>false</code></td>
   * <td>
   * All expired objects will be marked as deleted (but not finally deleted).
   * The objects ACL is checked before it is deleted.
   * LockC.FORCE is applied when deleting an object.
   * </td>
   * </tr>
   * <tr><td><code>true</code></td><td>Objects that are expired and marked are deleted finally.</td></tr>
   * </table>
   */
  // this.deleteExpiredOnly;

  /**
   * Delete objects modified last time before this date.
   * Only supported in function <code>cleanupStart</code>.
   * If deleteFinally is true and this member is set, ony
   * those objects are deleted finally, which were deleted
   * logically before the given time.
   * It must be an ISO value in the local time zone.
   */
  // this.maxTStamp;

  /**
   * Delete the document versions of the objects but keep
   * keywording information. In order to delete only the
   * document versions, call deleteSord on an maybe undeleted
   * object and set DeleteOptions.deleteFinally=true and
   * DeleteOptions.deleteDocumentVersionsOnly=true.
   */
  // this.deleteDocumentVersionsOnly;

  /**
   * Delete all references to the objects in the database.
   * This includes reporting, replication control information,
   * fulltext, etc.
   * This option is ignroed, if deleteFinally is false.
   */
  // this.deleteResidueFree;

  /**
   * Delete a folder only if it is empty.
   * Set this member to true, if deleteSord should delete only empty folders.
   * If the parameters to deleteSord specify the original location of a
   * non-empty folder, the exception IXExceptionC.ACCESS_DENIED is thrown.
   * This option is ignored, if deleteSord is invokded with a reference.
   */
  // this.folderMustBeEmpty;

 };

// ---------------- API class WorkflowExportOptions --------------------

/**
 * Structure for the options for the workflow-export.
 * <p>
 * Copyright: Copyright (c) 2009
 * </p>
 * <p>
 * Organisation: ELO Digital Office GmbH
 * </p>
 * @since 7.00.020.002
 * @version 1.1
 */
de.elo.ix.client.WorkflowExportOptions = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.WorkflowExportOptions';

  /**
   * Id of the workflow, that will be exported.
   */
  // this.flowId;

  /**
   * Id of the workflow-version, that will be exported.
   */
  // this.flowVersId;

  /**
   * Character set for the export-data.
   */
  // this.characterSet;

  /**
   * Word wrap for the export-data.
   */
  // this.wordWrap;

 };

// ---------------- API class ReportInfo --------------------

/**
 * This class describes a report/protocol entry for an action carried out in
 * the archive.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.ReportInfo = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ReportInfo';

  /**
   * Reserved - internal function.
   */
  // this.actTime;

  /**
   * Action number in numeric form.
   */
  // this.actionNo;

  /**
   * Reserved - internal,  dependant on actionNo.
   */
  // this.extra1;

  /**
   * Reserved - internal,  dependant on actionNo
   */
  // this.extra2;

  /**
   * Identifier
   */
  // this.id;

  /**
   * Id of the object for which the action is entered in the protocoll.
   */
  // this.objId;

  /**
   * Id of the session which carried out the action.
   */
  // this.sessionNo;

  /**
   * Reserved - internal,  dependant on actionNo
   */
  // this.text;

  /**
   * Id of the user who carried out the action.
   */
  // this.userId;

  /**
   * Time of the action in ISO format.
   */
  // this.actTimeISO;

  /**
   * ActionNo as name.
   */
  // this.action;

  /**
   * Descriptive text or details.
   */
  // this.comment;

  /**
   * Name of the user who carried out the action.
   */
  // this.userName;

 };

// ---------------- API class NotifyServerResult --------------------

/**
 * This class is used as a return value of IXServicPortIF.notifyServer.
 */
de.elo.ix.client.NotifyServerResult = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.NotifyServerResult';

 };

// ---------------- API class MapDomain --------------------

/**
 * This class contains the information of a map domain.
 * A map is a set of key value pairs and can be addressed
 * by a map domain name and a map ID.
 * All maps with the same domain name are stored in the same
 * database tables. These maps are distinguished by their
 * ID, which can be an arbitary string.
 * A map can be attached to a Sord object by setting
 * the map ID to the Sord ID. Attached maps are deleted,
 * when the Sord object is finally deleted. Furthermore
 * they can be copied with the Sord object.
 * @since 7.00.040.001
 */
de.elo.ix.client.MapDomain = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.MapDomain';

  /**
   * Map domain name.
   * This can be a user definined name or one of the predefined names in MapDomainC.
   * The value is internally used as part of a database table name. Thus only alphanumeric
   * characters are allowed.
   */
  // this.name;

  /**
   * This value is true, if the map items should be copied when the
   * associated Sord object is copied.
   */
  // this.copy;

  /**
   * This value is true, if the map items should be replicated
   * with the associated Sord object.
   */
  // this.replicate;

 };

// ---------------- API class NoteTemplate --------------------

/**
 * This class describes the template information for a stamp.
 * @see Note
 * @since 7.00.000.023
 */
de.elo.ix.client.NoteTemplate = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.NoteTemplate';

  /**
   * Stamp ID.
   */
  // this.id;

  /**
   * Stamp name.
   */
  // this.name;

  /**
   * User ID or name.
   * NoteTemplate objects can be defined for all users and for a specific user.
   */
  // this.userId;

  /**
   * Text information, if this is a textual stamp.
   * The text information can contain the placeholders defined in NoteTemplateC.
   * Either noteText or noteImage can be set.
   * class NoteTemplateC
   */
  // this.noteText;

  /**
   * Image information, if this is stamp is an image.
   * Either noteText or noteImage can be set.
   */
  // this.noteImage;

  /**
   * ACL. Member aclItems has preceedence on checkin.
   */
  // this.acl;

  /**
   * ACL as an array of AclItem objects.
   */
  // this.aclItems;

 };

// ---------------- API class MapHead --------------------

/**
 * Internal class.
 */
de.elo.ix.client.MapHead = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.MapHead';

  /**
   * Map id.
   */
  // this.id;

  /**
   * Lock status.
   * -1: unlocked, >=0 user-ID.
   */
  // this.lockId;

  /**
   * Associated object ID or 0.
   */
  // this.objId;

  /**
   * Timestamp.
   */
  // this.TStamp;

  /**
   * GUID.
   */
  // this.guid;

 };

// ---------------- API class SessionInfo --------------------

/**
 * <p>Provides details of the current session with the Index Server</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Organisation: ELO Digital Office GmbH </p>
 */
de.elo.ix.client.SessionInfo = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.SessionInfo';

  /**
   * The client computer connected with the Index Server.
   */
  // this.clientComputer;

  /**
   * The id of the user used for the connection.
   */
  // this.userId;

  /**
   * The length of time the connection is valid for.
   */
  // this.validSeconds;

 };

// ---------------- API class ReportOptionsC --------------------

/**
 * Constants for report mode
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * An ERP code is assigned to one or more action codes.
 * @see ReportInfoC
 */
de.elo.ix.client.ReportOptionsC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ReportOptionsC';

  // this.ERP_LOGFIRSTMESSAGE;

  // this.ERP_LOGOPENARC;

  // this.ERP_LOGCLOSEARC;

  // this.ERP_LOGUSERDATA;

  // this.ERP_LOGCOLORDATA;

  // this.ERP_LOGMASKDATA;

  // this.ERP_LOGPATHDATA;

  // this.ERP_LOGKEYDATA;

  // this.ERP_LOGCREATEDOC;

  // this.ERP_LOGCREATESOR;

  // this.ERP_LOGEDITDATA;

  // this.ERP_LOGEDITDOC;

  // this.ERP_LOGVIEWDOC;

  // this.ERP_LOGERADOC;

  // this.ERP_LOGERASOR;

  // this.ERP_LOGMOVEDOC;

  // this.ERP_LOGREFDOC;

  // this.ERP_LOGMOVESOR;

  // this.ERP_LOGREFSOR;

  // this.ERP_LOGERAREF;

  // this.ERP_LOGCOMPLAIN;

  // this.ERP_LOGCHANGEKIND;

  // this.ERP_LOGCHANGEKEY;

  // this.ERP_LOGCHANGEPWD;

  // this.ERP_LOGATTACHMENT;

  // this.ERP_LOGDELDOCS;

  // this.ERP_CREATEFLOWTEMPL;

  // this.ERP_EDITFLOWTEMPL;

  // this.ERP_DELFLOWTEMPL;

  // this.ERP_STARTFLOW;

  // this.ERP_RECEIVEFLOW;

  // this.ERP_FORWARDFLOW;

  // this.ERP_EDITFLOWACTIVE;

  // this.ERP_DELFLOWACTIVE;

  // this.ERP_FLOWTIMELIMT;

  // this.ERP_FLOWERRORYESNO;

  // this.ERP_CONVERT_FORMAT;

  // this.ERP_WV;

  // this.ERP_POSTBOX;

  // this.ERP_VERSCHIEDEN;

  // this.ERP_NEWVERT;

  // this.ERP_DELVERT;

  // this.ERP_FREEVERT;

  // this.ERP_REMOVEVERT;

  // this.ERP_SETVERT;

  // this.ERP_RESETVERT;

  // this.ERP_CHECKOUT;

  // this.ERP_CHECKIN;

  // this.ERP_SHOWDOC;

  // this.ERP_SHOWSOR;

  // this.ERP_PICKPOST;

  // this.ERP_DELVERSION;

  // this.ERP_SEARCH;

  // this.ERP_WRITESESSION;

  // this.ERP_POSTBARCODE;

  // this.ERP_DM_READDOC;

  // this.ERP_NOREPDATA;

  // this.ERP_ERROR;

  // this.ERP_LOGLASTMESSAGE;

 };

// ---------------- API class FindResult --------------------

/**
 * <p>This class contains the search results of a call to <code>IXServicePortIF.findFirstSords</code></p>
 * or <code>IXServicePortIF.findNextSords</code>.
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author unbekannt
 * @see IXServicePortIF#findFirstSords IXServicePortIF.findFirstSords(...)
 */
de.elo.ix.client.FindResult = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.FindResult';

  /**
   * The time limit for the search is exceeded.
   */
  // this.breakTimeout;

  /**
   * The search is breaked because the total number of results are reached.
   */
  // this.breakTotalCount;

  /**
   * Array of configuration files.
   */
  // this.configFiles;

  /**
   * Array of IDs or GUIDs found.
   */
  // this.ids;

  /**
   * Is true if there are more results.
   */
  // this.moreResults;

  /**
   * Report entries.
   */
  // this.reportInfos;

  /**
   * Number of results.
   * This member is only valid, if FindInfo.findOptions.evalCount is true.
   */
  // this.count;

  /**
   * Estimated number of hits that can be found by the query.
   * This number cannot be computed for any search and is usually -1.
   * Only if the search engine supplies an estimated count, it is >= 0.
   */
  // this.estimatedCount;

  /**
   * Identifier to get more results.
   */
  // this.searchId;

  /**
   * Array of <code>sord</code> objects. This member is set if <code>sordC</code>
   */
  // this.sords;

  /**
   * Array of user tasks.
   */
  // this.tasks;

  /**
   * Array of WorkflowDiagrams
   */
  // this.workflows;

  /**
   * Array of terms translated into different languages.
   */
  // this.translateTerms;

  /**
   * Additional information from the fulltext database.
   * This member can be null, if the fulltext engine does not
   * support additional information.
   */
  // this.fulltextResultItems;

  /**
   * Result items returned from a seach for new information to be added into the fulltext database.
   */
  // this.fulltextCtrlResultItems;

 };

// ---------------- API class DocVersionC --------------------

de.elo.ix.client.DocVersionC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.DocVersionC';

  /**
   * This value should be set in DocVersion.uploadResult, if
   * preview creation fails.
   */
  // this.UPLOAD_RESULT_ERROR;

  /**
   * URL parameter offset.
   * Used to read a file at a particular offset.
   * Do not position offset after the length of the file.
   * Example: String readUrl = docVersion.url + "&" + URL_PARAM_OFFSET + "=" + 123;
   */
  // this.URL_PARAM_OFFSET;

  /**
   * URL parameter length.
   * Used to read length bytes from a file.
   * Do not read more bytes than the legnth of the file.
   * Example: String readUrl = docVersion.url + "&" + URL_PARAM_LENGTH + "=" + 123;
   */
  // this.URL_PARAM_LENGTH;

  /**
   * URL parameter create date.
   * Used to set the create date of the file.
   * ISO date in UTC timezone.
   * Example: String writeUrl = docVersion.url + "&" + URL_PARAM_CREATE_DATE + "=" + 20010203040506;
   */
  // this.URL_PARAM_CREATE_DATE;

  /**
   * URL parameter last write date.
   * Used to set the last write time of the file.
   * ISO date in UTC timezone.
   * Example: String writeUrl = docVersion.url + "&" + URL_PARAM_LAST_UPDATE + "=" + 20010203040506;
   */
  // this.URL_PARAM_LAST_UPDATE;

  /**
   * URL parameter last access date.
   * Used to set the last access time of the file.
   * ISO date in UTC timezone.
   * Example: String writeUrl = docVersion.url + "&" + URL_PARAM_LAST_ACCESS + "=" + 20010203040506;
   */
  // this.URL_PARAM_LAST_ACCESS;

  /**
   * Document versions marked with this flag cannot be deleted.
   */
  // this.FLAG_MILESTONE;

  /**
   * Length of version comment.
   */
  // this.lnComment;

  /**
   * Length of version number (like 1.0).
   */
  // this.lnVersion;

  /**
   * Length of file extension.
   */
  // this.lnExt;

 };

// ---------------- API class ProcessInfo --------------------

/**
 * Specific processing information for each node of processTrees(...) or processFindResults(...).
 * The operations will be for existence (not null) in order of their appearance in ProcessInfo.
 * Some of the underlying structures may allow toggling between prefix and postfix processing
 * when used with processTrees.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.ProcessInfo = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ProcessInfo';

  /**
   * pass 0 for valid (undeleted) nodes, >0 otherwise.
   */
  // this.delStatus;

  /**
   * Holds the user defined description of a specific call. This member
   * must not be null or empty.
   */
  // this.desc;

  /**
   * From ProcessInfoC: ERRORMODE_ALL, ERRORMODE_SKIP_SUBTREE,
   * ERRORMODE_SKIP_PROCINFO or ERRORMODE_CRITICAL_ONLY.
   */
  // this.errorMode;

  /**
   * processing flag for documents.
   */
  // this.ignoreDocuments;

  /**
   * processing flag for structure elements.
   */
  // this.ignoreStructures;

  /**
   * Use this parameter to access potentially locked nodes.
   */
  // this.lockZ;

  /**
   * Prefix processing, valid ProcessAcl data.
   */
  // this.procAcl;

  /**
   * Prefix processing, valid ProcessFulltext data.
   */
  // this.procFulltext;

  /**
   * Prefix processing count all elements
   */
  // this.procCountElem;

  /**
   * Move documents to storage path.
   */
  // this.procMoveDocumentsToStoragePath;

  /**
   * Copy the elements into other archive location.
   */
  // this.procCopyElements;

  /**
   * Maximum amount of recorded errors in procMsgs; from ProcessInfoC: PROCMSGMAX.
   */
  // this.procMsgMax;

  /**
   * Recorded error messages; specify their amount using procMsgMax.
   */
  // this.procMsgs;

  /**
   * Prefix processing, valid ProcessReplSet data.
   */
  // this.procReplSet;

  /**
   * Either prefix or postfix processing.
   */
  // this.procScript;

  /**
   * Defines, if the data allways have to be written
   */
  // this.forceOperation;

  /**
   * Process references (logical copies) too.
   */
  // this.inclReferences;

 };

// ---------------- API class FindByFulltextCtrl --------------------

/**
 * This class is used to search for objects
 * that have to be indexed by the fulltext
 * database engine.
 * <p>
 * The selected objects are ordered by their timestamp.
 * If the search process is interrupted because of a timeout or
 * because the FindOptions.totalCount limit is reached,
 * all the Objects of the lates timestamp second are
 * discarded.
 * </p><p>
 * If the search process is terminated due to breakTotalCount
 * and the array of results is empty, the search should be
 * repeated with a greater value for totalCount.
 * </p><p>
 * Access checking is performed as in all other searches.
 * </p><p>
 * A search of this type can only be combined with
 * FindOptions.totalCount and FindOptions.timeoutSeconds.
 * </p><p>
 * The results are returned in the member FindInfo.fulltextCtrlResultItems.
 * The Sord objects are available in the member FindInfo.sords too.
 * </p>
 * @see FindResult#fulltextCtrlResultItems
 * @since 7.00.040.006
 */
de.elo.ix.client.FindByFulltextCtrl = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.FindByFulltextCtrl';

  /**
   * Find objects from this date or newer.
   * This value can be null or empty in which case the
   * time range has no lower limit.
   */
  // this.startTStamp;

  /**
   * Find objects from this date or older.
   * If the value is null or empty, the time range
   * has no upper limit.
   */
  // this.endTStamp;

 };

// ---------------- API class FindBySordHist --------------------

de.elo.ix.client.FindBySordHist = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.FindBySordHist';

  // this.histKeys;

 };

// ---------------- API class WFDiagramC --------------------

/**
 * <p>Constants for workflows.</p>
 * @author imw
 * @see WFDiagram WFDiagram
 */
de.elo.ix.client.WFDiagramC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.WFDiagramC';

  /**
   * Maximum number of subnodes.
   */
  // this.MAX_SUBNODES;

  /**
   * ID
   */
  // this.mbId;

  /**
   * Name
   */
  // this.mbName;

  /**
   * Maximum length of workflow name.
   */
  // this.lnName;

  /**
   * Object ID
   */
  // this.mbObjId;

  /**
   * Object type.
   */
  // this.mbObjType;

  /**
   * Completed at this date.
   */
  // this.mbCompletionDate;

  /**
   * Nodes.
   */
  // this.mbNodes;

  /**
   * Node matrix.
   */
  // this.mbMatrix;

  /**
   * Member bit: Alert user.
   */
  // this.mbTimeLimitUserId;

  /**
   * Member bit: Time-limit.
   */
  // this.mbTimeLimit;

  /**
   * Member bit: StartDate.
   */
  // this.mbStartDate;

  /**
   * Member bit: acl and aclItems.
   */
  // this.mbAcl;

  /**
   * Member bit: ownerId and ownerName
   */
  // this.mbOwnerId;

  /**
   * Member bit: lockId and lockName
   */
  // this.mbLockId;

  /**
   * Member bit: prio
   */
  // this.mbPrio;

  /**
   * Member bit: deleted
   */
  // this.mbDeleted;

  /**
   * Member bit: templateId
   */
  // this.mbTemplateId;

  /**
   * Member bit: flags
   */
  // this.mbFlags;

  /**
   * Member bit: access
   */
  // this.mbAccess;

  /**
   * Member bit: access
   */
  // this.mbVersion;

  /**
   * Member bit: Guid
   */
  // this.mbGuid;

  /**
   * Maximum length of workflow GUID.
   */
  // this.lnGuid;

  /**
   * Member bit: TStamp
   */
  // this.mbTStamp;

  /**
   * Maximum length of workflow TStamp.
   */
  // this.lnTStamp;

  /**
   * Member bit: processOnServerId
   */
  // this.mbProcessOnServerId;

  /**
   * Maximum length of processOnServerId.
   */
  // this.lnProcessOnServerId;

  /**
   * Member bit: timeLimitEscalation
   */
  // this.mbTimeLimitEscalations;

  /**
   * Member bit: objName
   */
  // this.mbObjName;

  /**
   * All elements.
   */
  // this.mbAllMembers;

  // this.mbLeanMembers;

  // this.mbLean;

  // this.mbAll;

  // this.mbOnlyLock;

  // this.mbAclItems;

  // this.mbCompletionDateIso;

  // this.mbOwnerName;

  // this.mbStartDateIso;

  // this.mbTemplateName;

  // this.mbTimeLimitIso;

  // this.mbTimeLimitUserName;

  // this.mbType;

  /**
   * Compare this value to WFDiagram.templateId to check whether the workflow
   * was started as an adhoc workflow. This member is for convenience. You can
   * also check the flag FLAG_ROOT_ADHOC of the root node.
   */
  // this.TEMPLATE_ID_ADHOC;

 };

// ---------------- API class TranslateTerm --------------------

/**
 * Objects of this class represent one term in different languages.
 * @since 7.00.000.000
 */
de.elo.ix.client.TranslateTerm = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.TranslateTerm';

  /**
   * GUID
   */
  // this.guid;

  /**
   * True, if this entry is logically deleted.
   */
  // this.deleted;

  /**
   * Last modified.
   * ISO date with seaparator "." measured in UTC.
   */
  // this.tStamp;

  /**
   * Term in its languages.
   * The Term <code>termLangs[i]</code> is in Language <code>langs[i]</code>.
   * If a translation does not exist, the corresponding <code>termLangs[.]</code> is an empty string.
   */
  // this.termLangs;

  /**
   * The languages of the term in <code>termLangs</code>.
   * In an array of TranslateTerm objects returned in FindResult or
   * returned by checkoutTranslateTerm, all objects share the same
   * array <code>langs</code>.
   */
  // this.langs;

 };

// ---------------- API class ThesaurusC --------------------

/**
 * <p>Bit constants for members of Thesaurus</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 * @see Thesaurus
 */
de.elo.ix.client.ThesaurusC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ThesaurusC';

  /**
   * DB column: groupid
   */
  // this.mbGroupId;

  /**
   * DB column: prio
   */
  // this.mbPrio;

  /**
   * DB column: data
   */
  // this.mbData;

  /**
   * DB column: data
   */
  // this.lnData;

  /**
   * DB column: compare
   */
  // this.mbCompare;

  /**
   * DB column: compare
   */
  // this.lnCompare;

  /**
   * DB column: listid
   */
  // this.mbListId;

  /**
   * All valid member bits.
   */
  // this.mbAllMembers;

 };

// ---------------- API class Event --------------------

/**
 * This class represents an event used by the event bus API functions.
 */
de.elo.ix.client.Event = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.Event';

  /**
   * Bus-ID
   */
  // this.busId;

  /**
   * Event type.
   * Event filters check this value.
   * This must be one of the predefined event types or an application defined type with a larger value than EventBusC.EVENT_TYPE_MAX_SYSTEM.
   */
  // this.type;

  /**
   * Value depends on event type.
   * Event filters check this value.
   */
  // this.param1;

  /**
   * Value depends on event type.
   * Event filters check this value.
   */
  // this.param2;

  /**
   * Event ID.
   * If the sender awaits a response to this event, it should set a random number in <code>id</code>.
   * The receiver should use the same number in the response.
   */
  // this.id;

  /**
   * User ID of event sender.
   * Might be used for other IDs in future too.
   * Read-only.
   */
  // this.senderId;

  /**
   * Event payload data as byte array.
   */
  // this.data;

  /**
   * Event payload data as Any object.
   */
  // this.any;

  /**
   * Access control list.
   * An empty ACL means here, that the event is dispatched to everyone.
   */
  // this.acl;

 };

// ---------------- API class SessionOptions --------------------

/**
 * Objects of this class hold an array of options that are used to manipulate the
 * current IndexServer session.
 */
de.elo.ix.client.SessionOptions = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.SessionOptions';

  /**
   * Array containing options used for the Index Server session.
   */
  // this.options;

 };

// ---------------- API class WorkFlowNodeMatrixC --------------------

/**
 * <p>Bit constants for members of WorkFlowNodeMatrix</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 * @see WorkFlowNodeMatrix
 */
de.elo.ix.client.WorkFlowNodeMatrixC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.WorkFlowNodeMatrixC';

  /**
   * Member bit: Workflow ID
   * DB column: wf_flowid
   */
  // this.mbFlowId;

  /**
   * Member bit: Node ID
   * DB column: wf_nodeid
   */
  // this.mbNodeId;

  /**
   * Member bit: Contains 1, if this node is active.
   * DB column: wf_is_next
   * DB column: wf_is_next
   */
  // this.mbIsNext;

  /**
   * Member bit: ELO-date when the node was exited.
   * DB column: wf_terminate
   * DB column: wf_terminate
   */
  // this.mbTerminate;

  /**
   * Member bit: Type of successor node.
   * DB column: wf_succ_type
   */
  // this.mbSuccType;

  /**
   * DB column: wf_succ_0
   */
  // this.mbSucc_0;

  /**
   * DB column: wf_succ_1
   */
  // this.mbSucc_1;

  /**
   * DB column: wf_succ_2
   */
  // this.mbSucc_2;

  /**
   * DB column: wf_succ_3
   */
  // this.mbSucc_3;

  /**
   * DB column: wf_succ_4
   */
  // this.mbSucc_4;

  /**
   * DB column: wf_succ_5
   */
  // this.mbSucc_5;

  /**
   * DB column: wf_succ_6
   */
  // this.mbSucc_6;

  /**
   * DB column: wf_succ_7
   */
  // this.mbSucc_7;

  /**
   * DB column: wf_succ_8
   */
  // this.mbSucc_8;

  /**
   * DB column: wf_succ_9
   */
  // this.mbSucc_9;

  /**
   * DB column: wf_succ_10
   */
  // this.mbSucc_10;

  /**
   * DB column: wf_succ_11
   */
  // this.mbSucc_11;

  /**
   * DB column: wf_succ_12
   */
  // this.mbSucc_12;

  /**
   * DB column: wf_succ_13
   */
  // this.mbSucc_13;

  /**
   * DB column: wf_succ_14
   */
  // this.mbSucc_14;

  /**
   * DB column: wf_succ_15
   */
  // this.mbSucc_15;

  /**
   * DB column: wf_succ_16
   */
  // this.mbSucc_16;

  /**
   * DB column: wf_succ_17
   */
  // this.mbSucc_17;

  /**
   * DB column: wf_succ_18
   */
  // this.mbSucc_18;

  /**
   * DB column: wf_succ_19
   */
  // this.mbSucc_19;

  /**
   * Member bit: Version ID.
   * DB column: wf_version
   */
  // this.mbVersionId;

  /**
   * All valid member bits.
   */
  // this.mbAllMembers;

 };

// ---------------- API class WorkFlowNodeMatrix --------------------

/**
 * Helperclass to access the node matrix.
 * @author Imig
 * @since 7.00.000.008
 */
de.elo.ix.client.WorkFlowNodeMatrix = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.WorkFlowNodeMatrix';

  /**
   * Workflow ID
   */
  // this.flowId;

  /**
   * Node ID
   */
  // this.nodeId;

  /**
   * Contains 1, if this node is active.
   * DB column: wf_is_next
   */
  // this.isNext;

  /**
   * ELO-date when the node was exited.
   * DB column: wf_terminate
   */
  // this.terminate;

  /**
   * Type of successor node.
   */
  // this.succType;

  // this.succ_0;

  // this.succ_1;

  // this.succ_2;

  // this.succ_3;

  // this.succ_4;

  // this.succ_5;

  // this.succ_6;

  // this.succ_7;

  // this.succ_8;

  // this.succ_9;

  // this.succ_10;

  // this.succ_11;

  // this.succ_12;

  // this.succ_13;

  // this.succ_14;

  // this.succ_15;

  // this.succ_16;

  // this.succ_17;

  // this.succ_18;

  // this.succ_19;

  /**
   * Version ID.
   */
  // this.versionId;

 };

// ---------------- API class EloFtOptDataC --------------------

/**
 * <p>Bit constants for members of EloFtOpt</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 * @see EloFtOpt
 */
de.elo.ix.client.EloFtOptDataC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.EloFtOptDataC';

  /**
   * DB column: optid
   */
  // this.mbId;

  /**
   * DB column: optval
   */
  // this.mbValue;

  /**
   * DB column: optval
   */
  // this.lnValue;

  /**
   * DB column: remark
   */
  // this.mbRemark;

  /**
   * DB column: remark
   */
  // this.lnRemark;

  /**
   * All valid member bits.
   */
  // this.mbAllMembers;

 };

// ---------------- API class EloDmOptC --------------------

/**
 * Internal class
 */
de.elo.ix.client.EloDmOptC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.EloDmOptC';

 };

// ---------------- API class ProcessMoveDocumentsToStoragePath --------------------

/**
 * This class specifies the options for moving a document into another storage path.
 * It is used as member in <code>ProcessInfo</code> and is interpreted in the functions
 * <code>processFindResult</code> and <code>processTrees</code>.
 * @see ProcessInfo
 * @see IXServicePortIF#processFindResult(ClientInfo, String, ProcessInfo)
 * @see IXServicePortIF#processTrees(ClientInfo, NavigationInfo, ProcessInfo)
 */
de.elo.ix.client.ProcessMoveDocumentsToStoragePath = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ProcessMoveDocumentsToStoragePath';

  /**
   * Name or ID of the storage path
   */
  // this.pathId;

 };

// ---------------- API class SessionOptionsC --------------------

/**
 * Constants of SessionOptions.
 * @see IXServicePortIF#setSessionOptions setSessionOptions
 */
de.elo.ix.client.SessionOptionsC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.SessionOptionsC';

  /**
   * Client application name. Optional.
   */
  // this.CLIENT_APP_NAME;

  /**
   * Client application version. Optional.
   */
  // this.CLIENT_APP_VERSION;

  /**
   * Client application type. Mandatory.
   * The appropriate value for partner applications is TYPE_PARTNER_APPLICATION
   * unless a special type is arranged.
   */
  // this.CLIENT_APP_TYPE;

  /**
   * This option value has to be used for option CLIENT_APP_TYPE if a
   * partner application connects to IX.
   */
  // this.TYPE_PARTNER_APPLICATION;

  /**
   * This character is used in the SQL statement, if the search criterias contain
   * one of the SQL wildcard characters: &quot;%&quot;, &quot;_&quot;.
   * It defaults to &quot;¶&quot; which is a reserved character in ELO and a
   * valid escape character for the most SQL servers and configurations.
   * Unless a search kritera contains &quot;¶&quot; or the SQL server does not
   * allow the use of this character (e. g. ORACLE, UTF-8) the value has to be
   * changed.
   * Hint: IndexServer-API uses &quot;*&quot; as the only valid wildcard.
   * The escape character must not be used in the search criterias.
   */
  // this.DB_ESCAPE_CHAR;

  /**
   * This characters are used as wildcards in search terms.
   * The first wildcard is used for zero or more characters.
   * The second wildcard is used for exactly one character.
   * By default (if this member is null or empty),
   * only the first wildcard is defined: *
   */
  // this.DB_WILDCARDS;

  /**
   * This option specifies which application is addressed in URLs to upload
   * and download documents. If direct access is true, the URLs address the
   * DM directly. Otherwise the documents are routed though the IX.
   */
  // this.DIRECT_DM_ACCESS;

  /**
   * Set this option to encrypt documents on checkin. A secure connection (HTTPS)
   * is required to use this option.
   */
  // this.ENCRYPT_DOCUMENTS;

  /**
   * Set this option to decrypt documents on checkout. A secure connection (HTTPS)
   * is required to use this option.
   */
  // this.DECRYPT_DOCUMENTS;

  /**
   * Translate keywording forms names, index names, index values and keyword lists
   * into resp. from the language given in <code>ClientInfo.language</code>.
   */
  // this.TRANSLATE_TERMS;

  /**
   * Format ISO date values with delimiter characters defined in ISO 8601.
   */
  // this.ISO_DATE_WITH_DELIMS;

  /**
   * If this option is set to "true", the IndexServer starts the workflow
   * defined in DocMask.flowId and DocMask.flowId2 when an associated document
   * is created or checked in.
   */
  // this.START_DOCMASK_WORKFLOWS;

  /**
   * Function getSessionFromTicket: session must be known by this IndexServer instance.
   * An exception is thrown, if the session is not known by this IndexServer instance.
   * The ticket lifetime is extended.
   */
  // this.SESSION_FROM_IX;

  /**
   * Function getSessionFromTicket: any active session known by the AccessManager can be requested.
   * The session is not inserted into the session management of this IndexServer instance.
   * Thus the session cannot be used to make IndexServer function calls.
   * The ticket lifetime is not extended.
   */
  // this.SESSION_FROM_AM;

  /**
   * Function getSessionFromTicket: used in combination with SESSION_FROM_AM.
   * Add the session into the internal session management.
   */
  // this.SESSION_ADD;

  /**
   * Function getSessionFromTicket: any active session can be requested and is inserted
   * into the session management of this IndexServer instance.
   * If the session is not known by this IndexServer instance, it is assumed to be a
   * Windows CLIENT session (relevant to license model).
   * The ticket lifetime is extended.
   * This value is the same as SESSION_FROM_AM | SESSION_ADD.
   */
  // this.SESSION_FROM_AM_ADD;

  /**
   * Define the first part of the URLs generated from Indexserver.
   * See configuration option ixUrlBase on the Indexserver option page.
   */
  // this.IX_URL_BASE;

  /**
   * Define the first part of the document URLs generated from Indexserver.
   * See configuration option documentUrlBase on the Indexserver option page.
   */
  // this.DOC_URL_BASE;

 };

// ---------------- API class ArchivingModeC --------------------

de.elo.ix.client.ArchivingModeC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ArchivingModeC';

  /**
   * Version flag: no versioning.
   */
  // this.READWRITE;

  /**
   * Version flag: version controlled.
   */
  // this.VERSION;

  /**
   * Version flag: read only.
   */
  // this.READONLY;

  // this.DEFAULT;

  // this.NONE;

 };

// ---------------- API class PhysDelDataC --------------------

/**
 * <p>Bit constants for members of PhysDel</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 * @see PhysDel
 */
de.elo.ix.client.PhysDelDataC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.PhysDelDataC';

  /**
   * DB column: pdguid
   */
  // this.mbGuid;

  /**
   * DB column: pdguid
   */
  // this.lnGuid;

  /**
   * DB column: pdtype
   */
  // this.mbType;

  /**
   * DB column: pdtstamp
   */
  // this.mbTStamp;

  /**
   * DB column: pdtstamp
   */
  // this.lnTStamp;

  /**
   * All valid member bits.
   */
  // this.mbAllMembers;

 };

// ---------------- API class Sord --------------------

/**
 * <p>Indexing information of an archive entry.</p>
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author unbekannt
 */
de.elo.ix.client.Sord = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.Sord';

  /**
   * Version numer of the current work version.
   */
  // this.SReg;

  /**
   * Timestamp of the last change.
   * The format is JJJJ.MM.DD.hh.mm.ss
   */
  // this.TStamp;

  /**
   * Access control language in coded form. The checkInSord method must set either
   * acl or aclItems. aclItems has priority.
   */
  // this.acl;

  /**
   * Id of the current attachment version. Read-only.
   */
  // this.att;

  /**
   * Estimated sum of the sub-entries in a directory. This does not take
   * account of any access rights assigned to the entries.
   * This property should only be used to determine whether the directory has
   * additional entries.
   * Read-only.
   */
  // this.childCount;

  /**
   * Read-only. Id of the current document version.
   */
  // this.doc;

  /**
   * GUID of the current document version.
   */
  // this.guid;

  /**
   * Number of document versions.
   */
  // this.histCount;

  /**
   * Id of the current document version.
   */
  // this.id;

  /**
   * RESERVED
   */
  // this.info;

  /**
   * RESERVED
   */
  // this.key;

  /**
   * Colour
   */
  // this.kind;

  /**
   * This is the id of the user who has a lock on the object. The object is locked using
   * checkoutSord with the LOCK.YES parameter. Read-only.
   */
  // this.lockId;

  /**
   * The id of the filing mask used to archive the sord. Read-only.
   */
  // this.mask;

  /**
   * The short description/name for the object.
   */
  // this.name;

  /**
   * The id of the owner of the object. Read-only.
   */
  // this.ownerId;

  /**
   * Id of the parent object(archive heirachy) of the sord object. Read-only
   */
  // this.parentId;

  /**
   * Filing path for the document manager.
   * Only valid for documents. Read-only.
   * <p>
   * If this Sord object is obtained by a call to checkoutSord or checkoutDoc
   * with a database lock (e.g. LockC.IF_FREE), this member contains the storage
   * path specified in the associated keywording form (DocMask.DPath). If the keywording
   * form does not define a path, the default storage path is returned
   * (ServerInfoDM.basisStoreIds[0]). Hence, the current value of the
   * database column objekte.objpath is not used as default
   * for new versions anymore.
   * </p>
   * <p>
   * If this Sord object is obtained by a call without a lock, e.g. from findFirstSords,
   * this value should not be used anymore. The storage path of the work version
   * should be used instead, which can be found in Sord.docVersion.pathId.
   * </p>
   */
  // this.path;

  /**
   * The type of sord object.
   * Folder objects: 0 &lt; type &lt; LBT_DOCUMENT
   * Document objects: LBT_DOCUMENT &lt;= type &lt; LBT_DOCUMENT_MAX
   */
  // this.type;

  /**
   * RESERVED
   */
  // this.vtRep;

  /**
   * ISO encoded internal (archive defined) date.
   */
  // this.IDateIso;

  /**
   * ISO encoded external (user defined) date.
   */
  // this.XDateIso;

  /**
   * The current users access rights for this Sord. Returns a combination of AccessC.LUR_ constants.
   * Read-only. Is returned when SordC.mbAcl is set in checkoutSord.
   */
  // this.access;

  /**
   * This is the access control list as an array of <code>AclItem</code> objects.
   */
  // this.aclItems;

  /**
   * ISO encoded expiry date. Only users having right AccessC.FLAG_EDITDUEDATE
   * are allowed to set the expiry date. Once the expiry date is set, it cannot
   * be set to a date before the original expiry date.
   */
  // this.delDateIso;

  /**
   * Indicates whether the sord has been deleted or not.
   */
  // this.deleted;

  /**
   * The (visible) memo text.
   */
  // this.desc;

  /**
   * Object encapsulates flags.
   */
  // this.details;

  /**
   * Version information of current document work version. Read-only.
   */
  // this.docVersion;

  /**
   * Hidden text that must not be displayed to the user.
   */
  // this.hiddenText;

  /**
   * Links pointing from other archive entries to this. Read-only.
   */
  // this.linksComeIn;

  /**
   * Links starting from <code>this</code> to other archive entries. Read-only.
   */
  // this.linksGoOut;

  /**
   * The name of the user who has locked the object. Read-only.
   */
  // this.lockName;

  /**
   * Index values during serialization
   */
  // this.objKeys;

  /**
   * Name of the owner (read-only).
   */
  // this.ownerName;

  /**
   * GUIDs of archive entries that contain a reference to <code>this</code>. The first element of
   * the array is the GUID of the main parent, where <code>this</code> is physically placed.
   * Read-only.
   */
  // this.parentIds;

  /**
   * Archive paths to this Sord. The first path, refPaths[0], contains the path to the original Sord.
   * The other paths contain references to this Sord. The paths do not include an
   * entry for the archive and for this Sord.
   */
  // this.refPaths;

  /**
   * Replication set names. The replication set information of an object is binary encoded in the
   * database. The Class <code>ReplNameMap</code> provides functions to convert from the binary
   * format into a list of replication set names and vice versa.
   * Both replNames and replSet contain the information in which replications
   * set the object is contain in. replNames has priority when checking the object in.
   */
  // this.replNames;

  /**
   * Replication sets. Binary encoded information.
   * Both replNames and replSet contain the information determining in which replications
   * sets the object is contain in. replNames has priority when checking the object in.
   */
  // this.replSet;

  /**
   * Name of keywording form.
   * Read-only.
   */
  // this.maskName;

  /**
   * Work version of the attachment.
   */
  // this.attVersion;

 };

// ---------------- API class FindReportInfo --------------------

/**
 * Objects of this class specify the selection criteria for report entries in
 * <code>findReport</code>.
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH </p>
 * @author imw
 */
de.elo.ix.client.FindReportInfo = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.FindReportInfo';

  /**
   * End date (UTC)
   */
  // this.endDateIso;

  /**
   * Constrained to this ERP codes.
   */
  // this.erpCodes;

  /**
   * Object ID or GUID
   */
  // this.objId;

  /**
   * Can contain an SQL ORDER BY clause.
   */
  // this.orderBy;

  /**
   * reserved.
   */
  // this.searchId;

  /**
   * Start date (UTC)
   */
  // this.startDateIso;

  /**
   * Specifies the time limit for the search. If the limit is exceeded, the search
   * is interruped. <code>timeoutSeconds=0</code> means that the search has no time limit.
   */
  // this.timeoutSeconds;

  /**
   * The search is ended once this number of objects have been found.
   * A value of <code>0</code> sets no constraint to the number of objects.
   */
  // this.totalCount;

  /**
   * User ID or name
   */
  // this.userId;

 };

// ---------------- API class MaskName --------------------

/**
 * Mask name object.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.MaskName = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.MaskName';

  /**
   * Mask can be used as storage mask for indexing.
   */
  // this.documentMask;

  /**
   * Mask ID.
   */
  // this.id;

  /**
   * Mask name.
   */
  // this.name;

  /**
   * Mask can be used for searching.
   */
  // this.searchMask;

  /**
   * Mask can be used as storage mask for folders.
   */
  // this.folderMask;

  /**
   * GUID
   */
  // this.guid;

  /**
   * Access mode for the current user. A combination of AccessC.LUR_* constants.
   */
  // this.access;

 };

// ---------------- API class ClientInfoC --------------------

/**
 * Constants for ClientInfo.
 * These constanse are only for internal usage.
 */
de.elo.ix.client.ClientInfoC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ClientInfoC';

  /**
   * Replication requests are marked with this bit.
   */
  // this.OPTION_REPLICATION_REQUEST;

 };

// ---------------- API class UserInfoC --------------------

/**
 * <p>Constants related to user information.</p>
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 */
de.elo.ix.client.UserInfoC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.UserInfoC';

  /**
   * Maximum number of user properties.
   */
  // this.MAX_USERPROP;

  /**
   * Maximum number of keys.
   */
  // this.MAX_KEY;

  /**
   * Maximale number of users and groups.
   */
  // this.MAX_USERS;

  /**
   * Maximum number of groups per user.
   */
  // this.MAX_GROUPS;

  /**
   * Maximum number of persistent groups per user.
   */
  // this.MAX_PERSISTENT_GROUPS;

  /**
   * Type value for an user.
   */
  // this.TYPE_USER;

  /**
   * Type value for a group.
   */
  // this.TYPE_GROUP;

  // this.MAX_NAME;

  // this.PROP_NAME_OS;

  // this.PROP_NAME_EMAIL;

  // this.PROP_ACTION;

  /**
   * User property GUID.
   */
  // this.PROP_GUID;

  /**
   * Maximum user name length
   */
  // this.lnName;

  /**
   * Maximum user password length
   */
  // this.lnPwd;

  /**
   * Maximum user desc length
   */
  // this.lnDesc;

  /**
   * Maximum user property length
   */
  // this.lnUserProp;

  /**
   * Every user is in the group "Everyone". This is
   * the internal ID for this group.
   */
  // this.ID_EVERYONE_GROUP;

  /**
   * User ID of main administrator.
   */
  // this.ID_ADMINISTRATOR;

  /**
   * GUID of group "Everybody"
   */
  // this.GUID_EVERYONE_GROUP;

  /**
   * GUID of main administrator
   */
  // this.GUID_ADMINISTRATOR;

  /**
   * This value can be set for UserInfo.pwd to
   */
  // this.PWD_VALUE_IGNORE;

 };

// ---------------- API class ProcessAcl --------------------

/**
 * This class is used to assign or remove ACLs to an object.
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @see AclItem
 */
de.elo.ix.client.ProcessAcl = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ProcessAcl';

  /**
   * ACL to be added.
   */
  // this.addAclItems;

  /**
   * ACL to be intersected with.
   */
  // this.andAclItems;

  /**
   * ACL to be set directly overriding any former settings.
   */
  // this.setAclItems;

  /**
   * ACL to be subtracted.
   */
  // this.subAclItems;

  /**
   * ACL to be added in raw database format.
   * Ignored, if addAclItems is not null.
   */
  // this.addAcl;

  /**
   * ACL to be added in raw database format.
   * Ignored, if subAclItems is not null.
   */
  // this.subAcl;

  /**
   * ACL to be added in raw database format.
   * Ignored, if andAclItems is not null.
   */
  // this.andAcl;

  /**
   * ACL to be added in raw database format.
   * Ignored, if setAclItems is not null.
   */
  // this.setAcl;

 };

// ---------------- API class FindTasksInfo --------------------

/**
 * This class contains the search criteria that are required for locating a
 * task (reminders, workflow tasks or activity).
 */
de.elo.ix.client.FindTasksInfo = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.FindTasksInfo';

  /**
   * Collect tasks up to this date.
   */
  // this.endDateIso;

  /**
   * Collect tasks of this or lower priority.
   */
  // this.highestPriority;

  /**
   * Collect activities.
   */
  // this.inclActivities;

  /**
   * Collect tasks received from users for which the current
   * user is a substitute.
   */
  // this.inclDeputy;

  /**
   * Collect tasks of the users groups.
   */
  // this.inclGroup;

  /**
   * Collect reminders.
   */
  // this.inclReminders;

  /**
   * Collect workflows.
   */
  // this.inclWorkflows;

  /**
   * Collect tasks of this or higher priority.
   */
  // this.lowestPriority;

  /**
   * Collect tasks for this Sord (ID or GUID).
   */
  // this.objId;

  /**
   * Controls the sort order or returned arrays. If null, PRIORITY_DATE_NAME is used.
   */
  // this.sortOrder;

  /**
   * Collect tasks beginning at this date.
   */
  // this.startDateIso;

  /**
   * Collect nodes that exceeded the time limit.
   * Workflow only
   */
  // this.overTimeLimit;

  /**
   * Collect tasks for a superior as defined in the escalation options.
   * When a workflow task exceeds its time limit, and the current user is
   * assigned in the time limit options of this task,
   * then the user receives this task from findFirstTasks/findNextTasks although
   * she or he is not the owner of the task.
   * If an entire workflow is over time, the user receives the start node of the workflow.
   * This option applies to workflow tasks only.
   */
  // this.inclOverTimeForSuperior;

  /**
   * IDs of the users which tasks can be collected by the administrator.
   */
  // this.userIds;

 };

// ---------------- API class DocHistory --------------------

/**
 * Document version data, e. g. document version ID and GUID, version comment,
 * MD5 hash of document file.
 * Internal use only.
 */
de.elo.ix.client.DocHistory = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.DocHistory';

  /**
   * Document version belongs to this object.
   * DB column: objectid
   */
  // this.objId;

  /**
   * Document version ID.
   * DB column: documentid
   */
  // this.docId;

  /**
   * The user who inserts the version into the archive.
   * DB column: userid
   */
  // this.user;

  /**
   * The version is created at this date. The value is an ELO date format.
   * DB column: createdate
   */
  // this.createDate;

  /**
   * The user can enter a comment that describes the version.
   * DB column: histcomment
   */
  // this.comment;

  /**
   * The version number (like 1.0) of the document version.
   * DB column: histversion
   */
  // this.version;

  /**
   * The MD5 hash of the document file.
   * DB column: docmd5
   */
  // this.docMD5;

  /**
   * GUID of the document version.
   * DB column: docguid
   */
  // this.guid;

  /**
   * The last update time of the version in ISO format (with dots).
   * DB column: doctstamp
   */
  // this.tStamp;

  /**
   * Document signature ID.
   * DB column: docsignature
   */
  // this.sigId;

  /**
   * Deleted versions have Status=1.
   * DB column: docstatus
   */
  // this.status;

  /**
   * MFG_BURNIN
   * DB column: docflags
   */
  // this.flags;

 };

// ---------------- API class UrlParams --------------------

/**
 * This class describes additional params for an upload or download URL.
 * @see IXServicePortIF#addUrlParams(ClientInfo, String, UrlParams)
 * @since 8.00.000.007
 */
de.elo.ix.client.UrlParams = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.UrlParams';

  /**
   * Download only length bytes from the resource.
   * Set this value to 0, if all bytes should be read.
   */
  // this.length;

  /**
   * Download bytes beginning from this offset.
   */
  // this.offset;

  /**
   * Highlight this terms.
   * This value is only valid for fulltext URLs.
   * Many terms have to be separated by space character.
   * Each term is enclosed in the HTML tags &lt;b&gt; term &lt;/b&gt;
   */
  // this.highlightTerms;

 };

// ---------------- API class Any --------------------

/**
 * This class is a container for one value of a serializable type.
 * @since 7.00.040.019
 */
de.elo.ix.client.Any = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.Any';

  /**
   * Type. One of the type constants given in AnyC.
   */
  // this.type;

  /**
   * Boolean value.
   */
  // this.booleanValue;

  /**
   * Integer value.
   */
  // this.intValue;

  /**
   * Long value.
   */
  // this.longValue;

  /**
   * Double value.
   */
  // this.doubleValue;

  /**
   * String value.
   */
  // this.stringValue;

  /**
   * Object value.
   */
  // this.objectValue;

  /**
   * Byte array.
   */
  // this.byteArray;

  /**
   * Array of Any.
   */
  // this.anyArray;

 };

// ---------------- API class AccessC --------------------

/**
 * <p>This class defines constants for access rights.</p>
 * <p>The <code>FLAG_*</code> constants are used in <code>UserInfo.flags</code>.
 * The <code>LUR_*</code> constants are used in access control lists</code>. </p>
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 * @see de.elo.ix.client.UserInfo UserInfo
 * @see de.elo.ix.client.AclItem AclItem
 */
de.elo.ix.client.AccessC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.AccessC';

  /**
   * Main administrator, can edit all users and groups.
   */
  // this.FLAG_ADMIN;

  /**
   * Edit master data (e.g. report)
   */
  // this.FLAG_EDITCONFIG;

  /**
   * Edit archive structure: create, edit, move archive entries.
   */
  // this.FLAG_EDITSTRUCTURE;

  /**
   * Edit documents: checkin, checkout.
   */
  // this.FLAG_EDITDOCS;

  /**
   * Change password.
   */
  // this.FLAG_CHANGEPW;

  /**
   * Change the archiving mode of a document.
   */
  // this.FLAG_CHANGEREV;

  /**
   * Administrator, can edit only the users and groups he created.
   */
  // this.FLAG_SUBADMIN;

  /**
   * Edit work flows.
   */
  // this.FLAG_EDITWF;

  /**
   * Start work flows.
   */
  // this.FLAG_STARTWF;

  /**
   * Delete documents.
   */
  // this.FLAG_DELDOC;

  /**
   * Delete archive entries.
   */
  // this.FLAG_DELSTRUC;

  /**
   * SAP administrator.
   */
  // this.FLAG_SAPADMIN;

  /**
   * Import.
   */
  // this.FLAG_IMPORT;

  /**
   * Export.
   */
  // this.FLAG_EXPORT;

  /**
   * Create, edit, delete storage masks.
   */
  // this.FLAG_EDITMASK;

  /**
   * Create, edit, delete scripts.
   */
  // this.FLAG_EDITSCRIPT;

  /**
   * Edit expiration date of archive entries.
   */
  // this.FLAG_EDITDUEDATE;

  /**
   * Edit catchwords.
   */
  // this.FLAG_EDITSWL;

  /**
   * Delete read only documents.
   */
  // this.FLAG_DELREADONLY;

  /**
   * Edit replication set assignment.
   */
  // this.FLAG_EDITREPL;

  /**
   * Edit security settings.
   */
  // this.FLAG_EDITACL;

  /**
   * Ignore access control lists.
   */
  // this.FLAG_IGNOREACL;

  /**
   * Edit scanner settings.
   */
  // this.FLAG_EDITSCAN;

  /**
   * Change the storage mask of an existing (not new) archive entry.
   */
  // this.FLAG_CHANGEMASK;

  /**
   * Edit activity projects.
   */
  // this.FLAG_EDITACT;

  /**
   * Change storage path settings.
   */
  // this.FLAG_CHANGEPATH;

  /**
   * User cannot login. This is not a right but a prohibition.
   */
  // this.FLAG_NOLOGIN;

  /**
   * Delete a document version in history
   */
  // this.FLAG_DELVERSION;

  /**
   * Author for release documents
   */
  // this.FLAG_AUTHOR;

  /**
   * Read document file.
   */
  // this.FLAG_HASFILEACCESS;

  /**
   * reserved
   */
  // this.FLAG_IS_OPTION_GROUP;

  /**
   * All rights (without flag <code>FLAG_NOLOGIN</code> and <code>FLAG_IS_OPTION_GROUP</code>).
   */
  // this.FLAG_ALL;

  /**
   * User right: Allow interactive login.
   * This value has to be used in the UserInfo.flags2 member.
   */
  // this.FLAG2_INTERACTIVE_LOGIN;

  /**
   * User right: extend ACL during workflow execution.
   * This value has to be used in the UserInfo.flags2 member.
   */
  // this.FLAG2_EXTEND_WORKFLOW_RIGHTS;

  /**
   * User right: user is visible in a select box.
   * This value has to be used in the UserInfo.flags2 member.
   */
  // this.FLAG2_VISIBLE_USER;

  /**
   * User right: user works with ELO DMS Desktop.
   * This value has to be used in the UserInfo.flags2 member.
   */
  // this.FLAG2_IS_DMS_DESKTOP_USER;

  /**
   * User right: all rights for UserInfo#flags2
   * This value has to be used in the UserInfo.flags2 member.
   */
  // this.FLAG2_ALL;

  /**
   * Access control right for reading an archive entry.
   */
  // this.LUR_READ;

  /**
   * Access control right for writing an archive entry.
   */
  // this.LUR_WRITE;

  /**
   * Access control right for printing an archive entry.
   */
  // this.LUR_DELETE;

  /**
   * Access control right for beeing able to checkin a new document version.
   */
  // this.LUR_EDIT;

  /**
   * Insert or remove an entry to the list of subentries of a Sord.
   */
  // this.LUR_LIST;

  /**
   * All access control rights.
   */
  // this.LUR_ALL;

 };

// ---------------- API class EditInfoEswOptions --------------------

/**
 * Options for reading or writing of esw-files.
 */
de.elo.ix.client.EditInfoEswOptions = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.EditInfoEswOptions';

  /**
   * Reserved
   */
  // this.reserved;

 };

// ---------------- API class IXExceptionData --------------------

/**
 * This class describes an exception that can occur during the execution of an
 * Index server function.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.IXExceptionData = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.IXExceptionData';

  /**
   * String containing the ClientInfo.callId for the ClientInfo object. This is
   * given to the function which triggered/caused the error.
   */
  // this.callId;

  /**
   * Detail text for the exception.
   */
  // this.details;

  /**
   * This is the type of exception. This is one of the constants from IXExceptionC.
   */
  // this.exceptionType;

  /**
   * The error message text for the exception.
   */
  // this.message;

  /**
   * Ticket given to the function.
   */
  // this.ticket;

 };

// ---------------- API class ArchiveStatistics --------------------

/**
 * Characteristic properties of the archive.
 * @see IXServicePortIF#getArchiveStatistics(ClientInfo, long)
 * @since 7.00.020.009
 */
de.elo.ix.client.ArchiveStatistics = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ArchiveStatistics';

  /**
   * Last document (version) ID.
   */
  // this.maxDocId;

  /**
   * Last object ID.
   */
  // this.maxObjId;

 };

// ---------------- API class EditInfo --------------------

/**
 * Contains data to edit the indexing information. Therfore it provides storage
 * mask names, storage path names, marker names, document template names,
 * replication set names, document version information, etc.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.EditInfo = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.EditInfo';

  /**
   * Document template names (Template files for new documents).
   */
  // this.docTemplates;

  /**
   * Document or attachment information.
   */
  // this.document;

  /**
   * Root keywords with first level of keywords below.
   * <p>
   * <table border="2">
   * <tr><td rowspan="4">for documents, keyword[.].id is one of: </td><td>KeywordC.KWID_STANDARD_LIST, Standard keyword list</td></tr>
   * <tr><td>KeywordC.KWID_VERSION, Version number keyword list</td></tr>
   * <tr><td>KeywordC.KWID_VERSION_COMMENT, Version comment keyword list</td></tr>
   * <tr><td>Keyword lists of storage mask</td></tr>
   * <tr><td rowspan="2">for non-documents, keyword[.].id is one of: </td><td>KeywordC.KWID_STANDARD_LIST, Standard keyword list</td></tr>
   * <tr><td>Keyword lists of storage mask</td></tr>
   * </table>
   * </p>
   */
  // this.keywords;

  /**
   * Marker names (Colours).
   */
  // this.markerNames;

  /**
   * Document mask data of the mask selected in <code>sord</code>.
   */
  // this.mask;

  /**
   * Storage mask names.
   */
  // this.maskNames;

  /**
   * Notes.
   */
  // this.notes;

  /**
   * Storage path names.
   */
  // this.pathNames;

  /**
   * Replication set names.
   */
  // this.replNames;

  /**
   * Indexing information.
   */
  // this.sord;

  /**
   * Sord types (labels, icons, extensions corresponding to Sord.type).
   */
  // this.sordTypes;

 };

// ---------------- API class FulltextConfigC --------------------

/**
 * Constants for class FulltextConfig.
 * @see FulltextConfig
 * @since 7.00.040.023
 */
de.elo.ix.client.FulltextConfigC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.FulltextConfigC';

  /**
   * Use fulltext information from inverse index stored in the archive database.
   */
  // this.SOURCE_CLASSIC;

  /**
   * Use fulltext information from Microsoft SQL-Server fulltext catalog.
   */
  // this.SOURCE_FTCAT;

  /**
   * Use fulltext information from iSearch.
   */
  // this.SOURCE_ISEARCH;

  /**
   * Evaluate suggestions fro similar terms.
   */
  // this.FLAG_ISEARCH_DID_YOU_MEAN;

  /**
   * Perform a search for each pressed key.
   */
  // this.FLAG_ISEARCH_SEARCH_AS_YOU_TYPE;

  /**
   * Retrieve a summary text for each word.
   */
  // this.FLAG_ISEARCH_SUMMARY;

  /**
   * Use the thesaurus of the company.
   */
  // this.FLAG_ISEARCH_COMPANY_THESAURUS;

  /**
   * Use the extension "Knowlege Map".
   */
  // this.FLAG_ISEARCH_KNOWLEGE_MAP;

  /**
   * Use the extension "Ontology Net".
   */
  // this.FLAG_ISEARCH_ONTOLOGY_NET;

 };

// ---------------- API class FindByNotes --------------------

/**
 * Finds an object according to the objects notes (sticky notes) content.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.FindByNotes = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.FindByNotes';

  /**
   * The search term to be found within the notes.
   */
  // this.term;

  /**
   * Find notes of this type.
   * Use TYPE_NONE (=0) to find all notes.
   */
  // this.type;

 };

// ---------------- API class VtDoc --------------------

/**
 * Internal class.
 * @author Imig
 */
de.elo.ix.client.VtDoc = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.VtDoc';

  /**
   * DB column: objid
   */
  // this.objId;

  /**
   * DB column: objdoc
   */
  // this.docId;

  /**
   * DB column: vtcode
   */
  // this.code;

 };

// ---------------- API class WFNodeMatrixC --------------------

/**
 * These constants describe the type of connection between two nodes.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.WFNodeMatrixC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.WFNodeMatrixC';

  /**
   * Connection type for non-decision nodes. The connection will always be
   * utilised to reach the next node. No conditions have to be fulfilled.
   */
  // this.ALWAYS;

  /**
   * This connection is the FALSE connection following a decision node. This
   * connection will be utilised when the IF requirement is not fulfilled.
   */
  // this.IF_FALSE;

  /**
   * This connection is the TRUE connection following a decision node. This
   * connection will be utilised when the IF requirement is fulfilled.
   */
  // this.IF_TRUE;

 };

// ---------------- API class LinkSordC --------------------

/**
 * Constants for linkSord(...).
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @see IXServicePortIF#linkSords IXServicePortIF.linkSords(...)
 */
de.elo.ix.client.LinkSordC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.LinkSordC';

  /**
   * Used as standard in linkSord(...).
   * Further values may become available in the future.
   */
  // this.NOTHING;

 };

// ---------------- API class WFDiagramZ --------------------

/**
 * This class encapsulates the constants of the WFDiagramC class.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.WFDiagramZ = function() { 
  return new de.elo.ix.client.LongBitset("de.elo.ix.client.WFDiagramZ", arguments);
 };

// ---------------- API class NavigationInfoC --------------------

/**
 * Constants class for the NavigationInfo class.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.NavigationInfoC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.NavigationInfoC';

  /**
   * The minimum depth for tree walks.
   */
  // this.MIN_NAV_DEPTH;

  /**
   * The overall limit for any visited element.
   */
  // this.MIN_NAV_MAX_COUNT;

  /**
   * The minimum amount of collected siblings.
   */
  // this.MIN_NAV_SIBLINGS;

  /**
   * This constant is used to override the navigation limit.
   */
  // this.SKIP_NAV_LIMIT;

 };

// ---------------- API class IXExceptionC --------------------

/**
 * This class contains constant definitions for IndexServer error numbers used
 * in IndexServer exceptions.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.IXExceptionC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.IXExceptionC';

  /**
   * Access to the specified object was denied, there are rights missing.
   */
  // this.ACCESS_DENIED;

  /**
   * Specified object to be created already exists.
   */
  // this.ALREADY_EXISTS;

  /**
   * Internal error.
   */
  // this.INTERNAL;

  /**
   * Invalid parameter was given.
   */
  // this.INVALID_PARAM;

  /**
   * Session is not (or no longer) valid.
   */
  // this.INVALID_SESSION;

  /**
   * Encryption key must be set before documents can be encrypted.
   */
  // this.INVALID_CRYPT_KEY;

  /**
   * Syntax error e.g. in search request.
   */
  // this.SYNTAX_ERROR;

  /**
   * Specified data is locked.
   */
  // this.LOCKED;

  /**
   * Specified data could not be found.
   */
  // this.NOT_FOUND;

  /**
   * Specified data could not be found.
   */
  // this.NOT_EMPTY;

  /**
   * Not a ELO IX Exception
   */
  // this.NOT_IX;

  /**
   * Problem in the server configuration.
   */
  // this.SERVER_ERROR;

  /**
   * Temporarily problem, a later try should succeed.
   */
  // this.TEMP_PROBLEM;

  /**
   * Function is not currently supported.
   */
  // this.UNSUPPORTED_FUNCTION;

  /**
   * An error thrown in a script file is passed to the client application with this error code.
   * E.g. [ELOIX:6000] "Message text thrown in script".
   */
  // this.SCRIPT_ERROR;

 };

// ---------------- API class ActivityZ --------------------

/**
 * Typed element selector for class Activity.
 * @see Activity
 * @see ActivityC
 * @since 8.00.012.001
 */
de.elo.ix.client.ActivityZ = function() { 
  return new de.elo.ix.client.LongBitset("de.elo.ix.client.ActivityZ", arguments);
 };

// ---------------- API class RelationC --------------------

/**
 * <p>Bit constants for members of Relation</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 * @see Relation
 */
de.elo.ix.client.RelationC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.RelationC';

  /**
   * DB column: parentid
   */
  // this.mbParentId;

  /**
   * DB column: objectid
   */
  // this.mbObjId;

  /**
   * DB column: ordinal
   */
  // this.mbOrdinal;

  /**
   * DB column: relstatus
   */
  // this.mbStatus;

  /**
   * DB column: reltstamp
   */
  // this.mbTStamp;

  /**
   * DB column: reltstamp
   */
  // this.lnTStamp;

  /**
   * Member bit: GUID
   * DB column: relguid
   */
  // this.mbGuid;

  /**
   * Column length: GUID
   * DB column: relguid
   */
  // this.lnGuid;

  /**
   * All valid member bits.
   */
  // this.mbAllMembers;

 };

// ---------------- API class ObjHistKeyC --------------------

/**
 * <p>Bit constants for members of SordHistKey</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 * @see SordHistKey
 */
de.elo.ix.client.ObjHistKeyC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ObjHistKeyC';

  /**
   * Member bit: Serialisation version ID
   * DB column: objhistguid
   */
  // this.mbHistGuid;

  /**
   * Column length: Serialisation version ID
   * DB column: objhistguid
   */
  // this.lnHistGuid;

  /**
   * DB column: okeyno
   */
  // this.mbKeyNo;

  /**
   * DB column: okeyname
   */
  // this.mbKeyName;

  /**
   * DB column: okeyname
   */
  // this.lnKeyName;

  /**
   * DB column: okeydata
   */
  // this.mbKeyData;

  /**
   * DB column: okeydata
   */
  // this.lnKeyData;

  /**
   * Member bit: Internal helper column for memo text.
   * DB column: objdesc
   */
  // this.mbKeyDataDesc;

  /**
   * Column length: Internal helper column for memo text.
   * DB column: objdesc
   */
  // this.lnKeyDataDesc;

  /**
   * All valid member bits.
   */
  // this.mbAllMembers;

 };

// ---------------- API class ValuesOfObjKeyOptions --------------------

de.elo.ix.client.ValuesOfObjKeyOptions = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ValuesOfObjKeyOptions';

 };

// ---------------- API class ReportInfoC --------------------

/**
 * Report information.
 * <p>IndexServer writes the following report entries</p>
 * <table border="2">
 * <tr>
 * <td>ReportInfo.action</td>
 * <td>ReportInfo.objId</td>
 * <td>ReportInfo.extra1</td>
 * <td>ReportInfo.extra2</td>
 * <td>ReportInfoComment</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_LOGIN</td>
 * <td>0</td>
 * <td>SSO User ID</td>
 * <td>[EXTRA2_SSO_LOGIN]</td>
 * <td>Computer name</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_LOGOUT</td>
 * <td>0</td>
 * <td>0</td>
 * <td>0</td>
 * <td>&nbsp;</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_LOCK_ARCHIVE</td>
 * <td>0</td>
 * <td>Key ID</td>
 * <td>0</td>
 * <td>Key name</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_CREATE_USER</td>
 * <td>0</td>
 * <td>User ID</td>
 * <td>User Flags</td>
 * <td>User name</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_CHECKIN_USER</td>
 * <td>0</td>
 * <td>User ID</td>
 * <td>User Flags</td>
 * <td>User name</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_DELETE_USER</td>
 * <td>0</td>
 * <td>User ID</td>
 * <td>User Flags</td>
 * <td>User name</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_CREATE_KEY</td>
 * <td>0</td>
 * <td>Key ID</td>
 * <td>0</td>
 * <td>Key name</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_CHECKIN_KEY</td>
 * <td>0</td>
 * <td>Key ID</td>
 * <td>0</td>
 * <td>Key name</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_DELETE_KEY</td>
 * <td>0</td>
 * <td>Key ID</td>
 * <td>0</td>
 * <td>Key name</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_CREATE_SORD</td>
 * <td>Object ID</td>
 * <td>Object type</td>
 * <td>Storage mask ID</td>
 * <td>Sord name</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_CHECKOUT_SORD</td>
 * <td>Object ID</td>
 * <td>0</td>
 * <td>combination of EXTRA2_*</td>
 * <td>Sord name</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_CHECKIN_SORD</td>
 * <td>Object ID</td>
 * <td>0</td>
 * <td>combination of EXTRA2_*</td>
 * <td>Sord name</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_DELETE_SORD</td>
 * <td>Object ID</td>
 * <td>Object type</td>
 * <td>combination of EXTRA2_*</td>
 * <td>Sord name</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_DELETE_REFERENCE</td>
 * <td>Object ID</td>
 * <td>Parent ID</td>
 * <td>combination of EXTRA2_*</td>
 * <td>Sord name</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_COPY_SORD</td>
 * <td>unsupported</td>
 * <td></td>
 * <td></td>
 * <td>&nbsp;</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_REFERENCE_SORD</td>
 * <td>Parent ID</td>
 * <td>Object ID</td>
 * <td></td>
 * <td>Parent name, Object name</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_MOVE_SORD</td>
 * <td>New parent ID</td>
 * <td>Object ID</td>
 * <td>Old parent ID</td>
 * <td>New parent name, old parent name, Sord name</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_LINK_SORD</td>
 * <td>From object ID</td>
 * <td>To object ID</td>
 * <td>
 * </td>
 * <td>From Sord name, To Sord name</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_UNLINK_SORD</td>
 * <td>From object ID</td>
 * <td>To object ID</td>
 * <td>
 * </td>
 * <td>From Sord name, To Sord name</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_CHECKOUT_DOCVERSION</td>
 * <td>Object ID</td>
 * <td>Document version ID</td>
 * <td>combination of EXTRA2_*</td>
 * <td>Objektname, Versionsnummer</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_CHECKIN_DOCVERSION</td>
 * <td>Objekt-ID</td>
 * <td>Doc-ID</td>
 * <td>combination of EXTRA2_*</td>
 * <td>Objektname, Versionsnummer</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_CREATE_DOC_MASK</td>
 * <td>0</td>
 * <td>Mask-ID</td>
 * <td>0</td>
 * <td>Maskname</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_CHECKIN_DOC_MASK</td>
 * <td>0</td>
 * <td>Mask-ID</td>
 * <td>0</td>
 * <td>Maskname</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_DELETE_DOC_MASK</td>
 * <td>0</td>
 * <td>Mask-ID</td>
 * <td>replace with Mask-ID</td>
 * <td>Maskname</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_CHECKIN_REPL_NAME</td>
 * <td>0</td>
 * <td>Repl-ID</td>
 * <td>0</td>
 * <td>ReplSet-Name</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_CHECKIN_REPORT_OPTIONS</td>
 * <td>0</td>
 * <td>0</td>
 * <td>0</td>
 * <td>&nbsp;</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_DELETE_REPORT</td>
 * <td>0</td>
 * <td>endDate</td>
 * <td>0</td>
 * <td>TS-End-Date</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_CHECKIN_COLOR</td>
 * <td>0</td>
 * <td>Color-ID</td>
 * <td>rgb</td>
 * <td>Color-Name</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_CHECKIN_USER_PROFILE</td>
 * <td>0</td>
 * <td>For User-ID</td>
 * <td>0</td>
 * <td>User-Name</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_DELETE_USER_PROFILE</td>
 * <td>0</td>
 * <td>For User-ID</td>
 * <td>0</td>
 * <td>User-Name</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_CREATE_WORKFLOW</td>
 * <td>0</td>
 * <td>Workflow-ID</td>
 * <td>combination of EXTRA2_*</td>
 * <td>Workflow-Name</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_CHECKIN_WORKFLOW</td>
 * <td>0</td>
 * <td>Workflow-ID</td>
 * <td>combination of EXTRA2_*</td>
 * <td>Workflow-Name</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_DELETE_WORKFLOW</td>
 * <td>0</td>
 * <td>Workflow-ID</td>
 * <td>combination of EXTRA2_*</td>
 * <td>Workflow name</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_EDIT_WORKFLOW_NODE</td>
 * <td>Object-ID</td>
 * <td>Workflow-ID</td>
 * <td>Node-ID</td>
 * <td>Node name</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_START_WORKFLOW</td>
 * <td>Object-ID</td>
 * <td>Workflow-ID</td>
 * <td>Template-WF-ID</td>
 * <td>Workflow name</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_START_ADHOC_WORKFLOW</td>
 * <td>Object-ID</td>
 * <td>Workflow-ID</td>
 * <td>0</td>
 * <td>Workflow name</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_TERMINATE_WORKFLOW</td>
 * <td>Object-ID</td>
 * <td>Workflow-ID</td>
 * <td>0</td>
 * <td>Workflow-Name</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_CHECKIN_CONFIG_FILE</td>
 * <td>0</td>
 * <td>0</td>
 * <td>0</td>
 * <td>Config file name</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_DELETE_CONFIG_FILE</td>
 * <td>0</td>
 * <td>0</td>
 * <td>0</td>
 * <td>Config file name</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_CHECKIN_COUNTER</td>
 * <td>0</td>
 * <td>Value</td>
 * <td>0</td>
 * <td>Counter-Name</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_DELETE_COUNTER</td>
 * <td>0</td>
 * <td>0</td>
 * <td>0</td>
 * <td>Counter-Name</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_INCREMENT_COUNTER</td>
 * <td>0</td>
 * <td>Value</td>
 * <td>0</td>
 * <td>Counter name</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_CHECKIN_SORD_TYPE</td>
 * <td>0</td>
 * <td>ID (Sord.type)</td>
 * <td>0</td>
 * <td>Type name</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_DELETE_SORD_TYPE</td>
 * <td>0</td>
 * <td>ID (Sord.type)</td>
 * <td>0</td>
 * <td>Type name</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_CREATE_NOTE</td>
 * <td>Objekt-ID</td>
 * <td>Note-ID (internal)</td>
 * <td>combination of EXTRA2_*</td>
 * <td>Note-Guid</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_CHECKIN_NOTE</td>
 * <td>Objekt-ID</td>
 * <td>Note-ID (internal)</td>
 * <td>combination of EXTRA2_*</td>
 * <td>Note-Guid</td>
 * </tr>
 * <tr>
 * <td>ACT_IX_DELETE_NOTE</td>
 * <td>Objekt-ID</td>
 * <td>Note-ID (internal)</td>
 * <td>combination of EXTRA2_*</td>
 * <td>Note-Guid</td>
 * </tr>
 * <tr>
 * <td>ACT_DM_READDOC</td>
 * <td>Objekt-ID</td>
 * <td>Doc-ID</td>
 * <td>0</td>
 * <td>&nbsp;</td>
 * </tr>
 * </table>
 * 
 * <p>
 * To enable or disable reporting of actions, action codes have to be transformed into
 * ERP codes first. One ERP code can subsume serverel action codes. The ERP codes
 * can be used in checkinReportOptions to manipulate reporting. Furthermore they
 * can be used in findFirstReportInfos, FindReportInfo, to search for reported actions.
 * The following table shows how actions codes are mapped to report options.
 * </p>
 * 
 * <table border="2">
 * <tr><td>Action code, ReportInfoC</td><td>ERP code, ReportOptionsC </td></tr>
 * <tr><td>ACT_CLIENT_ELOSTART           </td><td>ERP_LOGOPENARC     </td></tr>
 * <tr><td>ACT_CLIENT_ELOEND             </td><td>ERP_LOGCLOSEARC    </td></tr>
 * <tr><td>ACT_CLIENT_COMPLAIN           </td><td>ERP_LOGCOMPLAIN    </td></tr>
 * <tr><td>ACT_CLIENT_DELETEDOCS         </td><td>ERP_LOGERADOC      </td></tr>
 * <tr><td>ACT_CLIENT_KEYCHANGED         </td><td>ERP_LOGCHANGEKEY   </td></tr>
 * <tr><td>ACT_CLIENT_USERCHANGED        </td><td>ERP_LOGUSERDATA    </td></tr>
 * <tr><td>ACT_CLIENT_COLORCHANGED       </td><td>ERP_LOGCHANGEKIND  </td></tr>
 * <tr><td>ACT_CLIENT_PATHCHANGED        </td><td>ERP_LOGPATHDATA    </td></tr>
 * <tr><td>ACT_CLIENT_MASKCHANGED        </td><td>ERP_LOGMASKDATA    </td></tr>
 * <tr><td>ACT_CLIENT_PWDCHANGED         </td><td>ERP_LOGCHANGEPWD   </td></tr>
 * <tr><td>ACT_CLIENT_CREATEDOC          </td><td>ERP_LOGCREATEDOC   </td></tr>
 * <tr><td>ACT_CLIENT_EDITDOC            </td><td>ERP_LOGEDITDOC     </td></tr>
 * <tr><td>ACT_CLIENT_CHANGEDOC          </td><td>ERP_LOGEDITDOC     </td></tr>
 * <tr><td>ACT_CLIENT_CHANGEATTACH       </td><td>ERP_LOGEDITDOC     </td></tr>
 * <tr><td>ACT_CLIENT_VIEWDOC            </td><td>ERP_LOGVIEWDOC     </td></tr>
 * <tr><td>ACT_CLIENT_ERASEDOC           </td><td>ERP_LOGERADOC      </td></tr>
 * <tr><td>ACT_CLIENT_MOVEDOC            </td><td>ERP_LOGMOVEDOC     </td></tr>
 * <tr><td>ACT_CLIENT_REFDOC             </td><td>ERP_LOGREFDOC      </td></tr>
 * <tr><td>ACT_CLIENT_CHANGEKEY          </td><td>ERP_LOGCHANGEKEY   </td></tr>
 * <tr><td>ACT_CLIENT_CHANGEKIND         </td><td>ERP_LOGCHANGEKIND  </td></tr>
 * <tr><td>ACT_CLIENT_CONVERT_FORMAT     </td><td>ERP_CONVERT_FORMAT </td></tr>
 * <tr><td>ACT_CLIENT_CHECKOUT           </td><td>ERP_CHECKOUT       </td></tr>
 * <tr><td>ACT_CLIENT_CHECKIN            </td><td>ERP_CHECKIN        </td></tr>
 * <tr><td>ACT_CLIENT_CREATESOR          </td><td>ERP_LOGCREATESOR   </td></tr>
 * <tr><td>ACT_CLIENT_CHANGESOR          </td><td>ERP_LOGEDITDATA    </td></tr>
 * <tr><td>ACT_CLIENT_EDITSOR            </td><td>ERP_LOGEDITDATA    </td></tr>
 * <tr><td>ACT_CLIENT_ERASESOR           </td><td>ERP_LOGERASOR      </td></tr>
 * <tr><td>ACT_CLIENT_MOVESOR            </td><td>ERP_LOGMOVESOR     </td></tr>
 * <tr><td>ACT_CLIENT_REFSOR             </td><td>ERP_LOGREFSOR      </td></tr>
 * <tr><td>ACT_CLIENT_ADDREF             </td><td>ERP_LOGREFDOC      </td></tr>
 * <tr><td>ACT_CLIENT_ERASEREF           </td><td>ERP_LOGERAREF      </td></tr>
 * <tr><td>ACT_CLIENT_MOVEREF            </td><td>ERP_LOGMOVEDOC     </td></tr>
 * <tr><td>ACT_CLIENT_WVNEW              </td><td>ERP_WV             </td></tr>
 * <tr><td>ACT_CLIENT_WVCHANGE           </td><td>ERP_WV             </td></tr>
 * <tr><td>ACT_CLIENT_WVDELETE           </td><td>ERP_WV             </td></tr>
 * <tr><td>ACT_CLIENT_WVSEND             </td><td>ERP_WV             </td></tr>
 * <tr><td>ACT_CLIENT_WVRECEIVE          </td><td>ERP_WV             </td></tr>
 * <tr><td>ACT_CLIENT_WVNEWSEND          </td><td>ERP_WV             </td></tr>
 * <tr><td>ACT_CLIENT_WVCHANGESEND       </td><td>ERP_WV             </td></tr>
 * <tr><td>ACT_CLIENT_POSTFIRST          </td><td>ERP_POSTBOX        </td></tr>
 * <tr><td>ACT_CLIENT_POSTDELETE         </td><td>ERP_POSTBOX        </td></tr>
 * <tr><td>ACT_CLIENT_POSTDOCBUILD       </td><td>ERP_POSTBOX        </td></tr>
 * <tr><td>ACT_CLIENT_POSTEDIT           </td><td>ERP_POSTBOX        </td></tr>
 * <tr><td>ACT_CLIENT_POSTSCHLAGWORT     </td><td>ERP_POSTBOX        </td></tr>
 * <tr><td>ACT_CLIENT_POSTCOPYTO         </td><td>ERP_POSTBOX        </td></tr>
 * <tr><td>ACT_CLIENT_POSTMOVETO         </td><td>ERP_POSTBOX        </td></tr>
 * <tr><td>ACT_CLIENT_POSTMOVE           </td><td>ERP_POSTBOX        </td></tr>
 * <tr><td>ACT_CLIENT_POSTCOLLECT        </td><td>ERP_POSTBOX        </td></tr>
 * <tr><td>ACT_CLIENT_POSTNEWOLE         </td><td>ERP_POSTBOX        </td></tr>
 * <tr><td>ACT_CLIENT_POSTEXPAND         </td><td>ERP_POSTBOX        </td></tr>
 * <tr><td>ACT_CLIENT_POSTIMPORT         </td><td>ERP_POSTBOX        </td></tr>
 * <tr><td>ACT_CLIENT_POSTLAST           </td><td>ERP_POSTBOX        </td></tr>
 * <tr><td>ACT_CLIENT_CREATEFLOWTEMPL    </td><td>ERP_CREATEFLOWTEMPL</td></tr>
 * <tr><td>ACT_CLIENT_EDITFLOWTEMPL      </td><td>ERP_EDITFLOWTEMPL  </td></tr>
 * <tr><td>ACT_CLIENT_DELFLOWTEMPL       </td><td>ERP_DELFLOWTEMPL   </td></tr>
 * <tr><td>ACT_CLIENT_STARTFLOW          </td><td>ERP_STARTFLOW      </td></tr>
 * <tr><td>ACT_CLIENT_RECEIVEFLOW        </td><td>ERP_RECEIVEFLOW    </td></tr>
 * <tr><td>ACT_CLIENT_FORWARDFLOW        </td><td>ERP_FORWARDFLOW    </td></tr>
 * <tr><td>ACT_CLIENT_EDITFLOWACTIVE     </td><td>ERP_EDITFLOWACTIVE </td></tr>
 * <tr><td>ACT_CLIENT_DELFLOWACTIVE      </td><td>ERP_DELFLOWACTIVE  </td></tr>
 * <tr><td>ACT_CLIENT_FLOWTIMELIMIT      </td><td>ERP_FLOWTIMELIMT   </td></tr>
 * <tr><td>ACT_CLIENT_FLOWERRORYESNO     </td><td>ERP_FLOWERRORYESNO </td></tr>
 * <tr><td>ACT_CLIENT_REPORTCHANGED      </td><td>ERP_VERSCHIEDEN    </td></tr>
 * <tr><td>ACT_CLIENT_MASKTEXTTOOLONG    </td><td>ERP_VERSCHIEDEN    </td></tr>
 * <tr><td>ACT_CLIENT_NEWVERT         </td><td>ERP_NEWVERT    </td></tr>
 * <tr><td>ACT_CLIENT_DELVERT         </td><td>ERP_DELVERT    </td></tr>
 * <tr><td>ACT_CLIENT_FREEVERT        </td><td>ERP_FREEVERT   </td></tr>
 * <tr><td>ACT_CLIENT_REMOVEVERT         </td><td>ERP_REMOVEVERT     </td></tr>
 * <tr><td>ACT_CLIENT_SETVERT         </td><td>ERP_SETVERT    </td></tr>
 * <tr><td>ACT_CLIENT_RESETVERT          </td><td>ERP_RESETVERT      </td></tr>
 * <tr><td>ACT_CLIENT_SHOWDOC            </td><td>ERP_SHOWDOC        </td></tr>
 * <tr><td>ACT_CLIENT_SHOWSOR            </td><td>ERP_SHOWSOR        </td></tr>
 * <tr><td>ACT_CLIENT_DELVERSION         </td><td>ERP_DELVERSION     </td></tr>
 * <tr><td>ACT_CLIENT_PICKPOST           </td><td>ERP_PICKPOST       </td></tr>
 * <tr><td>ACT_DM_READDOC                </td><td>ERP_LOGVIEWDOC     </td></tr>
 * <tr><td>ACT_IX_LOGIN                   </td><td>ERP_LOGOPENARC</td></tr>
 * <tr><td>ACT_IX_LOGOUT                  </td><td>ERP_LOGCLOSEARC</td></tr>
 * <tr><td>ACT_IX_LOCK_ARCHIVE            </td><td>ERP_LOGCHANGEKEY</td></tr>
 * <tr><td>ACT_IX_CREATE_USER             </td><td>ERP_LOGUSERDATA</td></tr>
 * <tr><td>ACT_IX_CHECKIN_USER            </td><td>ERP_LOGUSERDATA</td></tr>
 * <tr><td>ACT_IX_DELETE_USER             </td><td>ERP_LOGUSERDATA</td></tr>
 * <tr><td>ACT_IX_CREATE_KEY              </td><td>ERP_LOGCHANGEKEY</td></tr>
 * <tr><td>ACT_IX_CHECKIN_KEY             </td><td>ERP_LOGCHANGEKEY</td></tr>
 * <tr><td>ACT_IX_DELETE_KEY              </td><td>ERP_LOGCHANGEKEY</td></tr>
 * <tr><td>ACT_IX_CREATE_SORD             </td><td>ERP_LOGCREATEDOC</td></tr>
 * <tr><td>ACT_IX_CHECKOUT_SORD           </td><td>ERP_LOGVIEWDOC</td></tr>
 * <tr><td>ACT_IX_CHECKIN_SORD            </td><td>ERP_LOGEDITDOC</td></tr>
 * <tr><td>ACT_IX_DELETE_SORD             </td><td>ERP_LOGERADOC</td></tr>
 * <tr><td>ACT_IX_DELETE_REFERENCE        </td><td>ERP_LOGERAREF</td></tr>
 * <tr><td>ACT_IX_COPY_SORD               </td><td>ERP_LOGCREATEDOC</td></tr>
 * <tr><td>ACT_IX_REFERENCE_SORD          </td><td>ERP_LOGREFDOC</td></tr>
 * <tr><td>ACT_IX_MOVE_SORD               </td><td>ERP_LOGMOVEDOC</td></tr>
 * <tr><td>ACT_IX_LINK_SORD               </td><td>ERP_LOGREFDOC</td></tr>
 * <tr><td>ACT_IX_UNLINK_SORD             </td><td>ERP_LOGREFDOC</td></tr>
 * <tr><td>ACT_IX_CHECKOUT_DOCVERSION     </td><td>ERP_LOGVIEWDOC</td></tr>
 * <tr><td>ACT_IX_CHECKIN_DOCVERSION      </td><td>ERP_CHECKIN</td></tr>
 * <tr><td>ACT_IX_CREATE_DOC_MASK         </td><td>ERP_LOGMASKDATA</td></tr>
 * <tr><td>ACT_IX_CHECKIN_DOC_MASK        </td><td>ERP_LOGMASKDATA</td></tr>
 * <tr><td>ACT_IX_DELETE_DOC_MASK         </td><td>ERP_LOGMASKDATA</td></tr>
 * <tr><td>ACT_IX_CHECKIN_REPL_NAME       </td><td>ERP_LOGKEYDATA</td></tr>
 * <tr><td>ACT_IX_CHECKIN_REPORT_OPTIONS  </td><td>ERP_LOGKEYDATA</td></tr>
 * <tr><td>ACT_IX_DELETE_REPORT           </td><td>ERP_LOGKEYDATA</td></tr>
 * <tr><td>ACT_IX_CHECKIN_COLOR           </td><td>ERP_LOGCOLORDATA</td></tr>
 * <tr><td>ACT_IX_CHECKIN_USER_PROFILE    </td><td>ERP_LOGKEYDATA</td></tr>
 * <tr><td>ACT_IX_DELETE_USER_PROFILE     </td><td>ERP_LOGKEYDATA</td></tr>
 * <tr><td>ACT_IX_CREATE_WORKFLOW         </td><td>ERP_CREATEFLOWTEMPL</td></tr>
 * <tr><td>ACT_IX_CHECKIN_WORKFLOW        </td><td>ERP_EDITFLOWTEMPL</td></tr>
 * <tr><td>ACT_IX_DELETE_WORKFLOW         </td><td>ERP_DELFLOWTEMPL</td></tr>
 * <tr><td>ACT_IX_EDIT_WORKFLOW_NODE      </td><td>ERP_FORWARDFLOW</td></tr>
 * <tr><td>ACT_IX_START_WORKFLOW          </td><td>ERP_STARTFLOW</td></tr>
 * <tr><td>ACT_IX_START_ADHOC_WORKFLOW    </td><td>ERP_STARTFLOW</td></tr>
 * <tr><td>ACT_IX_TERMINATE_WORKFLOW      </td><td>ERP_FORWARDFLOW</td></tr>
 * <tr><td>ACT_IX_TAKE_WORKFLOW_NODE    </td><td>ERP_FORWARDFLOW</td></tr>
 * <tr><td>ACT_IX_CHECKIN_CONFIG_FILE     </td><td>ERP_LOGKEYDATA</td></tr>
 * <tr><td>ACT_IX_DELETE_CONFIG_FILE      </td><td>ERP_LOGKEYDATA</td></tr>
 * <tr><td>ACT_IX_CHECKIN_COUNTER         </td><td>ERP_LOGKEYDATA</td></tr>
 * <tr><td>ACT_IX_DELETE_COUNTER          </td><td>ERP_LOGKEYDATA</td></tr>
 * <tr><td>ACT_IX_INCREMENT_COUNTER       </td><td>ERP_LOGKEYDATA</td></tr>
 * <tr><td>ACT_IX_CHECKIN_SORD_TYPE       </td><td>ERP_LOGKEYDATA</td></tr>
 * <tr><td>ACT_IX_DELETE_SORD_TYPE        </td><td>ERP_LOGKEYDATA</td></tr>
 * <tr><td>ACT_IX_CREATE_NOTE             </td><td>ERP_LOGKEYDATA</td></tr>
 * <tr><td>ACT_IX_CHECKIN_NOTE            </td><td>ERP_LOGEDITDOC</td></tr>
 * <tr><td>ACT_IX_CHECKOUT_NOTE           </td><td>ERP_LOGEDITDOC</td></tr>
 * <tr><td>ACT_IX_DELETE_NOTE             </td><td>ERP_LOGEDITDOC</td></tr>
 * <tr><td>ACT_IX_NEWVERT                   </td><td>ERP_NEWVERT   </td></tr>
 * <tr><td>ACT_IX_DELVERT                   </td><td>ERP_DELVERT   </td></tr>
 * <tr><td>ACT_IX_FREEVERT          </td><td>ERP_FREEVERT    </td></tr>
 * <tr><td>ACT_IX_REMOVEVERT              </td><td>ERP_REMOVEVERT</td></tr>
 * <tr><td>ACT_IX_SETVERT                   </td><td>ERP_SETVERT   </td></tr>
 * <tr><td>ACT_IX_RESETVERT               </td><td>ERP_RESETVERT </td></tr>
 * <tr><td>ACT_DM_READDOC                </td><td>ERP_DM_READDOC </td></tr>
 * </table>
 */
de.elo.ix.client.ReportInfoC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ReportInfoC';

  // this.ACT_CLIENT_NONE;

  /**
   * Login.
   */
  // this.ACT_CLIENT_ELOSTART;

  /**
   * Logout.
   */
  // this.ACT_CLIENT_ELOEND;

  /**
   * unused
   */
  // this.ACT_CLIENT_COMPLAIN;

  /**
   * unused
   */
  // this.ACT_CLIENT_DELETEDOCS;

  /**
   * Used to report a write access session.
   */
  // this.ACT_ISWRITESESSION;

  /**
   * unused
   */
  // this.ACT_CLIENT_KEYCHANGED;

  /**
   * unused
   */
  // this.ACT_CLIENT_USERCHANGED;

  /**
   * unused
   */
  // this.ACT_CLIENT_COLORCHANGED;

  /**
   * unused
   */
  // this.ACT_CLIENT_PATHCHANGED;

  /**
   * unused
   */
  // this.ACT_CLIENT_MASKCHANGED;

  /**
   * unused
   */
  // this.ACT_CLIENT_REPORTCHANGED;

  /**
   * unused
   */
  // this.ACT_CLIENT_PWDCHANGED;

  /**
   * Create a new document entry (for indexing information) in the archive database.
   * ReportInfo.text contains the document name (short description).
   */
  // this.ACT_CLIENT_CREATEDOC;

  /**
   * unused
   */
  // this.ACT_CLIENT_CHANGEDOC;

  /**
   * Write the indexing information of a document.
   */
  // this.ACT_CLIENT_EDITDOC;

  /**
   * Read the indexing information of a document.
   */
  // this.ACT_CLIENT_VIEWDOC;

  /**
   * Delete/undelete document.
   * <table border="2">
   * <tr><td>ReportInfo.extra1</td><td>parent ID.</td></tr>
   * <tr><td>ReportInfo.extra2</td><td>0 if deleted, 1 if undeleted.</td></tr>
   * <tr><td>ReportInfo.text</td><td>sord name.</td></tr>
   * </table>
   */
  // this.ACT_CLIENT_ERASEDOC;

  /**
   * unused
   */
  // this.ACT_CLIENT_MOVEDOC;

  /**
   * unused
   */
  // this.ACT_CLIENT_REFDOC;

  /**
   * unused
   */
  // this.ACT_CLIENT_CHANGEKEY;

  /**
   * unused
   */
  // this.ACT_CLIENT_CHANGEKIND;

  /**
   * unused
   */
  // this.ACT_CLIENT_CHANGEATTACH;

  /**
   * unused
   */
  // this.ACT_CLIENT_CONVERT_FORMAT;

  /**
   * Get document file for editing. This report information is written,
   * if IXServicePortIF.checkoutDoc is called with lock.
   */
  // this.ACT_CLIENT_CHECKOUT;

  /**
   * Checkin a new document file.
   * ReportInfo.extra1 ist set to the new document ID
   */
  // this.ACT_CLIENT_CHECKIN;

  /**
   * Get document file to display (not to edit). This report information is written,
   * if IXServicePortIF.checkoutDoc is called without lock.
   */
  // this.ACT_CLIENT_SHOWDOC;

  // this.ACT_CLIENT_DELVERSION;

  /**
   * Create new Sord object
   */
  // this.ACT_CLIENT_CREATESOR;

  /**
   * unused
   */
  // this.ACT_CLIENT_CHANGESOR;

  /**
   * Edited new Sord object
   */
  // this.ACT_CLIENT_EDITSOR;

  /**
   * Checkout Sord object without lock
   */
  // this.ACT_CLIENT_VIEWSOR;

  /**
   * Delete/undelete document.
   * <table border="2">
   * <tr><td>ReportInfo.extra1</td><td>parent ID.</td></tr>
   * <tr><td>ReportInfo.extra2</td><td>0 if deleted, 1 if undeleted.</td></tr>
   * <tr><td>ReportInfo.text</td><td>sord name.</td></tr>
   * </table>
   */
  // this.ACT_CLIENT_ERASESOR;

  /**
   * unused
   */
  // this.ACT_CLIENT_MOVESOR;

  /**
   * unused
   */
  // this.ACT_CLIENT_REFSOR;

  /**
   * unused
   */
  // this.ACT_CLIENT_SHOWSOR;

  /**
   * unused
   */
  // this.ACT_CLIENT_ADDREF;

  /**
   * Delete/undelete document.
   * <table border="2">
   * <tr><td>ReportInfo.extra1</td><td>parent ID.</td></tr>
   * <tr><td>ReportInfo.extra2</td><td>0 if deleted, 1 if undeleted.</td></tr>
   * </table>
   */
  // this.ACT_CLIENT_ERASEREF;

  /**
   * unused
   */
  // this.ACT_CLIENT_MOVEREF;

  /**
   * unused
   */
  // this.ACT_CLIENT_WVFIRST;

  /**
   * unused
   */
  // this.ACT_CLIENT_WVNEW;

  /**
   * unused
   */
  // this.ACT_CLIENT_WVCHANGE;

  /**
   * unused
   */
  // this.ACT_CLIENT_WVDELETE;

  /**
   * unused
   */
  // this.ACT_CLIENT_WVSEND;

  /**
   * unused
   */
  // this.ACT_CLIENT_WVRECEIVE;

  /**
   * unused
   */
  // this.ACT_CLIENT_WVNEWSEND;

  /**
   * unused
   */
  // this.ACT_CLIENT_WVCHANGESEND;

  /**
   * unused
   */
  // this.ACT_CLIENT_WVLAST;

  /**
   * unused
   */
  // this.ACT_CLIENT_POSTFIRST;

  /**
   * unused
   */
  // this.ACT_CLIENT_POSTDELETE;

  /**
   * unused
   */
  // this.ACT_CLIENT_POSTDOCBUILD;

  /**
   * unused
   */
  // this.ACT_CLIENT_POSTEDIT;

  /**
   * unused
   */
  // this.ACT_CLIENT_POSTSCHLAGWORT;

  /**
   * unused
   */
  // this.ACT_CLIENT_POSTCOPYTO;

  /**
   * unused
   */
  // this.ACT_CLIENT_POSTMOVETO;

  /**
   * unused
   */
  // this.ACT_CLIENT_POSTMOVE;

  /**
   * unused
   */
  // this.ACT_CLIENT_POSTCOLLECT;

  /**
   * unused
   */
  // this.ACT_CLIENT_POSTNEWOLE;

  /**
   * unused
   */
  // this.ACT_CLIENT_POSTEXPAND;

  /**
   * unused
   */
  // this.ACT_CLIENT_POSTIMPORT;

  /**
   * unused
   */
  // this.ACT_CLIENT_POSTRECEIVE;

  /**
   * unused
   */
  // this.ACT_CLIENT_POSTLAST;

  /**
   * unused
   */
  // this.ACT_CLIENT_CREATEFLOWTEMPL;

  /**
   * unused
   */
  // this.ACT_CLIENT_EDITFLOWTEMPL;

  /**
   * unused
   */
  // this.ACT_CLIENT_DELFLOWTEMPL;

  /**
   * unused
   */
  // this.ACT_CLIENT_STARTFLOW;

  /**
   * unused
   */
  // this.ACT_CLIENT_RECEIVEFLOW;

  /**
   * unused
   */
  // this.ACT_CLIENT_FORWARDFLOW;

  /**
   * unused
   */
  // this.ACT_CLIENT_EDITFLOWACTIVE;

  /**
   * unused
   */
  // this.ACT_CLIENT_DELFLOWACTIVE;

  /**
   * unused
   */
  // this.ACT_CLIENT_FLOWTIMELIMIT;

  /**
   * unused
   */
  // this.ACT_CLIENT_FLOWERRORYESNO;

  /**
   * unused
   */
  // this.ACT_CLIENT_MASKTEXTTOOLONG;

  /**
   * unused
   */
  // this.ACT_CLIENT_NEWVERT;

  /**
   * unused
   */
  // this.ACT_CLIENT_DELVERT;

  /**
   * unused
   */
  // this.ACT_CLIENT_FREEVERT;

  /**
   * unused
   */
  // this.ACT_CLIENT_REMOVEVERT;

  /**
   * unused
   */
  // this.ACT_CLIENT_SETVERT;

  /**
   * unused
   */
  // this.ACT_CLIENT_RESETVERT;

  /**
   * unused
   */
  // this.ACT_CLIENT_PICKPOST;

  /**
   * Delete note.
   */
  // this.ACT_CLIENT_DELETENOTE;

  /**
   * Create note.
   */
  // this.ACT_CLIENT_CREATENOTE;

  /**
   * Overwrite note.
   */
  // this.ACT_CLIENT_EDITNOTE;

  /**
   * Read document file from DM.
   */
  // this.ACT_DM_READDOC;

  /**
   * IndexServer specific report codes are higher than ACT_IX_FIRST
   */
  // this.ACT_IX_FIRST;

  // this.ACT_IX_LAST;

  // this.ACT_IX_LOGIN;

  // this.ACT_IX_LOGOUT;

  // this.ACT_IX_LOCK_ARCHIVE;

  // this.ACT_IX_CREATE_USER;

  // this.ACT_IX_CHECKIN_USER;

  // this.ACT_IX_DELETE_USER;

  // this.ACT_IX_CREATE_KEY;

  // this.ACT_IX_CHECKIN_KEY;

  // this.ACT_IX_DELETE_KEY;

  // this.ACT_IX_CREATE_SORD;

  // this.ACT_IX_CHECKOUT_SORD;

  // this.ACT_IX_CHECKIN_SORD;

  // this.ACT_IX_DELETE_SORD;

  // this.ACT_IX_DELETE_REFERENCE;

  // this.ACT_IX_CHANGE_ACL;

  // this.ACT_IX_CHANGE_RS;

  // this.ACT_IX_CREATE_DOCUMENT;

  // this.ACT_IX_COPY_SORD;

  // this.ACT_IX_REFERENCE_SORD;

  // this.ACT_IX_MOVE_SORD;

  // this.ACT_IX_LINK_SORD;

  // this.ACT_IX_UNLINK_SORD;

  // this.ACT_IX_CHECKOUT_DOCVERSION;

  // this.ACT_IX_CHECKIN_DOCVERSION;

  // this.ACT_IX_CREATE_DOC_MASK;

  // this.ACT_IX_CHECKIN_DOC_MASK;

  // this.ACT_IX_DELETE_DOC_MASK;

  // this.ACT_IX_CHECKIN_REPL_NAME;

  // this.ACT_IX_CHECKIN_REPORT_OPTIONS;

  // this.ACT_IX_DELETE_REPORT;

  // this.ACT_IX_CHECKIN_COLOR;

  // this.ACT_IX_CHECKIN_USER_PROFILE;

  // this.ACT_IX_DELETE_USER_PROFILE;

  // this.ACT_IX_CREATE_WORKFLOW;

  // this.ACT_IX_CHECKIN_WORKFLOW;

  // this.ACT_IX_DELETE_WORKFLOW;

  // this.ACT_IX_EDIT_WORKFLOW_NODE;

  // this.ACT_IX_START_WORKFLOW;

  // this.ACT_IX_START_ADHOC_WORKFLOW;

  // this.ACT_IX_TERMINATE_WORKFLOW;

  // this.ACT_IX_TAKE_WORKFLOW_NODE;

  // this.ACT_IX_CHECKIN_CONFIG_FILE;

  // this.ACT_IX_DELETE_CONFIG_FILE;

  // this.ACT_IX_CHECKIN_COUNTER;

  // this.ACT_IX_DELETE_COUNTER;

  // this.ACT_IX_INCREMENT_COUNTER;

  // this.ACT_IX_CHECKIN_SORD_TYPE;

  // this.ACT_IX_DELETE_SORD_TYPE;

  // this.ACT_IX_CREATE_NOTE;

  // this.ACT_IX_CHECKIN_NOTE;

  // this.ACT_IX_CHECKOUT_NOTE;

  // this.ACT_IX_DELETE_NOTE;

  // this.ACT_IX_NEWVERT;

  // this.ACT_IX_DELVERT;

  // this.ACT_IX_FREEVERT;

  // this.ACT_IX_REMOVEVERT;

  // this.ACT_IX_SETVERT;

  // this.ACT_IX_RESETVERT;

  // this.EXTRA2_LOCK;

  // this.EXTRA2_FORCE;

  // this.EXTRA2_DOCVERSION;

  // this.EXTRA2_ATTACHMENT;

  // this.EXTRA2_SIGNATURE;

  // this.EXTRA2_PREVIEW;

  // this.EXTRA2_FINALLY;

  // this.EXTRA2_WF_ACTIVE;

  // this.EXTRA2_WF_TEMPLATE;

  // this.EXTRA2_WF_FINISHED;

  // this.EXTRA2_WF_TERMINATE;

  // this.EXTRA2_WF_CANCEL;

  // this.EXTRA2_NOTE_NORMAL;

  // this.EXTRA2_NOTE_PERSONAL;

  // this.EXTRA2_NOTE_STAMP;

  // this.EXTRA2_SSO_LOGIN;

  // this.EXTRA2_ANNOTATION_MARKER;

  // this.EXTRA2_ANNOTATION_NOTE;

  // this.EXTRA2_REPORT_AS_LOGIN;

  // this.mbAction;

  // this.mbComment;

  // this.mbActTimeISO;

  // this.mbUserName;

 };

// ---------------- API class Relation --------------------

/**
 * Internal class.
 */
de.elo.ix.client.Relation = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.Relation';

  /**
   * DB column: parentid
   */
  // this.parentId;

  /**
   * DB column: objectid
   */
  // this.objId;

  /**
   * DB column: ordinal
   */
  // this.ordinal;

  /**
   * DB column: relstatus
   */
  // this.status;

  /**
   * DB column: reltstamp
   */
  // this.tStamp;

  /**
   * GUID
   */
  // this.guid;

 };

// ---------------- API class Document --------------------

/**
 * Document object with identifier and version arrays for
 * the document and attachments.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.Document = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.Document';

  /**
   * Attachment versions for the document.
   */
  // this.atts;

  /**
   * Versions of the document.
   */
  // this.docs;

  /**
   * Object ID for the document.
   */
  // this.objId;

 };

// ---------------- API class AclItem --------------------

/**
 * <p>Human readable ACL entry.</p>
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 */
de.elo.ix.client.AclItem = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.AclItem';

  /**
   * Access mode. Bitset of LUR_*.
   */
  // this.access;

  /**
   * ID of user, group, key.
   */
  // this.id;

  /**
   * Name of user, group, key.
   */
  // this.name;

  /**
   * Item type: user, group, key, ...
   */
  // this.type;

  /**
   * Only valid for group items.
   * Contains the IDs and names of additional groups. The user has to
   * be a member in each of this groups to be able to access the object.
   */
  // this.andGroups;

 };

// ---------------- API class WorkFlowHeadC --------------------

/**
 * <p>Bit constants for members of WorkFlowHead</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 * @see WorkFlowHead
 */
de.elo.ix.client.WorkFlowHeadC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.WorkFlowHeadC';

  /**
   * Member bit: Workflow ID
   * DB column: wfflowid
   */
  // this.mbFlowId;

  /**
   * Member bit: Timestamp
   * The format is JJJJ.MM.DD.hh.mm.ss
   * DB column: wftstamp
   */
  // this.mbTStamp;

  /**
   * Column length: Timestamp
   * The format is JJJJ.MM.DD.hh.mm.ss
   * DB column: wftstamp
   */
  // this.lnTStamp;

  /**
   * Member bit: GUID
   * DB column: wfguid
   */
  // this.mbGuid;

  /**
   * Column length: GUID
   * DB column: wfguid
   */
  // this.lnGuid;

  /**
   * Member bit: Status, != 0 means deleted
   * DB column: wfstatus
   */
  // this.mbStatus;

  /**
   * Member bit: Workflow type.
   * DB column: wftype
   */
  // this.mbType;

  /**
   * Member bit: The current sever ID (resp. replication branch) where the
   * workflow can be condinued.
   * DB column: actserverid
   */
  // this.mbActServerId;

  /**
   * Column length: The current sever ID (resp. replication branch) where the
   * workflow can be condinued.
   * DB column: actserverid
   */
  // this.lnActServerId;

  /**
   * All valid member bits.
   */
  // this.mbAllMembers;

 };

// ---------------- API class ArchiveStatisticsOptionsC --------------------

/**
 * An object of this class controls the function getArchiveStatistics.
 * @see IXServicePortIF#getArchiveStatistics(ClientInfo, long)
 * @since 7.00.020.009
 */
de.elo.ix.client.ArchiveStatisticsOptionsC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ArchiveStatisticsOptionsC';

  /**
   * Find the maximum document (version) ID
   */
  // this.mbMaxDocId;

  /**
   * Find the maximum object ID
   */
  // this.mbMaxObjId;

 };

// ---------------- API class ReminderC --------------------

de.elo.ix.client.ReminderC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ReminderC';

  /**
   * Sord guid.
   */
  // this.mbObjGuid;

  /**
   * All valid member bits.
   */
  // this.mbAll;

  // this.mbCreateDateIso;

  // this.mbDeleted;

  // this.mbPromptDateIso;

  // this.mbDueDateIso;

  // this.mbLockName;

  // this.mbNotifyOnDelete;

  // this.mbNotifyOnView;

  // this.mbReceiverName;

  // this.mbSenderName;

 };

// ---------------- API class ReportOptions --------------------

/**
 * This class contains the codes for the activities/processes that are to be
 * protocolled in a report.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.ReportOptions = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.ReportOptions';

  /**
   * ERP codes
   */
  // this.erpCodes;

  /**
   * A ReportOptionsZ constant
   */
  // this.mode;

 };

// ---------------- API class DocInfoDM --------------------

/**
 * <p>Document information table of DM. For performance reason directly read by IX</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 */
de.elo.ix.client.DocInfoDM = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.DocInfoDM';

  /**
   * Document version ID.
   * DB column: docid
   */
  // this.id;

  /**
   * Document GUID.
   * DB column: docguid
   */
  // this.guid;

  /**
   * File size.
   * DB column: docsize
   */
  // this.size;

  /**
   * MD5 hash.
   * DB column: md5
   */
  // this.md5;

  /**
   * Storage path ID
   * DB column: pathid
   */
  // this.pathId;

  /**
   * reserved
   * DB column: pathid2
   */
  // this.pathId2;

  /**
   * Create date ISO.
   * DB column: createdate
   */
  // this.createDateIso;

  /**
   * Last access date ISO.
   * DB column: lastaccess
   */
  // this.lastAccessIso;

  /**
   * Last update date ISO.
   * DB column: lastupdate
   */
  // this.lastUpdateIso;

  /**
   * User ID.
   * DB column: owner
   */
  // this.owner;

  /**
   * File extension
   * DB column: ext
   */
  // this.ext;

  /**
   * reserved
   * DB column: fclip
   */
  // this.fclip;

  /**
   * Original file extension for encrypted documents
   */
  // this.extOrig;

  /**
   * Original file size for encrypted documents
   */
  // this.sizeOrig;

  /**
   * Encryption set.
   */
  // this.encrSet;

  /**
   * Size of preview file.
   * Is 0, if there is no preview file assigned.
   * Is -1, if preview creation has failed.
   */
  // this.previewSize;

  /**
   * Preview file extension.
   */
  // this.previewExt;

  /**
   * Fulltext content timestamp
   */
  // this.fulltextContentTStamp;

  /**
   * Fulltext content file size.
   * Since the fulltext content file is usually stored in UTF-8 encoding,
   * the file size might be different from the number of characters.
   */
  // this.fulltextContentSize;

 };

// ---------------- API class UserTaskPriorityC --------------------

de.elo.ix.client.UserTaskPriorityC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.UserTaskPriorityC';

  /**
   * Minimum value = highest priority of reminder and activity
   */
  // this.MIN;

  /**
   * Maximum value = lowest priority of reminder and activity
   */
  // this.MAX;

  /**
   * Highest priority.
   */
  // this.HIGHEST;

  /**
   * Lowest priority.
   */
  // this.LOWEST;

 };

// ---------------- API class EloIxOptDataC --------------------

/**
 * <p>Bit constants for members of EloIxOpt</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 * @see EloIxOpt
 */
de.elo.ix.client.EloIxOptDataC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.EloIxOptDataC';

  /**
   * DB column: optname
   */
  // this.mbName;

  /**
   * DB column: optname
   */
  // this.lnName;

  /**
   * DB column: ixid
   */
  // this.mbIxId;

  /**
   * DB column: ixid
   */
  // this.lnIxId;

  /**
   * DB column: optval
   */
  // this.mbValue;

  /**
   * DB column: optval
   */
  // this.lnValue;

  /**
   * All valid member bits.
   */
  // this.mbAllMembers;

 };

// ---------------- API class WFVersionC --------------------

/**
 * Constants for WFVersion
 * @since 7.00.000.008
 */
de.elo.ix.client.WFVersionC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.WFVersionC';

  /**
   * Length of WFVersion.comment.
   */
  // this.lnComment;

  /**
   * Length of WFVersion.version.
   */
  // this.lnVersion;

 };

// ---------------- API class KeyValue --------------------

/**
 * This class contains a name and an associated value.
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 */
de.elo.ix.client.KeyValue = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.KeyValue';

  /**
   * Key or identifying name.
   */
  // this.key;

  /**
   * Associated value.
   */
  // this.value;

 };

// ---------------- API class EloDmOptDataC --------------------

/**
 * <p>Bit constants for members of EloDmOpt</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 * @see EloDmOpt
 */
de.elo.ix.client.EloDmOptDataC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.EloDmOptDataC';

  /**
   * DB column: optno
   */
  // this.mbId;

  /**
   * DB column: optval
   */
  // this.mbValue;

  /**
   * DB column: optval
   */
  // this.lnValue;

  /**
   * DB column: remark
   */
  // this.mbRemark;

  /**
   * DB column: remark
   */
  // this.lnRemark;

  /**
   * All valid member bits.
   */
  // this.mbAllMembers;

 };

// ---------------- API class DocInfoDMC --------------------

/**
 * <p>Bit constants for members of DocInfoDM</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 * @author imw
 * @see DocInfoDM
 */
de.elo.ix.client.DocInfoDMC = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.DocInfoDMC';

  /**
   * DB column: docid
   */
  // this.mbId;

  /**
   * DB column: docguid
   */
  // this.mbGuid;

  /**
   * DB column: docguid
   */
  // this.lnGuid;

  /**
   * DB column: docsize
   */
  // this.mbSize;

  /**
   * DB column: md5
   */
  // this.mbMd5;

  /**
   * DB column: md5
   */
  // this.lnMd5;

  /**
   * DB column: pathid
   */
  // this.mbPathId;

  /**
   * DB column: pathid2
   */
  // this.mbPathId2;

  /**
   * DB column: createdate
   */
  // this.mbCreateDateIso;

  /**
   * DB column: createdate
   */
  // this.lnCreateDateIso;

  /**
   * DB column: lastaccess
   */
  // this.mbLastAccessIso;

  /**
   * DB column: lastaccess
   */
  // this.lnLastAccessIso;

  /**
   * DB column: lastupdate
   */
  // this.mbLastUpdateIso;

  /**
   * DB column: lastupdate
   */
  // this.lnLastUpdateIso;

  /**
   * DB column: owner
   */
  // this.mbOwner;

  /**
   * DB column: ext
   */
  // this.mbExt;

  /**
   * DB column: ext
   */
  // this.lnExt;

  /**
   * DB column: fclip
   */
  // this.mbFclip;

  /**
   * DB column: fclip
   */
  // this.lnFclip;

  /**
   * Member bit: Original file extension for encrypted documents
   * DB column: extorig
   */
  // this.mbExtOrig;

  /**
   * Column length: Original file extension for encrypted documents
   * DB column: extorig
   */
  // this.lnExtOrig;

  /**
   * Member bit: Original file size for encrypted documents
   * DB column: docsizeorig
   */
  // this.mbSizeOrig;

  /**
   * Member bit: Encryption set.
   * DB column: cryptno
   */
  // this.mbEncrSet;

  /**
   * Member bit: Size of preview file.
   * Is 0, if there is no preview file assigned.
   * Is -1, if preview creation has failed.
   * DB column: previewsize
   */
  // this.mbPreviewSize;

  /**
   * Member bit: Preview file extension.
   * DB column: previewext
   */
  // this.mbPreviewExt;

  /**
   * Column length: Preview file extension.
   * DB column: previewext
   */
  // this.lnPreviewExt;

  /**
   * Member bit: Fulltext content timestamp
   * DB column: fttstamp
   */
  // this.mbFulltextContentTStamp;

  /**
   * Column length: Fulltext content timestamp
   * DB column: fttstamp
   */
  // this.lnFulltextContentTStamp;

  /**
   * Member bit: Fulltext content file size.
   * Since the fulltext content file is usually stored in UTF-8 encoding,
   * the file size might be different from the number of characters.
   * DB column: ftsize
   */
  // this.mbFulltextContentSize;

  /**
   * All valid member bits.
   */
  // this.mbAllMembers;

 };

// ---------------- API class CombineAclResult --------------------

/**
 * This class contains the results returned by the function combineAcl.
 * @since 7.00.020.000
 */
de.elo.ix.client.CombineAclResult = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.CombineAclResult';

  /**
   * Compare result.
   * Negative if ACL lhs is less than rhs.
   * Posiitve if ACL lhs is greater than rhs.
   * Zero if ACLs are equal.
   */
  // this.compareCode;

  /**
   * Compare result by ignoring the member AclItem.access.
   * Negative if ACL lhs is less than rhs.
   * Posiitve if ACL lhs is greater than rhs.
   * Zero if ACLs are equal.
   */
  // this.compareIgnoreAccessCode;

  /**
   * Contains the ACL items that are in both ACLs.
   */
  // this.intersection;

  /**
   * String representation of AclItem array intersection.
   */
  // this.intersectionAclStr;

  /**
   * Contains the sum of both ACLs.
   */
  // this.sum;

  /**
   * String representation of AclItem array sum.
   */
  // this.sumAclStr;

  /**
   * Contains the ACL items that are in ACL lhs but not in rhs.
   */
  // this.difference;

  /**
   * String representation of AclItem array difference.
   */
  // this.differenceAclStr;

  /**
   * Contains the ACL items that are in ACL rhs but not in lhs.
   */
  // this.inverseDifference;

  /**
   * String representation of AclItem array inverseDifference.
   */
  // this.inverseDifferenceAclStr;

 };

// ---------------- API class SordDetails --------------------

/**
 * Objects of this class are data elements and control the values assigned to
 * certain boolean properties(yes/no attributes).
 * 
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: ELO Digital Office GmbH</p>
 */
de.elo.ix.client.SordDetails = function() { 

  /**
   * Mandatory class member to detect type information during serialisation and deserialisation.
   */
  this.clazz = 'de.elo.ix.client.SordDetails';

  /**
   * Archiving mode. The possible values are:
   * <table border="2">
   * <tr><td>version controlled</td><td>ArchivingModeC.VERSION</td></tr>
   * <tr><td>read-only</td><td>ArchivingModeC.READONLY</td></tr>
   * <tr><td>read/write</td><td>ArchivingModeC.READWRITE</td></tr>
   * </table>
   * This value is only valid for document objects.
   */
  // this.archivingMode;

  /**
   * Encryption set number.
   */
  // this.encryptionSet;

  /**
   * Document is or should be containted in the fultext database.
   */
  // this.fulltext;

  /**
   * Sort order of child entries.
   * This value is only valid for folder objects.
   */
  // this.sortOrder;

  /**
   * True, if replication is enabled for this archive.
   */
  // this.arcReplEnabled;

  /**
   * Document is indexed in the fultext database.
   */
  // this.fulltextDone;

  /**
   * True, if this object is a root folder for replication.
   */
  // this.replRoot;

  /**
   * True, if this object has links to ohter Sords.
   * This member is read-only and is ignored in checkinSord an checkinDocEnd.
   */
  // this.linked;

 };

/**
 * Service interface class
 */
de.elo.ix.client.IXServerEvents = function(url) {
  this.url = url;
};
/**
 * Service interface class
 */
de.elo.ix.client.IXServicePortIF = function(url) {
  this.url = url;
};
de.elo.ix.client.JsonMethodIXServicePortIFAlive = function(ci) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFAlive';
  this.ci = ci;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFAlive.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('alive(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
};

de.elo.ix.client.JsonMethodIXServicePortIFBeginEditWorkFlowNode = function(ci, nFlowId, nNodeId, lockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFBeginEditWorkFlowNode';
  this.ci = ci;
  this.nFlowId = nFlowId;
  this.nNodeId = nNodeId;
  this.lockZ = lockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFBeginEditWorkFlowNode.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('beginEditWorkFlowNode(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.nFlowId = de.elo.ix.client.checkMemberInt('beginEditWorkFlowNode(...), param nFlowId', this.nFlowId);
  this.nNodeId = de.elo.ix.client.checkMemberInt('beginEditWorkFlowNode(...), param nNodeId', this.nNodeId);
  this.lockZ = de.elo.ix.client.checkMemberObject('beginEditWorkFlowNode(...), param lockZ', this.lockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFChangeSordMask = function(ci, sord, maskId, editInfoZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFChangeSordMask';
  this.ci = ci;
  this.sord = sord;
  this.maskId = maskId;
  this.editInfoZ = editInfoZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFChangeSordMask.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('changeSordMask(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.sord = de.elo.ix.client.checkMemberObject('changeSordMask(...), param sord', this.sord, 'de.elo.ix.client.Sord');
  this.maskId = de.elo.ix.client.checkMemberString('changeSordMask(...), param maskId', this.maskId);
  this.editInfoZ = de.elo.ix.client.checkMemberObject('changeSordMask(...), param editInfoZ', this.editInfoZ, 'de.elo.ix.client.EditInfoZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckinColors = function(ci, colors, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckinColors';
  this.ci = ci;
  this.colors = colors;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckinColors.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkinColors(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.colors = de.elo.ix.client.checkMemberArrayObject('checkinColors(...), param colors', this.colors, 'de.elo.ix.client.ColorData');
  this.unlockZ = de.elo.ix.client.checkMemberObject('checkinColors(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckinConfigFiles = function(ci, configFiles, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckinConfigFiles';
  this.ci = ci;
  this.configFiles = configFiles;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckinConfigFiles.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkinConfigFiles(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.configFiles = de.elo.ix.client.checkMemberArrayObject('checkinConfigFiles(...), param configFiles', this.configFiles, 'de.elo.ix.client.ConfigFile');
  this.unlockZ = de.elo.ix.client.checkMemberObject('checkinConfigFiles(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckinConfigFilesBegin = function(ci, names) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckinConfigFilesBegin';
  this.ci = ci;
  this.names = names;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckinConfigFilesBegin.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkinConfigFilesBegin(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.names = de.elo.ix.client.checkMemberArrayString('checkinConfigFilesBegin(...), param names', this.names);
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckinConfigFilesEnd = function(ci, configFiles, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckinConfigFilesEnd';
  this.ci = ci;
  this.configFiles = configFiles;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckinConfigFilesEnd.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkinConfigFilesEnd(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.configFiles = de.elo.ix.client.checkMemberArrayObject('checkinConfigFilesEnd(...), param configFiles', this.configFiles, 'de.elo.ix.client.ConfigFile');
  this.unlockZ = de.elo.ix.client.checkMemberObject('checkinConfigFilesEnd(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckinCounters = function(ci, counterInfos, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckinCounters';
  this.ci = ci;
  this.counterInfos = counterInfos;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckinCounters.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkinCounters(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.counterInfos = de.elo.ix.client.checkMemberArrayObject('checkinCounters(...), param counterInfos', this.counterInfos, 'de.elo.ix.client.CounterInfo');
  this.unlockZ = de.elo.ix.client.checkMemberObject('checkinCounters(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckinDocBegin = function(ci, document) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckinDocBegin';
  this.ci = ci;
  this.document = document;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckinDocBegin.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkinDocBegin(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.document = de.elo.ix.client.checkMemberObject('checkinDocBegin(...), param document', this.document, 'de.elo.ix.client.Document');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckinDocDupl = function(ci, sord, sordZ, document, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckinDocDupl';
  this.ci = ci;
  this.sord = sord;
  this.sordZ = sordZ;
  this.document = document;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckinDocDupl.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkinDocDupl(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.sord = de.elo.ix.client.checkMemberObject('checkinDocDupl(...), param sord', this.sord, 'de.elo.ix.client.Sord');
  this.sordZ = de.elo.ix.client.checkMemberObject('checkinDocDupl(...), param sordZ', this.sordZ, 'de.elo.ix.client.SordZ');
  this.document = de.elo.ix.client.checkMemberObject('checkinDocDupl(...), param document', this.document, 'de.elo.ix.client.Document');
  this.unlockZ = de.elo.ix.client.checkMemberObject('checkinDocDupl(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckinDocEnd = function(ci, sord, sordZ, document, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckinDocEnd';
  this.ci = ci;
  this.sord = sord;
  this.sordZ = sordZ;
  this.document = document;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckinDocEnd.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkinDocEnd(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.sord = de.elo.ix.client.checkMemberObject('checkinDocEnd(...), param sord', this.sord, 'de.elo.ix.client.Sord');
  this.sordZ = de.elo.ix.client.checkMemberObject('checkinDocEnd(...), param sordZ', this.sordZ, 'de.elo.ix.client.SordZ');
  this.document = de.elo.ix.client.checkMemberObject('checkinDocEnd(...), param document', this.document, 'de.elo.ix.client.Document');
  this.unlockZ = de.elo.ix.client.checkMemberObject('checkinDocEnd(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckinDocMask = function(ci, docMask, docMaskZ, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckinDocMask';
  this.ci = ci;
  this.docMask = docMask;
  this.docMaskZ = docMaskZ;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckinDocMask.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkinDocMask(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.docMask = de.elo.ix.client.checkMemberObject('checkinDocMask(...), param docMask', this.docMask, 'de.elo.ix.client.DocMask');
  this.docMaskZ = de.elo.ix.client.checkMemberObject('checkinDocMask(...), param docMaskZ', this.docMaskZ, 'de.elo.ix.client.DocMaskZ');
  this.unlockZ = de.elo.ix.client.checkMemberObject('checkinDocMask(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckinDocsBegin = function(ci, documents) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckinDocsBegin';
  this.ci = ci;
  this.documents = documents;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckinDocsBegin.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkinDocsBegin(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.documents = de.elo.ix.client.checkMemberArrayObject('checkinDocsBegin(...), param documents', this.documents, 'de.elo.ix.client.Document');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckinDocsEnd = function(ci, sords, sordZs, documents, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckinDocsEnd';
  this.ci = ci;
  this.sords = sords;
  this.sordZs = sordZs;
  this.documents = documents;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckinDocsEnd.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkinDocsEnd(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.sords = de.elo.ix.client.checkMemberArrayObject('checkinDocsEnd(...), param sords', this.sords, 'de.elo.ix.client.Sord');
  this.sordZs = de.elo.ix.client.checkMemberArrayObject('checkinDocsEnd(...), param sordZs', this.sordZs, 'de.elo.ix.client.SordZ');
  this.documents = de.elo.ix.client.checkMemberArrayObject('checkinDocsEnd(...), param documents', this.documents, 'de.elo.ix.client.Document');
  this.unlockZ = de.elo.ix.client.checkMemberObject('checkinDocsEnd(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckinKeys = function(ci, keyInfos, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckinKeys';
  this.ci = ci;
  this.keyInfos = keyInfos;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckinKeys.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkinKeys(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.keyInfos = de.elo.ix.client.checkMemberArrayObject('checkinKeys(...), param keyInfos', this.keyInfos, 'de.elo.ix.client.KeyInfo');
  this.unlockZ = de.elo.ix.client.checkMemberObject('checkinKeys(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckinKeywords = function(ci, kws, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckinKeywords';
  this.ci = ci;
  this.kws = kws;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckinKeywords.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkinKeywords(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.kws = de.elo.ix.client.checkMemberArrayObject('checkinKeywords(...), param kws', this.kws, 'de.elo.ix.client.Keyword');
  this.unlockZ = de.elo.ix.client.checkMemberObject('checkinKeywords(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckinNotes = function(ci, objId, notes, noteZ, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckinNotes';
  this.ci = ci;
  this.objId = objId;
  this.notes = notes;
  this.noteZ = noteZ;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckinNotes.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkinNotes(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.objId = de.elo.ix.client.checkMemberString('checkinNotes(...), param objId', this.objId);
  this.notes = de.elo.ix.client.checkMemberArrayObject('checkinNotes(...), param notes', this.notes, 'de.elo.ix.client.Note');
  this.noteZ = de.elo.ix.client.checkMemberObject('checkinNotes(...), param noteZ', this.noteZ, 'de.elo.ix.client.NoteZ');
  this.unlockZ = de.elo.ix.client.checkMemberObject('checkinNotes(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckinReminder = function(ci, remi, receiverIds, expandGroups, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckinReminder';
  this.ci = ci;
  this.remi = remi;
  this.receiverIds = receiverIds;
  this.expandGroups = expandGroups;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckinReminder.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkinReminder(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.remi = de.elo.ix.client.checkMemberObject('checkinReminder(...), param remi', this.remi, 'de.elo.ix.client.Reminder');
  this.receiverIds = de.elo.ix.client.checkMemberArrayString('checkinReminder(...), param receiverIds', this.receiverIds);
  this.expandGroups = de.elo.ix.client.checkMemberBoolean('checkinReminder(...), param expandGroups', this.expandGroups);
  this.unlockZ = de.elo.ix.client.checkMemberObject('checkinReminder(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckinReplNames = function(ci, replNames, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckinReplNames';
  this.ci = ci;
  this.replNames = replNames;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckinReplNames.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkinReplNames(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.replNames = de.elo.ix.client.checkMemberArrayObject('checkinReplNames(...), param replNames', this.replNames, 'de.elo.ix.client.ReplSetName');
  this.unlockZ = de.elo.ix.client.checkMemberObject('checkinReplNames(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckinReportOptions = function(ci, options, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckinReportOptions';
  this.ci = ci;
  this.options = options;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckinReportOptions.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkinReportOptions(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.options = de.elo.ix.client.checkMemberObject('checkinReportOptions(...), param options', this.options, 'de.elo.ix.client.ReportOptions');
  this.unlockZ = de.elo.ix.client.checkMemberObject('checkinReportOptions(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckinSord = function(ci, sord, sordZ, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckinSord';
  this.ci = ci;
  this.sord = sord;
  this.sordZ = sordZ;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckinSord.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkinSord(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.sord = de.elo.ix.client.checkMemberObject('checkinSord(...), param sord', this.sord, 'de.elo.ix.client.Sord');
  this.sordZ = de.elo.ix.client.checkMemberObject('checkinSord(...), param sordZ', this.sordZ, 'de.elo.ix.client.SordZ');
  this.unlockZ = de.elo.ix.client.checkMemberObject('checkinSord(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckinSordPath = function(ci, parentId, sords, sordZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckinSordPath';
  this.ci = ci;
  this.parentId = parentId;
  this.sords = sords;
  this.sordZ = sordZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckinSordPath.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkinSordPath(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.parentId = de.elo.ix.client.checkMemberString('checkinSordPath(...), param parentId', this.parentId);
  this.sords = de.elo.ix.client.checkMemberArrayObject('checkinSordPath(...), param sords', this.sords, 'de.elo.ix.client.Sord');
  this.sordZ = de.elo.ix.client.checkMemberObject('checkinSordPath(...), param sordZ', this.sordZ, 'de.elo.ix.client.SordZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckinSordTypes = function(ci, sordTypes, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckinSordTypes';
  this.ci = ci;
  this.sordTypes = sordTypes;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckinSordTypes.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkinSordTypes(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.sordTypes = de.elo.ix.client.checkMemberArrayObject('checkinSordTypes(...), param sordTypes', this.sordTypes, 'de.elo.ix.client.SordType');
  this.unlockZ = de.elo.ix.client.checkMemberObject('checkinSordTypes(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckinStorage = function(ci, storeInfos, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckinStorage';
  this.ci = ci;
  this.storeInfos = storeInfos;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckinStorage.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkinStorage(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.storeInfos = de.elo.ix.client.checkMemberArrayObject('checkinStorage(...), param storeInfos', this.storeInfos, 'de.elo.ix.client.StoreInfo');
  this.unlockZ = de.elo.ix.client.checkMemberObject('checkinStorage(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckinSubs = function(ci, deps, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckinSubs';
  this.ci = ci;
  this.deps = deps;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckinSubs.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkinSubs(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.deps = de.elo.ix.client.checkMemberArrayObject('checkinSubs(...), param deps', this.deps, 'de.elo.ix.client.SubsInfo');
  this.unlockZ = de.elo.ix.client.checkMemberObject('checkinSubs(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckinUserProfile = function(ci, userProfile, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckinUserProfile';
  this.ci = ci;
  this.userProfile = userProfile;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckinUserProfile.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkinUserProfile(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.userProfile = de.elo.ix.client.checkMemberObject('checkinUserProfile(...), param userProfile', this.userProfile, 'de.elo.ix.client.UserProfile');
  this.unlockZ = de.elo.ix.client.checkMemberObject('checkinUserProfile(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckinUsers = function(ci, userInfos, checkinUsersZ, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckinUsers';
  this.ci = ci;
  this.userInfos = userInfos;
  this.checkinUsersZ = checkinUsersZ;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckinUsers.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkinUsers(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.userInfos = de.elo.ix.client.checkMemberArrayObject('checkinUsers(...), param userInfos', this.userInfos, 'de.elo.ix.client.UserInfo');
  this.checkinUsersZ = de.elo.ix.client.checkMemberObject('checkinUsers(...), param checkinUsersZ', this.checkinUsersZ, 'de.elo.ix.client.CheckinUsersZ');
  this.unlockZ = de.elo.ix.client.checkMemberObject('checkinUsers(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckinWorkFlow = function(ci, wf, workFlowDiagramZ, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckinWorkFlow';
  this.ci = ci;
  this.wf = wf;
  this.workFlowDiagramZ = workFlowDiagramZ;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckinWorkFlow.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkinWorkFlow(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.wf = de.elo.ix.client.checkMemberObject('checkinWorkFlow(...), param wf', this.wf, 'de.elo.ix.client.WFDiagram');
  this.workFlowDiagramZ = de.elo.ix.client.checkMemberObject('checkinWorkFlow(...), param workFlowDiagramZ', this.workFlowDiagramZ, 'de.elo.ix.client.WFDiagramZ');
  this.unlockZ = de.elo.ix.client.checkMemberObject('checkinWorkFlow(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckoutColors = function(ci, lockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckoutColors';
  this.ci = ci;
  this.lockZ = lockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckoutColors.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkoutColors(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.lockZ = de.elo.ix.client.checkMemberObject('checkoutColors(...), param lockZ', this.lockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckoutConfigFiles = function(ci, names, configFileZ, lockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckoutConfigFiles';
  this.ci = ci;
  this.names = names;
  this.configFileZ = configFileZ;
  this.lockZ = lockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckoutConfigFiles.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkoutConfigFiles(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.names = de.elo.ix.client.checkMemberArrayString('checkoutConfigFiles(...), param names', this.names);
  this.configFileZ = de.elo.ix.client.checkMemberObject('checkoutConfigFiles(...), param configFileZ', this.configFileZ, 'de.elo.ix.client.ConfigFileZ');
  this.lockZ = de.elo.ix.client.checkMemberObject('checkoutConfigFiles(...), param lockZ', this.lockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckoutCounters = function(ci, counterNames, incrementCounters, lockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckoutCounters';
  this.ci = ci;
  this.counterNames = counterNames;
  this.incrementCounters = incrementCounters;
  this.lockZ = lockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckoutCounters.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkoutCounters(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.counterNames = de.elo.ix.client.checkMemberArrayString('checkoutCounters(...), param counterNames', this.counterNames);
  this.incrementCounters = de.elo.ix.client.checkMemberBoolean('checkoutCounters(...), param incrementCounters', this.incrementCounters);
  this.lockZ = de.elo.ix.client.checkMemberObject('checkoutCounters(...), param lockZ', this.lockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckoutDoc = function(ci, objId, docId, editInfoZ, lockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckoutDoc';
  this.ci = ci;
  this.objId = objId;
  this.docId = docId;
  this.editInfoZ = editInfoZ;
  this.lockZ = lockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckoutDoc.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkoutDoc(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.objId = de.elo.ix.client.checkMemberString('checkoutDoc(...), param objId', this.objId);
  this.docId = de.elo.ix.client.checkMemberString('checkoutDoc(...), param docId', this.docId);
  this.editInfoZ = de.elo.ix.client.checkMemberObject('checkoutDoc(...), param editInfoZ', this.editInfoZ, 'de.elo.ix.client.EditInfoZ');
  this.lockZ = de.elo.ix.client.checkMemberObject('checkoutDoc(...), param lockZ', this.lockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckoutDocMask = function(ci, maskId, docMaskZ, lockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckoutDocMask';
  this.ci = ci;
  this.maskId = maskId;
  this.docMaskZ = docMaskZ;
  this.lockZ = lockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckoutDocMask.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkoutDocMask(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.maskId = de.elo.ix.client.checkMemberString('checkoutDocMask(...), param maskId', this.maskId);
  this.docMaskZ = de.elo.ix.client.checkMemberObject('checkoutDocMask(...), param docMaskZ', this.docMaskZ, 'de.elo.ix.client.DocMaskZ');
  this.lockZ = de.elo.ix.client.checkMemberObject('checkoutDocMask(...), param lockZ', this.lockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckoutKeys = function(ci, ids, lockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckoutKeys';
  this.ci = ci;
  this.ids = ids;
  this.lockZ = lockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckoutKeys.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkoutKeys(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.ids = de.elo.ix.client.checkMemberArrayString('checkoutKeys(...), param ids', this.ids);
  this.lockZ = de.elo.ix.client.checkMemberObject('checkoutKeys(...), param lockZ', this.lockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckoutKeywords = function(ci, kwids, keywordZ, max, lockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckoutKeywords';
  this.ci = ci;
  this.kwids = kwids;
  this.keywordZ = keywordZ;
  this.max = max;
  this.lockZ = lockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckoutKeywords.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkoutKeywords(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.kwids = de.elo.ix.client.checkMemberArrayString('checkoutKeywords(...), param kwids', this.kwids);
  this.keywordZ = de.elo.ix.client.checkMemberObject('checkoutKeywords(...), param keywordZ', this.keywordZ, 'de.elo.ix.client.KeywordZ');
  this.max = de.elo.ix.client.checkMemberInt('checkoutKeywords(...), param max', this.max);
  this.lockZ = de.elo.ix.client.checkMemberObject('checkoutKeywords(...), param lockZ', this.lockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckoutNotes = function(ci, objId, noteIds, noteZ, lockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckoutNotes';
  this.ci = ci;
  this.objId = objId;
  this.noteIds = noteIds;
  this.noteZ = noteZ;
  this.lockZ = lockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckoutNotes.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkoutNotes(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.objId = de.elo.ix.client.checkMemberString('checkoutNotes(...), param objId', this.objId);
  this.noteIds = de.elo.ix.client.checkMemberArrayString('checkoutNotes(...), param noteIds', this.noteIds);
  this.noteZ = de.elo.ix.client.checkMemberObject('checkoutNotes(...), param noteZ', this.noteZ, 'de.elo.ix.client.NoteZ');
  this.lockZ = de.elo.ix.client.checkMemberObject('checkoutNotes(...), param lockZ', this.lockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckoutReminders = function(ci, reminderIds, lockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckoutReminders';
  this.ci = ci;
  this.reminderIds = reminderIds;
  this.lockZ = lockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckoutReminders.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkoutReminders(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.reminderIds = de.elo.ix.client.checkMemberArrayInt('checkoutReminders(...), param reminderIds', this.reminderIds);
  this.lockZ = de.elo.ix.client.checkMemberObject('checkoutReminders(...), param lockZ', this.lockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckoutReplNames = function(ci, lockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckoutReplNames';
  this.ci = ci;
  this.lockZ = lockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckoutReplNames.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkoutReplNames(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.lockZ = de.elo.ix.client.checkMemberObject('checkoutReplNames(...), param lockZ', this.lockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckoutReportOptions = function(ci, lockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckoutReportOptions';
  this.ci = ci;
  this.lockZ = lockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckoutReportOptions.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkoutReportOptions(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.lockZ = de.elo.ix.client.checkMemberObject('checkoutReportOptions(...), param lockZ', this.lockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckoutSord = function(ci, objId, editInfoZ, lockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckoutSord';
  this.ci = ci;
  this.objId = objId;
  this.editInfoZ = editInfoZ;
  this.lockZ = lockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckoutSord.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkoutSord(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.objId = de.elo.ix.client.checkMemberString('checkoutSord(...), param objId', this.objId);
  this.editInfoZ = de.elo.ix.client.checkMemberObject('checkoutSord(...), param editInfoZ', this.editInfoZ, 'de.elo.ix.client.EditInfoZ');
  this.lockZ = de.elo.ix.client.checkMemberObject('checkoutSord(...), param lockZ', this.lockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckoutSordHistory = function(ci, objId) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckoutSordHistory';
  this.ci = ci;
  this.objId = objId;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckoutSordHistory.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkoutSordHistory(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.objId = de.elo.ix.client.checkMemberString('checkoutSordHistory(...), param objId', this.objId);
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckoutSordTypes = function(ci, sordTypeIds, sordTypeZ, lockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckoutSordTypes';
  this.ci = ci;
  this.sordTypeIds = sordTypeIds;
  this.sordTypeZ = sordTypeZ;
  this.lockZ = lockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckoutSordTypes.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkoutSordTypes(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.sordTypeIds = de.elo.ix.client.checkMemberArrayInt('checkoutSordTypes(...), param sordTypeIds', this.sordTypeIds);
  this.sordTypeZ = de.elo.ix.client.checkMemberObject('checkoutSordTypes(...), param sordTypeZ', this.sordTypeZ, 'de.elo.ix.client.SordTypeZ');
  this.lockZ = de.elo.ix.client.checkMemberObject('checkoutSordTypes(...), param lockZ', this.lockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckoutStorage = function(ci, ids, lockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckoutStorage';
  this.ci = ci;
  this.ids = ids;
  this.lockZ = lockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckoutStorage.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkoutStorage(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.ids = de.elo.ix.client.checkMemberArrayString('checkoutStorage(...), param ids', this.ids);
  this.lockZ = de.elo.ix.client.checkMemberObject('checkoutStorage(...), param lockZ', this.lockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckoutSubs = function(ci, userId, lockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckoutSubs';
  this.ci = ci;
  this.userId = userId;
  this.lockZ = lockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckoutSubs.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkoutSubs(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.userId = de.elo.ix.client.checkMemberString('checkoutSubs(...), param userId', this.userId);
  this.lockZ = de.elo.ix.client.checkMemberObject('checkoutSubs(...), param lockZ', this.lockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckoutUserProfile = function(ci, userProfile, lockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckoutUserProfile';
  this.ci = ci;
  this.userProfile = userProfile;
  this.lockZ = lockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckoutUserProfile.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkoutUserProfile(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.userProfile = de.elo.ix.client.checkMemberObject('checkoutUserProfile(...), param userProfile', this.userProfile, 'de.elo.ix.client.UserProfile');
  this.lockZ = de.elo.ix.client.checkMemberObject('checkoutUserProfile(...), param lockZ', this.lockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckoutUsers = function(ci, ids, checkoutUsersZ, lockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckoutUsers';
  this.ci = ci;
  this.ids = ids;
  this.checkoutUsersZ = checkoutUsersZ;
  this.lockZ = lockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckoutUsers.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkoutUsers(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.ids = de.elo.ix.client.checkMemberArrayString('checkoutUsers(...), param ids', this.ids);
  this.checkoutUsersZ = de.elo.ix.client.checkMemberObject('checkoutUsers(...), param checkoutUsersZ', this.checkoutUsersZ, 'de.elo.ix.client.CheckoutUsersZ');
  this.lockZ = de.elo.ix.client.checkMemberObject('checkoutUsers(...), param lockZ', this.lockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckoutWorkFlow = function(ci, flowId, typeZ, workFlowDiagramZ, lockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckoutWorkFlow';
  this.ci = ci;
  this.flowId = flowId;
  this.typeZ = typeZ;
  this.workFlowDiagramZ = workFlowDiagramZ;
  this.lockZ = lockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckoutWorkFlow.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkoutWorkFlow(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.flowId = de.elo.ix.client.checkMemberString('checkoutWorkFlow(...), param flowId', this.flowId);
  this.typeZ = de.elo.ix.client.checkMemberObject('checkoutWorkFlow(...), param typeZ', this.typeZ, 'de.elo.ix.client.WFTypeZ');
  this.workFlowDiagramZ = de.elo.ix.client.checkMemberObject('checkoutWorkFlow(...), param workFlowDiagramZ', this.workFlowDiagramZ, 'de.elo.ix.client.WFDiagramZ');
  this.lockZ = de.elo.ix.client.checkMemberObject('checkoutWorkFlow(...), param lockZ', this.lockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCleanupStart = function(ci, deleteOptions) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCleanupStart';
  this.ci = ci;
  this.deleteOptions = deleteOptions;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCleanupStart.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('cleanupStart(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.deleteOptions = de.elo.ix.client.checkMemberObject('cleanupStart(...), param deleteOptions', this.deleteOptions, 'de.elo.ix.client.DeleteOptions');
};

de.elo.ix.client.JsonMethodIXServicePortIFCleanupState = function(ci) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCleanupState';
  this.ci = ci;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCleanupState.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('cleanupState(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
};

de.elo.ix.client.JsonMethodIXServicePortIFCleanupStop = function(ci) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCleanupStop';
  this.ci = ci;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCleanupStop.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('cleanupStop(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
};

de.elo.ix.client.JsonMethodIXServicePortIFCollectJobStates = function(ci, activeJobs, finishedJobs, fullInfo) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCollectJobStates';
  this.ci = ci;
  this.activeJobs = activeJobs;
  this.finishedJobs = finishedJobs;
  this.fullInfo = fullInfo;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCollectJobStates.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('collectJobStates(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.activeJobs = de.elo.ix.client.checkMemberBoolean('collectJobStates(...), param activeJobs', this.activeJobs);
  this.finishedJobs = de.elo.ix.client.checkMemberBoolean('collectJobStates(...), param finishedJobs', this.finishedJobs);
  this.fullInfo = de.elo.ix.client.checkMemberBoolean('collectJobStates(...), param fullInfo', this.fullInfo);
};

de.elo.ix.client.JsonMethodIXServicePortIFCollectWorkFlowNodes = function(ci, flowName, wfTypeZ, nodeName, nodeType, objId, enterDateIso, exitDateIso, userIds, onlyActive, onlyStartNodes) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCollectWorkFlowNodes';
  this.ci = ci;
  this.flowName = flowName;
  this.wfTypeZ = wfTypeZ;
  this.nodeName = nodeName;
  this.nodeType = nodeType;
  this.objId = objId;
  this.enterDateIso = enterDateIso;
  this.exitDateIso = exitDateIso;
  this.userIds = userIds;
  this.onlyActive = onlyActive;
  this.onlyStartNodes = onlyStartNodes;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCollectWorkFlowNodes.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('collectWorkFlowNodes(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.flowName = de.elo.ix.client.checkMemberString('collectWorkFlowNodes(...), param flowName', this.flowName);
  this.wfTypeZ = de.elo.ix.client.checkMemberObject('collectWorkFlowNodes(...), param wfTypeZ', this.wfTypeZ, 'de.elo.ix.client.WFTypeZ');
  this.nodeName = de.elo.ix.client.checkMemberString('collectWorkFlowNodes(...), param nodeName', this.nodeName);
  this.nodeType = de.elo.ix.client.checkMemberInt('collectWorkFlowNodes(...), param nodeType', this.nodeType);
  this.objId = de.elo.ix.client.checkMemberString('collectWorkFlowNodes(...), param objId', this.objId);
  this.enterDateIso = de.elo.ix.client.checkMemberString('collectWorkFlowNodes(...), param enterDateIso', this.enterDateIso);
  this.exitDateIso = de.elo.ix.client.checkMemberString('collectWorkFlowNodes(...), param exitDateIso', this.exitDateIso);
  this.userIds = de.elo.ix.client.checkMemberArrayString('collectWorkFlowNodes(...), param userIds', this.userIds);
  this.onlyActive = de.elo.ix.client.checkMemberBoolean('collectWorkFlowNodes(...), param onlyActive', this.onlyActive);
  this.onlyStartNodes = de.elo.ix.client.checkMemberBoolean('collectWorkFlowNodes(...), param onlyStartNodes', this.onlyStartNodes);
};

de.elo.ix.client.JsonMethodIXServicePortIFCollectWorkFlows = function(ci, typeZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCollectWorkFlows';
  this.ci = ci;
  this.typeZ = typeZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCollectWorkFlows.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('collectWorkFlows(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.typeZ = de.elo.ix.client.checkMemberObject('collectWorkFlows(...), param typeZ', this.typeZ, 'de.elo.ix.client.WFTypeZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFFindFirstWorkflows = function(ci, findInfo, max, wfDiagramZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFFindFirstWorkflows';
  this.ci = ci;
  this.findInfo = findInfo;
  this.max = max;
  this.wfDiagramZ = wfDiagramZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFFindFirstWorkflows.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('findFirstWorkflows(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.findInfo = de.elo.ix.client.checkMemberObject('findFirstWorkflows(...), param findInfo', this.findInfo, 'de.elo.ix.client.FindWorkflowInfo');
  this.max = de.elo.ix.client.checkMemberInt('findFirstWorkflows(...), param max', this.max);
  this.wfDiagramZ = de.elo.ix.client.checkMemberObject('findFirstWorkflows(...), param wfDiagramZ', this.wfDiagramZ, 'de.elo.ix.client.WFDiagramZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFFindNextWorkflows = function(ci, searchId, index, maxResults) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFFindNextWorkflows';
  this.ci = ci;
  this.searchId = searchId;
  this.index = index;
  this.maxResults = maxResults;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFFindNextWorkflows.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('findNextWorkflows(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.searchId = de.elo.ix.client.checkMemberString('findNextWorkflows(...), param searchId', this.searchId);
  this.index = de.elo.ix.client.checkMemberInt('findNextWorkflows(...), param index', this.index);
  this.maxResults = de.elo.ix.client.checkMemberInt('findNextWorkflows(...), param maxResults', this.maxResults);
};

de.elo.ix.client.JsonMethodIXServicePortIFCookKeyword = function(ci, kwid) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCookKeyword';
  this.ci = ci;
  this.kwid = kwid;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCookKeyword.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('cookKeyword(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.kwid = de.elo.ix.client.checkMemberString('cookKeyword(...), param kwid', this.kwid);
};

de.elo.ix.client.JsonMethodIXServicePortIFCopySord = function(ci, newParentId, objId, copyInfo, copySordZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCopySord';
  this.ci = ci;
  this.newParentId = newParentId;
  this.objId = objId;
  this.copyInfo = copyInfo;
  this.copySordZ = copySordZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCopySord.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('copySord(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.newParentId = de.elo.ix.client.checkMemberString('copySord(...), param newParentId', this.newParentId);
  this.objId = de.elo.ix.client.checkMemberString('copySord(...), param objId', this.objId);
  this.copyInfo = de.elo.ix.client.checkMemberObject('copySord(...), param copyInfo', this.copyInfo, 'de.elo.ix.client.CopyInfo');
  this.copySordZ = de.elo.ix.client.checkMemberObject('copySord(...), param copySordZ', this.copySordZ, 'de.elo.ix.client.CopySordZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCreateDoc = function(ci, parentId, maskId, docTemplate, editInfoZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCreateDoc';
  this.ci = ci;
  this.parentId = parentId;
  this.maskId = maskId;
  this.docTemplate = docTemplate;
  this.editInfoZ = editInfoZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCreateDoc.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('createDoc(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.parentId = de.elo.ix.client.checkMemberString('createDoc(...), param parentId', this.parentId);
  this.maskId = de.elo.ix.client.checkMemberString('createDoc(...), param maskId', this.maskId);
  this.docTemplate = de.elo.ix.client.checkMemberString('createDoc(...), param docTemplate', this.docTemplate);
  this.editInfoZ = de.elo.ix.client.checkMemberObject('createDoc(...), param editInfoZ', this.editInfoZ, 'de.elo.ix.client.EditInfoZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCreateDocMask = function(ci, maskId) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCreateDocMask';
  this.ci = ci;
  this.maskId = maskId;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCreateDocMask.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('createDocMask(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.maskId = de.elo.ix.client.checkMemberString('createDocMask(...), param maskId', this.maskId);
};

de.elo.ix.client.JsonMethodIXServicePortIFCreateKey = function(ci) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCreateKey';
  this.ci = ci;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCreateKey.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('createKey(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
};

de.elo.ix.client.JsonMethodIXServicePortIFCreateNote = function(ci, objId) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCreateNote';
  this.ci = ci;
  this.objId = objId;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCreateNote.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('createNote(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.objId = de.elo.ix.client.checkMemberString('createNote(...), param objId', this.objId);
};

de.elo.ix.client.JsonMethodIXServicePortIFCreateNote2 = function(ci, objId, noteType, templId) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCreateNote2';
  this.ci = ci;
  this.objId = objId;
  this.noteType = noteType;
  this.templId = templId;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCreateNote2.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('createNote2(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.objId = de.elo.ix.client.checkMemberString('createNote2(...), param objId', this.objId);
  this.noteType = de.elo.ix.client.checkMemberInt('createNote2(...), param noteType', this.noteType);
  this.templId = de.elo.ix.client.checkMemberString('createNote2(...), param templId', this.templId);
};

de.elo.ix.client.JsonMethodIXServicePortIFCreateReminder = function(ci, objId) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCreateReminder';
  this.ci = ci;
  this.objId = objId;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCreateReminder.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('createReminder(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.objId = de.elo.ix.client.checkMemberString('createReminder(...), param objId', this.objId);
};

de.elo.ix.client.JsonMethodIXServicePortIFCreateSord = function(ci, parentId, maskId, editInfoZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCreateSord';
  this.ci = ci;
  this.parentId = parentId;
  this.maskId = maskId;
  this.editInfoZ = editInfoZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCreateSord.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('createSord(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.parentId = de.elo.ix.client.checkMemberString('createSord(...), param parentId', this.parentId);
  this.maskId = de.elo.ix.client.checkMemberString('createSord(...), param maskId', this.maskId);
  this.editInfoZ = de.elo.ix.client.checkMemberObject('createSord(...), param editInfoZ', this.editInfoZ, 'de.elo.ix.client.EditInfoZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCreateUser = function(ci, rightsAsUserId) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCreateUser';
  this.ci = ci;
  this.rightsAsUserId = rightsAsUserId;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCreateUser.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('createUser(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.rightsAsUserId = de.elo.ix.client.checkMemberString('createUser(...), param rightsAsUserId', this.rightsAsUserId);
};

de.elo.ix.client.JsonMethodIXServicePortIFCreateWFNode = function(ci, nodeId, nodeTypeC) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCreateWFNode';
  this.ci = ci;
  this.nodeId = nodeId;
  this.nodeTypeC = nodeTypeC;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCreateWFNode.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('createWFNode(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.nodeId = de.elo.ix.client.checkMemberInt('createWFNode(...), param nodeId', this.nodeId);
  this.nodeTypeC = de.elo.ix.client.checkMemberInt('createWFNode(...), param nodeTypeC', this.nodeTypeC);
};

de.elo.ix.client.JsonMethodIXServicePortIFCreateWorkFlow = function(ci, wfName, typeZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCreateWorkFlow';
  this.ci = ci;
  this.wfName = wfName;
  this.typeZ = typeZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCreateWorkFlow.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('createWorkFlow(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.wfName = de.elo.ix.client.checkMemberString('createWorkFlow(...), param wfName', this.wfName);
  this.typeZ = de.elo.ix.client.checkMemberObject('createWorkFlow(...), param typeZ', this.typeZ, 'de.elo.ix.client.WFTypeZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFDeleteConfigFiles = function(ci, names, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFDeleteConfigFiles';
  this.ci = ci;
  this.names = names;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFDeleteConfigFiles.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('deleteConfigFiles(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.names = de.elo.ix.client.checkMemberArrayString('deleteConfigFiles(...), param names', this.names);
  this.unlockZ = de.elo.ix.client.checkMemberObject('deleteConfigFiles(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFDeleteCounters = function(ci, counterNames, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFDeleteCounters';
  this.ci = ci;
  this.counterNames = counterNames;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFDeleteCounters.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('deleteCounters(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.counterNames = de.elo.ix.client.checkMemberArrayString('deleteCounters(...), param counterNames', this.counterNames);
  this.unlockZ = de.elo.ix.client.checkMemberObject('deleteCounters(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFDeleteDocMask = function(ci, maskId, assignMaskId, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFDeleteDocMask';
  this.ci = ci;
  this.maskId = maskId;
  this.assignMaskId = assignMaskId;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFDeleteDocMask.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('deleteDocMask(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.maskId = de.elo.ix.client.checkMemberString('deleteDocMask(...), param maskId', this.maskId);
  this.assignMaskId = de.elo.ix.client.checkMemberString('deleteDocMask(...), param assignMaskId', this.assignMaskId);
  this.unlockZ = de.elo.ix.client.checkMemberObject('deleteDocMask(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFDeleteKeys = function(ci, ids, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFDeleteKeys';
  this.ci = ci;
  this.ids = ids;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFDeleteKeys.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('deleteKeys(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.ids = de.elo.ix.client.checkMemberArrayString('deleteKeys(...), param ids', this.ids);
  this.unlockZ = de.elo.ix.client.checkMemberObject('deleteKeys(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFDeleteKeywords = function(ci, kwids, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFDeleteKeywords';
  this.ci = ci;
  this.kwids = kwids;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFDeleteKeywords.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('deleteKeywords(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.kwids = de.elo.ix.client.checkMemberArrayString('deleteKeywords(...), param kwids', this.kwids);
  this.unlockZ = de.elo.ix.client.checkMemberObject('deleteKeywords(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFDeleteNotes = function(ci, noteIds, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFDeleteNotes';
  this.ci = ci;
  this.noteIds = noteIds;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFDeleteNotes.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('deleteNotes(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.noteIds = de.elo.ix.client.checkMemberArrayString('deleteNotes(...), param noteIds', this.noteIds);
  this.unlockZ = de.elo.ix.client.checkMemberObject('deleteNotes(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFDeleteReminders = function(ci, reminderIds, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFDeleteReminders';
  this.ci = ci;
  this.reminderIds = reminderIds;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFDeleteReminders.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('deleteReminders(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.reminderIds = de.elo.ix.client.checkMemberArrayInt('deleteReminders(...), param reminderIds', this.reminderIds);
  this.unlockZ = de.elo.ix.client.checkMemberObject('deleteReminders(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFDeleteReport = function(ci, endDateISO) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFDeleteReport';
  this.ci = ci;
  this.endDateISO = endDateISO;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFDeleteReport.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('deleteReport(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.endDateISO = de.elo.ix.client.checkMemberString('deleteReport(...), param endDateISO', this.endDateISO);
};

de.elo.ix.client.JsonMethodIXServicePortIFDeleteSord = function(ci, parentId, objId, unlockZ, deleteOptions) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFDeleteSord';
  this.ci = ci;
  this.parentId = parentId;
  this.objId = objId;
  this.unlockZ = unlockZ;
  this.deleteOptions = deleteOptions;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFDeleteSord.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('deleteSord(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.parentId = de.elo.ix.client.checkMemberString('deleteSord(...), param parentId', this.parentId);
  this.objId = de.elo.ix.client.checkMemberString('deleteSord(...), param objId', this.objId);
  this.unlockZ = de.elo.ix.client.checkMemberObject('deleteSord(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
  this.deleteOptions = de.elo.ix.client.checkMemberObject('deleteSord(...), param deleteOptions', this.deleteOptions, 'de.elo.ix.client.DeleteOptions');
};

de.elo.ix.client.JsonMethodIXServicePortIFDeleteSordTypes = function(ci, sordTypeIds, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFDeleteSordTypes';
  this.ci = ci;
  this.sordTypeIds = sordTypeIds;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFDeleteSordTypes.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('deleteSordTypes(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.sordTypeIds = de.elo.ix.client.checkMemberArrayInt('deleteSordTypes(...), param sordTypeIds', this.sordTypeIds);
  this.unlockZ = de.elo.ix.client.checkMemberObject('deleteSordTypes(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFDeleteSubs = function(ci, deps, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFDeleteSubs';
  this.ci = ci;
  this.deps = deps;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFDeleteSubs.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('deleteSubs(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.deps = de.elo.ix.client.checkMemberArrayObject('deleteSubs(...), param deps', this.deps, 'de.elo.ix.client.SubsInfo');
  this.unlockZ = de.elo.ix.client.checkMemberObject('deleteSubs(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFDeleteUserProfile = function(ci, userProfile, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFDeleteUserProfile';
  this.ci = ci;
  this.userProfile = userProfile;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFDeleteUserProfile.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('deleteUserProfile(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.userProfile = de.elo.ix.client.checkMemberObject('deleteUserProfile(...), param userProfile', this.userProfile, 'de.elo.ix.client.UserProfile');
  this.unlockZ = de.elo.ix.client.checkMemberObject('deleteUserProfile(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFDeleteUsers = function(ci, ids, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFDeleteUsers';
  this.ci = ci;
  this.ids = ids;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFDeleteUsers.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('deleteUsers(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.ids = de.elo.ix.client.checkMemberArrayString('deleteUsers(...), param ids', this.ids);
  this.unlockZ = de.elo.ix.client.checkMemberObject('deleteUsers(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFDeleteWorkFlow = function(ci, flowId, typeZ, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFDeleteWorkFlow';
  this.ci = ci;
  this.flowId = flowId;
  this.typeZ = typeZ;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFDeleteWorkFlow.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('deleteWorkFlow(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.flowId = de.elo.ix.client.checkMemberString('deleteWorkFlow(...), param flowId', this.flowId);
  this.typeZ = de.elo.ix.client.checkMemberObject('deleteWorkFlow(...), param typeZ', this.typeZ, 'de.elo.ix.client.WFTypeZ');
  this.unlockZ = de.elo.ix.client.checkMemberObject('deleteWorkFlow(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFEndEditWorkFlowNode = function(ci, nFlowId, nNodeId, bTerminate, bCancel, sName, sComment, arrEnterNodesIds) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFEndEditWorkFlowNode';
  this.ci = ci;
  this.nFlowId = nFlowId;
  this.nNodeId = nNodeId;
  this.bTerminate = bTerminate;
  this.bCancel = bCancel;
  this.sName = sName;
  this.sComment = sComment;
  this.arrEnterNodesIds = arrEnterNodesIds;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFEndEditWorkFlowNode.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('endEditWorkFlowNode(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.nFlowId = de.elo.ix.client.checkMemberInt('endEditWorkFlowNode(...), param nFlowId', this.nFlowId);
  this.nNodeId = de.elo.ix.client.checkMemberInt('endEditWorkFlowNode(...), param nNodeId', this.nNodeId);
  this.bTerminate = de.elo.ix.client.checkMemberBoolean('endEditWorkFlowNode(...), param bTerminate', this.bTerminate);
  this.bCancel = de.elo.ix.client.checkMemberBoolean('endEditWorkFlowNode(...), param bCancel', this.bCancel);
  this.sName = de.elo.ix.client.checkMemberString('endEditWorkFlowNode(...), param sName', this.sName);
  this.sComment = de.elo.ix.client.checkMemberString('endEditWorkFlowNode(...), param sComment', this.sComment);
  this.arrEnterNodesIds = de.elo.ix.client.checkMemberArrayInt('endEditWorkFlowNode(...), param arrEnterNodesIds', this.arrEnterNodesIds);
};

de.elo.ix.client.JsonMethodIXServicePortIFFindClose = function(ci, searchId) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFFindClose';
  this.ci = ci;
  this.searchId = searchId;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFFindClose.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('findClose(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.searchId = de.elo.ix.client.checkMemberString('findClose(...), param searchId', this.searchId);
};

de.elo.ix.client.JsonMethodIXServicePortIFFindFirstConfigFiles = function(ci, findInfo, max, configFileZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFFindFirstConfigFiles';
  this.ci = ci;
  this.findInfo = findInfo;
  this.max = max;
  this.configFileZ = configFileZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFFindFirstConfigFiles.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('findFirstConfigFiles(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.findInfo = de.elo.ix.client.checkMemberObject('findFirstConfigFiles(...), param findInfo', this.findInfo, 'de.elo.ix.client.FindConfigFileInfo');
  this.max = de.elo.ix.client.checkMemberInt('findFirstConfigFiles(...), param max', this.max);
  this.configFileZ = de.elo.ix.client.checkMemberObject('findFirstConfigFiles(...), param configFileZ', this.configFileZ, 'de.elo.ix.client.ConfigFileZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFFindFirstReportInfos = function(ci, opts, max) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFFindFirstReportInfos';
  this.ci = ci;
  this.opts = opts;
  this.max = max;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFFindFirstReportInfos.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('findFirstReportInfos(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.opts = de.elo.ix.client.checkMemberObject('findFirstReportInfos(...), param opts', this.opts, 'de.elo.ix.client.FindReportInfo');
  this.max = de.elo.ix.client.checkMemberInt('findFirstReportInfos(...), param max', this.max);
};

de.elo.ix.client.JsonMethodIXServicePortIFFindFirstSords = function(ci, findInfo, max, sordZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFFindFirstSords';
  this.ci = ci;
  this.findInfo = findInfo;
  this.max = max;
  this.sordZ = sordZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFFindFirstSords.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('findFirstSords(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.findInfo = de.elo.ix.client.checkMemberObject('findFirstSords(...), param findInfo', this.findInfo, 'de.elo.ix.client.FindInfo');
  this.max = de.elo.ix.client.checkMemberInt('findFirstSords(...), param max', this.max);
  this.sordZ = de.elo.ix.client.checkMemberObject('findFirstSords(...), param sordZ', this.sordZ, 'de.elo.ix.client.SordZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFFindFirstTasks = function(ci, findInfo, max) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFFindFirstTasks';
  this.ci = ci;
  this.findInfo = findInfo;
  this.max = max;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFFindFirstTasks.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('findFirstTasks(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.findInfo = de.elo.ix.client.checkMemberObject('findFirstTasks(...), param findInfo', this.findInfo, 'de.elo.ix.client.FindTasksInfo');
  this.max = de.elo.ix.client.checkMemberInt('findFirstTasks(...), param max', this.max);
};

de.elo.ix.client.JsonMethodIXServicePortIFFindNextConfigFiles = function(ci, searchId, idx, max, configFileZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFFindNextConfigFiles';
  this.ci = ci;
  this.searchId = searchId;
  this.idx = idx;
  this.max = max;
  this.configFileZ = configFileZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFFindNextConfigFiles.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('findNextConfigFiles(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.searchId = de.elo.ix.client.checkMemberString('findNextConfigFiles(...), param searchId', this.searchId);
  this.idx = de.elo.ix.client.checkMemberInt('findNextConfigFiles(...), param idx', this.idx);
  this.max = de.elo.ix.client.checkMemberInt('findNextConfigFiles(...), param max', this.max);
  this.configFileZ = de.elo.ix.client.checkMemberObject('findNextConfigFiles(...), param configFileZ', this.configFileZ, 'de.elo.ix.client.ConfigFileZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFFindNextReportInfos = function(ci, searchId, idx, max) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFFindNextReportInfos';
  this.ci = ci;
  this.searchId = searchId;
  this.idx = idx;
  this.max = max;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFFindNextReportInfos.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('findNextReportInfos(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.searchId = de.elo.ix.client.checkMemberString('findNextReportInfos(...), param searchId', this.searchId);
  this.idx = de.elo.ix.client.checkMemberInt('findNextReportInfos(...), param idx', this.idx);
  this.max = de.elo.ix.client.checkMemberInt('findNextReportInfos(...), param max', this.max);
};

de.elo.ix.client.JsonMethodIXServicePortIFFindNextSords = function(ci, searchId, idx, max, sordZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFFindNextSords';
  this.ci = ci;
  this.searchId = searchId;
  this.idx = idx;
  this.max = max;
  this.sordZ = sordZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFFindNextSords.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('findNextSords(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.searchId = de.elo.ix.client.checkMemberString('findNextSords(...), param searchId', this.searchId);
  this.idx = de.elo.ix.client.checkMemberInt('findNextSords(...), param idx', this.idx);
  this.max = de.elo.ix.client.checkMemberInt('findNextSords(...), param max', this.max);
  this.sordZ = de.elo.ix.client.checkMemberObject('findNextSords(...), param sordZ', this.sordZ, 'de.elo.ix.client.SordZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFFindNextTasks = function(ci, searchId, idx, max) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFFindNextTasks';
  this.ci = ci;
  this.searchId = searchId;
  this.idx = idx;
  this.max = max;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFFindNextTasks.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('findNextTasks(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.searchId = de.elo.ix.client.checkMemberString('findNextTasks(...), param searchId', this.searchId);
  this.idx = de.elo.ix.client.checkMemberInt('findNextTasks(...), param idx', this.idx);
  this.max = de.elo.ix.client.checkMemberInt('findNextTasks(...), param max', this.max);
};

de.elo.ix.client.JsonMethodIXServicePortIFFinishExport = function(ci, exportId) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFFinishExport';
  this.ci = ci;
  this.exportId = exportId;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFFinishExport.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('finishExport(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.exportId = de.elo.ix.client.checkMemberString('finishExport(...), param exportId', this.exportId);
};

de.elo.ix.client.JsonMethodIXServicePortIFGetConstants = function(ci) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFGetConstants';
  this.ci = ci;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFGetConstants.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('getConstants(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
};

de.elo.ix.client.JsonMethodIXServicePortIFGetExportZipUrl = function(ci, exportId) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFGetExportZipUrl';
  this.ci = ci;
  this.exportId = exportId;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFGetExportZipUrl.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('getExportZipUrl(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.exportId = de.elo.ix.client.checkMemberString('getExportZipUrl(...), param exportId', this.exportId);
};

de.elo.ix.client.JsonMethodIXServicePortIFGetImportZipUrl = function(ci, importId) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFGetImportZipUrl';
  this.ci = ci;
  this.importId = importId;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFGetImportZipUrl.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('getImportZipUrl(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.importId = de.elo.ix.client.checkMemberString('getImportZipUrl(...), param importId', this.importId);
};

de.elo.ix.client.JsonMethodIXServicePortIFGetServerInfo = function(ci) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFGetServerInfo';
  this.ci = ci;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFGetServerInfo.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('getServerInfo(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
};

de.elo.ix.client.JsonMethodIXServicePortIFSetServerInfo = function(ci, serverInfo) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFSetServerInfo';
  this.ci = ci;
  this.serverInfo = serverInfo;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFSetServerInfo.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('setServerInfo(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.serverInfo = de.elo.ix.client.checkMemberObject('setServerInfo(...), param serverInfo', this.serverInfo, 'de.elo.ix.client.ServerInfo');
};

de.elo.ix.client.JsonMethodIXServicePortIFGetServerInfoDM = function(ci) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFGetServerInfoDM';
  this.ci = ci;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFGetServerInfoDM.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('getServerInfoDM(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
};

de.elo.ix.client.JsonMethodIXServicePortIFSetServerInfoDM = function(ci, serverInfo) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFSetServerInfoDM';
  this.ci = ci;
  this.serverInfo = serverInfo;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFSetServerInfoDM.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('setServerInfoDM(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.serverInfo = de.elo.ix.client.checkMemberObject('setServerInfoDM(...), param serverInfo', this.serverInfo, 'de.elo.ix.client.ServerInfoDM');
};

de.elo.ix.client.JsonMethodIXServicePortIFGetSessionOptions = function(ci) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFGetSessionOptions';
  this.ci = ci;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFGetSessionOptions.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('getSessionOptions(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
};

de.elo.ix.client.JsonMethodIXServicePortIFGetUserNames = function(ci, ids, checkoutUsersZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFGetUserNames';
  this.ci = ci;
  this.ids = ids;
  this.checkoutUsersZ = checkoutUsersZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFGetUserNames.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('getUserNames(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.ids = de.elo.ix.client.checkMemberArrayString('getUserNames(...), param ids', this.ids);
  this.checkoutUsersZ = de.elo.ix.client.checkMemberObject('getUserNames(...), param checkoutUsersZ', this.checkoutUsersZ, 'de.elo.ix.client.CheckoutUsersZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFImportWorkFlow = function(ci, flowName, fileData) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFImportWorkFlow';
  this.ci = ci;
  this.flowName = flowName;
  this.fileData = fileData;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFImportWorkFlow.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('importWorkFlow(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.flowName = de.elo.ix.client.checkMemberString('importWorkFlow(...), param flowName', this.flowName);
  this.fileData = de.elo.ix.client.checkMemberArrayByte('importWorkFlow(...), param fileData', this.fileData);
};

de.elo.ix.client.JsonMethodIXServicePortIFLinkSords = function(ci, fromId, toIds, linkZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFLinkSords';
  this.ci = ci;
  this.fromId = fromId;
  this.toIds = toIds;
  this.linkZ = linkZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFLinkSords.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('linkSords(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.fromId = de.elo.ix.client.checkMemberString('linkSords(...), param fromId', this.fromId);
  this.toIds = de.elo.ix.client.checkMemberArrayString('linkSords(...), param toIds', this.toIds);
  this.linkZ = de.elo.ix.client.checkMemberObject('linkSords(...), param linkZ', this.linkZ, 'de.elo.ix.client.LinkSordZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFLockArchive = function(ci, keyId) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFLockArchive';
  this.ci = ci;
  this.keyId = keyId;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFLockArchive.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('lockArchive(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.keyId = de.elo.ix.client.checkMemberString('lockArchive(...), param keyId', this.keyId);
};

de.elo.ix.client.JsonMethodIXServicePortIFLogin = function(ci, userName, userPwd, clientComputer, runAsUser) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFLogin';
  this.ci = ci;
  this.userName = userName;
  this.userPwd = userPwd;
  this.clientComputer = clientComputer;
  this.runAsUser = runAsUser;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFLogin.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('login(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.userName = de.elo.ix.client.checkMemberString('login(...), param userName', this.userName);
  this.userPwd = de.elo.ix.client.checkMemberString('login(...), param userPwd', this.userPwd);
  this.clientComputer = de.elo.ix.client.checkMemberString('login(...), param clientComputer', this.clientComputer);
  this.runAsUser = de.elo.ix.client.checkMemberString('login(...), param runAsUser', this.runAsUser);
};

de.elo.ix.client.JsonMethodIXServicePortIFLoginAdmin = function(ci, userName, userPwd, clientComputer, reportAsUser) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFLoginAdmin';
  this.ci = ci;
  this.userName = userName;
  this.userPwd = userPwd;
  this.clientComputer = clientComputer;
  this.reportAsUser = reportAsUser;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFLoginAdmin.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('loginAdmin(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.userName = de.elo.ix.client.checkMemberString('loginAdmin(...), param userName', this.userName);
  this.userPwd = de.elo.ix.client.checkMemberString('loginAdmin(...), param userPwd', this.userPwd);
  this.clientComputer = de.elo.ix.client.checkMemberString('loginAdmin(...), param clientComputer', this.clientComputer);
  this.reportAsUser = de.elo.ix.client.checkMemberString('loginAdmin(...), param reportAsUser', this.reportAsUser);
};

de.elo.ix.client.JsonMethodIXServicePortIFLoginEloProf = function(ci, userId, certificate, clientComputer) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFLoginEloProf';
  this.ci = ci;
  this.userId = userId;
  this.certificate = certificate;
  this.clientComputer = clientComputer;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFLoginEloProf.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('loginEloProf(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.userId = de.elo.ix.client.checkMemberInt('loginEloProf(...), param userId', this.userId);
  this.certificate = de.elo.ix.client.checkMemberString('loginEloProf(...), param certificate', this.certificate);
  this.clientComputer = de.elo.ix.client.checkMemberString('loginEloProf(...), param clientComputer', this.clientComputer);
};

de.elo.ix.client.JsonMethodIXServicePortIFLoginKerberos = function(ci, ticket, clientComputer) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFLoginKerberos';
  this.ci = ci;
  this.ticket = ticket;
  this.clientComputer = clientComputer;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFLoginKerberos.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('loginKerberos(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.ticket = de.elo.ix.client.checkMemberArrayByte('loginKerberos(...), param ticket', this.ticket);
  this.clientComputer = de.elo.ix.client.checkMemberString('loginKerberos(...), param clientComputer', this.clientComputer);
};

de.elo.ix.client.JsonMethodIXServicePortIFLogout = function(ci) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFLogout';
  this.ci = ci;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFLogout.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('logout(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
};

de.elo.ix.client.JsonMethodIXServicePortIFParseException = function(ci, exceptionString) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFParseException';
  this.ci = ci;
  this.exceptionString = exceptionString;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFParseException.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('parseException(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.exceptionString = de.elo.ix.client.checkMemberString('parseException(...), param exceptionString', this.exceptionString);
};

de.elo.ix.client.JsonMethodIXServicePortIFProcessFindResult = function(ci, searchId, procInfo) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFProcessFindResult';
  this.ci = ci;
  this.searchId = searchId;
  this.procInfo = procInfo;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFProcessFindResult.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('processFindResult(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.searchId = de.elo.ix.client.checkMemberString('processFindResult(...), param searchId', this.searchId);
  this.procInfo = de.elo.ix.client.checkMemberObject('processFindResult(...), param procInfo', this.procInfo, 'de.elo.ix.client.ProcessInfo');
};

de.elo.ix.client.JsonMethodIXServicePortIFProcessTrees = function(ci, navigationInfo, procInfo) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFProcessTrees';
  this.ci = ci;
  this.navigationInfo = navigationInfo;
  this.procInfo = procInfo;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFProcessTrees.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('processTrees(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.navigationInfo = de.elo.ix.client.checkMemberObject('processTrees(...), param navigationInfo', this.navigationInfo, 'de.elo.ix.client.NavigationInfo');
  this.procInfo = de.elo.ix.client.checkMemberObject('processTrees(...), param procInfo', this.procInfo, 'de.elo.ix.client.ProcessInfo');
};

de.elo.ix.client.JsonMethodIXServicePortIFQueryJobState = function(ci, jobGuid, activeJobs, finishedJobs, fullInfo) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFQueryJobState';
  this.ci = ci;
  this.jobGuid = jobGuid;
  this.activeJobs = activeJobs;
  this.finishedJobs = finishedJobs;
  this.fullInfo = fullInfo;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFQueryJobState.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('queryJobState(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.jobGuid = de.elo.ix.client.checkMemberString('queryJobState(...), param jobGuid', this.jobGuid);
  this.activeJobs = de.elo.ix.client.checkMemberBoolean('queryJobState(...), param activeJobs', this.activeJobs);
  this.finishedJobs = de.elo.ix.client.checkMemberBoolean('queryJobState(...), param finishedJobs', this.finishedJobs);
  this.fullInfo = de.elo.ix.client.checkMemberBoolean('queryJobState(...), param fullInfo', this.fullInfo);
};

de.elo.ix.client.JsonMethodIXServicePortIFRefSord = function(ci, oldParentId, newParentId, objId, manSortIdx) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFRefSord';
  this.ci = ci;
  this.oldParentId = oldParentId;
  this.newParentId = newParentId;
  this.objId = objId;
  this.manSortIdx = manSortIdx;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFRefSord.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('refSord(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.oldParentId = de.elo.ix.client.checkMemberString('refSord(...), param oldParentId', this.oldParentId);
  this.newParentId = de.elo.ix.client.checkMemberString('refSord(...), param newParentId', this.newParentId);
  this.objId = de.elo.ix.client.checkMemberString('refSord(...), param objId', this.objId);
  this.manSortIdx = de.elo.ix.client.checkMemberInt('refSord(...), param manSortIdx', this.manSortIdx);
};

de.elo.ix.client.JsonMethodIXServicePortIFRestoreSord = function(ci, objId, restoreOptions) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFRestoreSord';
  this.ci = ci;
  this.objId = objId;
  this.restoreOptions = restoreOptions;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFRestoreSord.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('restoreSord(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.objId = de.elo.ix.client.checkMemberString('restoreSord(...), param objId', this.objId);
  this.restoreOptions = de.elo.ix.client.checkMemberObject('restoreSord(...), param restoreOptions', this.restoreOptions, 'de.elo.ix.client.RestoreOptions');
};

de.elo.ix.client.JsonMethodIXServicePortIFSetSessionOptions = function(ci, opts) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFSetSessionOptions';
  this.ci = ci;
  this.opts = opts;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFSetSessionOptions.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('setSessionOptions(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.opts = de.elo.ix.client.checkMemberObject('setSessionOptions(...), param opts', this.opts, 'de.elo.ix.client.SessionOptions');
};

de.elo.ix.client.JsonMethodIXServicePortIFStartAdHocWorkFlow = function(ci, name, objId, arrUserIds, nodeName, forValidation, serialFlow, cancelUserId, cancelMessage, finishedUserId, finishedMessage, finishedScript) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFStartAdHocWorkFlow';
  this.ci = ci;
  this.name = name;
  this.objId = objId;
  this.arrUserIds = arrUserIds;
  this.nodeName = nodeName;
  this.forValidation = forValidation;
  this.serialFlow = serialFlow;
  this.cancelUserId = cancelUserId;
  this.cancelMessage = cancelMessage;
  this.finishedUserId = finishedUserId;
  this.finishedMessage = finishedMessage;
  this.finishedScript = finishedScript;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFStartAdHocWorkFlow.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('startAdHocWorkFlow(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.name = de.elo.ix.client.checkMemberString('startAdHocWorkFlow(...), param name', this.name);
  this.objId = de.elo.ix.client.checkMemberString('startAdHocWorkFlow(...), param objId', this.objId);
  this.arrUserIds = de.elo.ix.client.checkMemberArrayString('startAdHocWorkFlow(...), param arrUserIds', this.arrUserIds);
  this.nodeName = de.elo.ix.client.checkMemberString('startAdHocWorkFlow(...), param nodeName', this.nodeName);
  this.forValidation = de.elo.ix.client.checkMemberBoolean('startAdHocWorkFlow(...), param forValidation', this.forValidation);
  this.serialFlow = de.elo.ix.client.checkMemberBoolean('startAdHocWorkFlow(...), param serialFlow', this.serialFlow);
  this.cancelUserId = de.elo.ix.client.checkMemberString('startAdHocWorkFlow(...), param cancelUserId', this.cancelUserId);
  this.cancelMessage = de.elo.ix.client.checkMemberString('startAdHocWorkFlow(...), param cancelMessage', this.cancelMessage);
  this.finishedUserId = de.elo.ix.client.checkMemberString('startAdHocWorkFlow(...), param finishedUserId', this.finishedUserId);
  this.finishedMessage = de.elo.ix.client.checkMemberString('startAdHocWorkFlow(...), param finishedMessage', this.finishedMessage);
  this.finishedScript = de.elo.ix.client.checkMemberString('startAdHocWorkFlow(...), param finishedScript', this.finishedScript);
};

de.elo.ix.client.JsonMethodIXServicePortIFStartExport = function(ci, topLevelIDs, options) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFStartExport';
  this.ci = ci;
  this.topLevelIDs = topLevelIDs;
  this.options = options;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFStartExport.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('startExport(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.topLevelIDs = de.elo.ix.client.checkMemberArrayString('startExport(...), param topLevelIDs', this.topLevelIDs);
  this.options = de.elo.ix.client.checkMemberLong('startExport(...), param options', this.options);
};

de.elo.ix.client.JsonMethodIXServicePortIFStartImport = function(ci, filingPath, guidMethod, options) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFStartImport';
  this.ci = ci;
  this.filingPath = filingPath;
  this.guidMethod = guidMethod;
  this.options = options;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFStartImport.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('startImport(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.filingPath = de.elo.ix.client.checkMemberString('startImport(...), param filingPath', this.filingPath);
  this.guidMethod = de.elo.ix.client.checkMemberInt('startImport(...), param guidMethod', this.guidMethod);
  this.options = de.elo.ix.client.checkMemberLong('startImport(...), param options', this.options);
};

de.elo.ix.client.JsonMethodIXServicePortIFStartWorkFlow = function(ci, templFlowId, flowName, objId) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFStartWorkFlow';
  this.ci = ci;
  this.templFlowId = templFlowId;
  this.flowName = flowName;
  this.objId = objId;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFStartWorkFlow.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('startWorkFlow(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.templFlowId = de.elo.ix.client.checkMemberString('startWorkFlow(...), param templFlowId', this.templFlowId);
  this.flowName = de.elo.ix.client.checkMemberString('startWorkFlow(...), param flowName', this.flowName);
  this.objId = de.elo.ix.client.checkMemberString('startWorkFlow(...), param objId', this.objId);
};

de.elo.ix.client.JsonMethodIXServicePortIFTakeWorkFlowNode = function(ci, nFlowId, nNodeId, sUserId, nFlags, lockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFTakeWorkFlowNode';
  this.ci = ci;
  this.nFlowId = nFlowId;
  this.nNodeId = nNodeId;
  this.sUserId = sUserId;
  this.nFlags = nFlags;
  this.lockZ = lockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFTakeWorkFlowNode.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('takeWorkFlowNode(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.nFlowId = de.elo.ix.client.checkMemberInt('takeWorkFlowNode(...), param nFlowId', this.nFlowId);
  this.nNodeId = de.elo.ix.client.checkMemberInt('takeWorkFlowNode(...), param nNodeId', this.nNodeId);
  this.sUserId = de.elo.ix.client.checkMemberString('takeWorkFlowNode(...), param sUserId', this.sUserId);
  this.nFlags = de.elo.ix.client.checkMemberInt('takeWorkFlowNode(...), param nFlags', this.nFlags);
  this.lockZ = de.elo.ix.client.checkMemberObject('takeWorkFlowNode(...), param lockZ', this.lockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFTerminateWorkFlow = function(ci, flowId, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFTerminateWorkFlow';
  this.ci = ci;
  this.flowId = flowId;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFTerminateWorkFlow.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('terminateWorkFlow(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.flowId = de.elo.ix.client.checkMemberString('terminateWorkFlow(...), param flowId', this.flowId);
  this.unlockZ = de.elo.ix.client.checkMemberObject('terminateWorkFlow(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFDelegateWorkFlowNode = function(ci, delegateNodeInfo, lockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFDelegateWorkFlowNode';
  this.ci = ci;
  this.delegateNodeInfo = delegateNodeInfo;
  this.lockZ = lockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFDelegateWorkFlowNode.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('delegateWorkFlowNode(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.delegateNodeInfo = de.elo.ix.client.checkMemberObject('delegateWorkFlowNode(...), param delegateNodeInfo', this.delegateNodeInfo, 'de.elo.ix.client.WFDelegateNodeInfo');
  this.lockZ = de.elo.ix.client.checkMemberObject('delegateWorkFlowNode(...), param lockZ', this.lockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFDeferWorkFlowNode = function(ci, flowId, nodeId, userDelayDateIso, lockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFDeferWorkFlowNode';
  this.ci = ci;
  this.flowId = flowId;
  this.nodeId = nodeId;
  this.userDelayDateIso = userDelayDateIso;
  this.lockZ = lockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFDeferWorkFlowNode.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('deferWorkFlowNode(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.flowId = de.elo.ix.client.checkMemberString('deferWorkFlowNode(...), param flowId', this.flowId);
  this.nodeId = de.elo.ix.client.checkMemberInt('deferWorkFlowNode(...), param nodeId', this.nodeId);
  this.userDelayDateIso = de.elo.ix.client.checkMemberString('deferWorkFlowNode(...), param userDelayDateIso', this.userDelayDateIso);
  this.lockZ = de.elo.ix.client.checkMemberObject('deferWorkFlowNode(...), param lockZ', this.lockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFTestAdapter = function(ci, fn, params) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFTestAdapter';
  this.ci = ci;
  this.fn = fn;
  this.params = params;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFTestAdapter.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('testAdapter(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.fn = de.elo.ix.client.checkMemberString('testAdapter(...), param fn', this.fn);
  this.params = de.elo.ix.client.checkMemberArrayString('testAdapter(...), param params', this.params);
};

de.elo.ix.client.JsonMethodIXServicePortIFUnlinkSords = function(ci, fromId, toIds, linkZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFUnlinkSords';
  this.ci = ci;
  this.fromId = fromId;
  this.toIds = toIds;
  this.linkZ = linkZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFUnlinkSords.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('unlinkSords(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.fromId = de.elo.ix.client.checkMemberString('unlinkSords(...), param fromId', this.fromId);
  this.toIds = de.elo.ix.client.checkMemberArrayString('unlinkSords(...), param toIds', this.toIds);
  this.linkZ = de.elo.ix.client.checkMemberObject('unlinkSords(...), param linkZ', this.linkZ, 'de.elo.ix.client.LinkSordZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckoutCryptInfos = function(ci, ids, lockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckoutCryptInfos';
  this.ci = ci;
  this.ids = ids;
  this.lockZ = lockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckoutCryptInfos.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkoutCryptInfos(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.ids = de.elo.ix.client.checkMemberArrayString('checkoutCryptInfos(...), param ids', this.ids);
  this.lockZ = de.elo.ix.client.checkMemberObject('checkoutCryptInfos(...), param lockZ', this.lockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckinCryptInfos = function(ci, cryptInfos, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckinCryptInfos';
  this.ci = ci;
  this.cryptInfos = cryptInfos;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckinCryptInfos.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkinCryptInfos(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.cryptInfos = de.elo.ix.client.checkMemberArrayObject('checkinCryptInfos(...), param cryptInfos', this.cryptInfos, 'de.elo.ix.client.CryptInfo');
  this.unlockZ = de.elo.ix.client.checkMemberObject('checkinCryptInfos(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFProvideCryptPassword = function(ci, encryptionSet, pwd) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFProvideCryptPassword';
  this.ci = ci;
  this.encryptionSet = encryptionSet;
  this.pwd = pwd;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFProvideCryptPassword.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('provideCryptPassword(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.encryptionSet = de.elo.ix.client.checkMemberString('provideCryptPassword(...), param encryptionSet', this.encryptionSet);
  this.pwd = de.elo.ix.client.checkMemberString('provideCryptPassword(...), param pwd', this.pwd);
};

de.elo.ix.client.JsonMethodIXServicePortIFInvalidateCache = function(ci, flags) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFInvalidateCache';
  this.ci = ci;
  this.flags = flags;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFInvalidateCache.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('invalidateCache(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.flags = de.elo.ix.client.checkMemberInt('invalidateCache(...), param flags', this.flags);
};

de.elo.ix.client.JsonMethodIXServicePortIFFindFirstTranslateTerms = function(ci, findInfo, max) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFFindFirstTranslateTerms';
  this.ci = ci;
  this.findInfo = findInfo;
  this.max = max;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFFindFirstTranslateTerms.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('findFirstTranslateTerms(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.findInfo = de.elo.ix.client.checkMemberObject('findFirstTranslateTerms(...), param findInfo', this.findInfo, 'de.elo.ix.client.FindTranslateTermInfo');
  this.max = de.elo.ix.client.checkMemberInt('findFirstTranslateTerms(...), param max', this.max);
};

de.elo.ix.client.JsonMethodIXServicePortIFFindNextTranslateTerms = function(ci, searchId, idx, max) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFFindNextTranslateTerms';
  this.ci = ci;
  this.searchId = searchId;
  this.idx = idx;
  this.max = max;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFFindNextTranslateTerms.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('findNextTranslateTerms(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.searchId = de.elo.ix.client.checkMemberString('findNextTranslateTerms(...), param searchId', this.searchId);
  this.idx = de.elo.ix.client.checkMemberInt('findNextTranslateTerms(...), param idx', this.idx);
  this.max = de.elo.ix.client.checkMemberInt('findNextTranslateTerms(...), param max', this.max);
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckoutTranslateTerms = function(ci, termIds, lockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckoutTranslateTerms';
  this.ci = ci;
  this.termIds = termIds;
  this.lockZ = lockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckoutTranslateTerms.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkoutTranslateTerms(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.termIds = de.elo.ix.client.checkMemberArrayString('checkoutTranslateTerms(...), param termIds', this.termIds);
  this.lockZ = de.elo.ix.client.checkMemberObject('checkoutTranslateTerms(...), param lockZ', this.lockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckinTranslateTerms = function(ci, tterms, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckinTranslateTerms';
  this.ci = ci;
  this.tterms = tterms;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckinTranslateTerms.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkinTranslateTerms(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.tterms = de.elo.ix.client.checkMemberArrayObject('checkinTranslateTerms(...), param tterms', this.tterms, 'de.elo.ix.client.TranslateTerm');
  this.unlockZ = de.elo.ix.client.checkMemberObject('checkinTranslateTerms(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFDeleteTranslateTerms = function(ci, termIds, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFDeleteTranslateTerms';
  this.ci = ci;
  this.termIds = termIds;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFDeleteTranslateTerms.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('deleteTranslateTerms(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.termIds = de.elo.ix.client.checkMemberArrayString('deleteTranslateTerms(...), param termIds', this.termIds);
  this.unlockZ = de.elo.ix.client.checkMemberObject('deleteTranslateTerms(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFGetWorkflowTemplateVersions = function(ci, flowId, onlyDeleted) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFGetWorkflowTemplateVersions';
  this.ci = ci;
  this.flowId = flowId;
  this.onlyDeleted = onlyDeleted;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFGetWorkflowTemplateVersions.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('getWorkflowTemplateVersions(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.flowId = de.elo.ix.client.checkMemberString('getWorkflowTemplateVersions(...), param flowId', this.flowId);
  this.onlyDeleted = de.elo.ix.client.checkMemberBoolean('getWorkflowTemplateVersions(...), param onlyDeleted', this.onlyDeleted);
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckoutWorkflowTemplate = function(ci, flowId, versionId, wfZ, lockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckoutWorkflowTemplate';
  this.ci = ci;
  this.flowId = flowId;
  this.versionId = versionId;
  this.wfZ = wfZ;
  this.lockZ = lockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckoutWorkflowTemplate.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkoutWorkflowTemplate(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.flowId = de.elo.ix.client.checkMemberString('checkoutWorkflowTemplate(...), param flowId', this.flowId);
  this.versionId = de.elo.ix.client.checkMemberString('checkoutWorkflowTemplate(...), param versionId', this.versionId);
  this.wfZ = de.elo.ix.client.checkMemberObject('checkoutWorkflowTemplate(...), param wfZ', this.wfZ, 'de.elo.ix.client.WFDiagramZ');
  this.lockZ = de.elo.ix.client.checkMemberObject('checkoutWorkflowTemplate(...), param lockZ', this.lockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckinWorkflowTemplate = function(ci, wf, wfZ, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckinWorkflowTemplate';
  this.ci = ci;
  this.wf = wf;
  this.wfZ = wfZ;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckinWorkflowTemplate.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkinWorkflowTemplate(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.wf = de.elo.ix.client.checkMemberObject('checkinWorkflowTemplate(...), param wf', this.wf, 'de.elo.ix.client.WFDiagram');
  this.wfZ = de.elo.ix.client.checkMemberObject('checkinWorkflowTemplate(...), param wfZ', this.wfZ, 'de.elo.ix.client.WFDiagramZ');
  this.unlockZ = de.elo.ix.client.checkMemberObject('checkinWorkflowTemplate(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFDeleteWorkflowTemplate = function(ci, flowId, versionId, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFDeleteWorkflowTemplate';
  this.ci = ci;
  this.flowId = flowId;
  this.versionId = versionId;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFDeleteWorkflowTemplate.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('deleteWorkflowTemplate(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.flowId = de.elo.ix.client.checkMemberString('deleteWorkflowTemplate(...), param flowId', this.flowId);
  this.versionId = de.elo.ix.client.checkMemberString('deleteWorkflowTemplate(...), param versionId', this.versionId);
  this.unlockZ = de.elo.ix.client.checkMemberObject('deleteWorkflowTemplate(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckoutNoteTemplates = function(ci, userId, ids, ntemplZ, lockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckoutNoteTemplates';
  this.ci = ci;
  this.userId = userId;
  this.ids = ids;
  this.ntemplZ = ntemplZ;
  this.lockZ = lockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckoutNoteTemplates.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkoutNoteTemplates(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.userId = de.elo.ix.client.checkMemberString('checkoutNoteTemplates(...), param userId', this.userId);
  this.ids = de.elo.ix.client.checkMemberArrayString('checkoutNoteTemplates(...), param ids', this.ids);
  this.ntemplZ = de.elo.ix.client.checkMemberObject('checkoutNoteTemplates(...), param ntemplZ', this.ntemplZ, 'de.elo.ix.client.NoteTemplateZ');
  this.lockZ = de.elo.ix.client.checkMemberObject('checkoutNoteTemplates(...), param lockZ', this.lockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCreateNoteTemplate = function(ci, userId) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCreateNoteTemplate';
  this.ci = ci;
  this.userId = userId;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCreateNoteTemplate.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('createNoteTemplate(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.userId = de.elo.ix.client.checkMemberString('createNoteTemplate(...), param userId', this.userId);
};

de.elo.ix.client.JsonMethodIXServicePortIFDeleteNoteTemplates = function(ci, userId, ids, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFDeleteNoteTemplates';
  this.ci = ci;
  this.userId = userId;
  this.ids = ids;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFDeleteNoteTemplates.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('deleteNoteTemplates(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.userId = de.elo.ix.client.checkMemberString('deleteNoteTemplates(...), param userId', this.userId);
  this.ids = de.elo.ix.client.checkMemberArrayString('deleteNoteTemplates(...), param ids', this.ids);
  this.unlockZ = de.elo.ix.client.checkMemberObject('deleteNoteTemplates(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckinNoteTemplates = function(ci, noteTemplates, ntemplZ, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckinNoteTemplates';
  this.ci = ci;
  this.noteTemplates = noteTemplates;
  this.ntemplZ = ntemplZ;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckinNoteTemplates.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkinNoteTemplates(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.noteTemplates = de.elo.ix.client.checkMemberArrayObject('checkinNoteTemplates(...), param noteTemplates', this.noteTemplates, 'de.elo.ix.client.NoteTemplate');
  this.ntemplZ = de.elo.ix.client.checkMemberObject('checkinNoteTemplates(...), param ntemplZ', this.ntemplZ, 'de.elo.ix.client.NoteTemplateZ');
  this.unlockZ = de.elo.ix.client.checkMemberObject('checkinNoteTemplates(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFReload = function(ci) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFReload';
  this.ci = ci;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFReload.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('reload(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
};

de.elo.ix.client.JsonMethodIXServicePortIFDeleteKeywordList = function(ci, kwid, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFDeleteKeywordList';
  this.ci = ci;
  this.kwid = kwid;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFDeleteKeywordList.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('deleteKeywordList(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.kwid = de.elo.ix.client.checkMemberString('deleteKeywordList(...), param kwid', this.kwid);
  this.unlockZ = de.elo.ix.client.checkMemberObject('deleteKeywordList(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckoutKeywordList = function(ci, kwid, keywordZ, max, lockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckoutKeywordList';
  this.ci = ci;
  this.kwid = kwid;
  this.keywordZ = keywordZ;
  this.max = max;
  this.lockZ = lockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckoutKeywordList.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkoutKeywordList(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.kwid = de.elo.ix.client.checkMemberString('checkoutKeywordList(...), param kwid', this.kwid);
  this.keywordZ = de.elo.ix.client.checkMemberObject('checkoutKeywordList(...), param keywordZ', this.keywordZ, 'de.elo.ix.client.KeywordZ');
  this.max = de.elo.ix.client.checkMemberInt('checkoutKeywordList(...), param max', this.max);
  this.lockZ = de.elo.ix.client.checkMemberObject('checkoutKeywordList(...), param lockZ', this.lockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckinKeywordList = function(ci, kwList, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckinKeywordList';
  this.ci = ci;
  this.kwList = kwList;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckinKeywordList.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkinKeywordList(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.kwList = de.elo.ix.client.checkMemberObject('checkinKeywordList(...), param kwList', this.kwList, 'de.elo.ix.client.KeywordList');
  this.unlockZ = de.elo.ix.client.checkMemberObject('checkinKeywordList(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCombineAcl = function(ci, lhs, rhs, options) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCombineAcl';
  this.ci = ci;
  this.lhs = lhs;
  this.rhs = rhs;
  this.options = options;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCombineAcl.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('combineAcl(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.lhs = de.elo.ix.client.checkMemberArrayObject('combineAcl(...), param lhs', this.lhs, 'de.elo.ix.client.AclItem');
  this.rhs = de.elo.ix.client.checkMemberArrayObject('combineAcl(...), param rhs', this.rhs, 'de.elo.ix.client.AclItem');
  this.options = de.elo.ix.client.checkMemberObject('combineAcl(...), param options', this.options, 'de.elo.ix.client.CombineAclOptions');
};

de.elo.ix.client.JsonMethodIXServicePortIFGetEditInfoFromESW = function(ci, fileDatas, eswOptions) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFGetEditInfoFromESW';
  this.ci = ci;
  this.fileDatas = fileDatas;
  this.eswOptions = eswOptions;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFGetEditInfoFromESW.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('getEditInfoFromESW(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.fileDatas = de.elo.ix.client.checkMemberArrayObject('getEditInfoFromESW(...), param fileDatas', this.fileDatas, 'de.elo.ix.client.FileData');
  this.eswOptions = de.elo.ix.client.checkMemberObject('getEditInfoFromESW(...), param eswOptions', this.eswOptions, 'de.elo.ix.client.EditInfoEswOptions');
};

de.elo.ix.client.JsonMethodIXServicePortIFGetESWFromEditInfo = function(ci, editInfos, eswOptions) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFGetESWFromEditInfo';
  this.ci = ci;
  this.editInfos = editInfos;
  this.eswOptions = eswOptions;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFGetESWFromEditInfo.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('getESWFromEditInfo(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.editInfos = de.elo.ix.client.checkMemberArrayObject('getESWFromEditInfo(...), param editInfos', this.editInfos, 'de.elo.ix.client.EditInfo');
  this.eswOptions = de.elo.ix.client.checkMemberObject('getESWFromEditInfo(...), param eswOptions', this.eswOptions, 'de.elo.ix.client.EditInfoEswOptions');
};

de.elo.ix.client.JsonMethodIXServicePortIFGetSessionFromTicket = function(ci, options) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFGetSessionFromTicket';
  this.ci = ci;
  this.options = options;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFGetSessionFromTicket.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('getSessionFromTicket(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.options = de.elo.ix.client.checkMemberInt('getSessionFromTicket(...), param options', this.options);
};

de.elo.ix.client.JsonMethodIXServicePortIFExecuteScript = function(ci, params) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFExecuteScript';
  this.ci = ci;
  this.params = params;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFExecuteScript.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('executeScript(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.params = de.elo.ix.client.checkMemberObject('executeScript(...), param params', this.params, 'de.elo.ix.client.ExecuteScriptParams');
};

de.elo.ix.client.JsonMethodIXServicePortIFExportWorkflow = function(ci, wfExportOptions) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFExportWorkflow';
  this.ci = ci;
  this.wfExportOptions = wfExportOptions;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFExportWorkflow.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('exportWorkflow(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.wfExportOptions = de.elo.ix.client.checkMemberObject('exportWorkflow(...), param wfExportOptions', this.wfExportOptions, 'de.elo.ix.client.WorkflowExportOptions');
};

de.elo.ix.client.JsonMethodIXServicePortIFGetDistinctValuesOfObjKey = function(ci, okeyName, opts) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFGetDistinctValuesOfObjKey';
  this.ci = ci;
  this.okeyName = okeyName;
  this.opts = opts;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFGetDistinctValuesOfObjKey.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('getDistinctValuesOfObjKey(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.okeyName = de.elo.ix.client.checkMemberString('getDistinctValuesOfObjKey(...), param okeyName', this.okeyName);
  this.opts = de.elo.ix.client.checkMemberObject('getDistinctValuesOfObjKey(...), param opts', this.opts, 'de.elo.ix.client.ValuesOfObjKeyOptions');
};

de.elo.ix.client.JsonMethodIXServicePortIFGetArchiveStatistics = function(ci, opts) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFGetArchiveStatistics';
  this.ci = ci;
  this.opts = opts;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFGetArchiveStatistics.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('getArchiveStatistics(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.opts = de.elo.ix.client.checkMemberLong('getArchiveStatistics(...), param opts', this.opts);
};

de.elo.ix.client.JsonMethodIXServicePortIFCollectMapDomains = function(ci) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCollectMapDomains';
  this.ci = ci;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCollectMapDomains.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('collectMapDomains(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckinMapDomain = function(ci, mapDomain, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckinMapDomain';
  this.ci = ci;
  this.mapDomain = mapDomain;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckinMapDomain.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkinMapDomain(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.mapDomain = de.elo.ix.client.checkMemberObject('checkinMapDomain(...), param mapDomain', this.mapDomain, 'de.elo.ix.client.MapDomain');
  this.unlockZ = de.elo.ix.client.checkMemberObject('checkinMapDomain(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckoutMapDomain = function(ci, domainName, lockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckoutMapDomain';
  this.ci = ci;
  this.domainName = domainName;
  this.lockZ = lockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckoutMapDomain.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkoutMapDomain(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.domainName = de.elo.ix.client.checkMemberString('checkoutMapDomain(...), param domainName', this.domainName);
  this.lockZ = de.elo.ix.client.checkMemberObject('checkoutMapDomain(...), param lockZ', this.lockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFDeleteMapDomain = function(ci, domainName, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFDeleteMapDomain';
  this.ci = ci;
  this.domainName = domainName;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFDeleteMapDomain.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('deleteMapDomain(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.domainName = de.elo.ix.client.checkMemberString('deleteMapDomain(...), param domainName', this.domainName);
  this.unlockZ = de.elo.ix.client.checkMemberObject('deleteMapDomain(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckinMap = function(ci, domainName, id, objId, data, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckinMap';
  this.ci = ci;
  this.domainName = domainName;
  this.id = id;
  this.objId = objId;
  this.data = data;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckinMap.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkinMap(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.domainName = de.elo.ix.client.checkMemberString('checkinMap(...), param domainName', this.domainName);
  this.id = de.elo.ix.client.checkMemberString('checkinMap(...), param id', this.id);
  this.objId = de.elo.ix.client.checkMemberInt('checkinMap(...), param objId', this.objId);
  this.data = de.elo.ix.client.checkMemberArrayObject('checkinMap(...), param data', this.data, 'de.elo.ix.client.KeyValue');
  this.unlockZ = de.elo.ix.client.checkMemberObject('checkinMap(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckoutMap = function(ci, domainName, id, keyNames, lockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckoutMap';
  this.ci = ci;
  this.domainName = domainName;
  this.id = id;
  this.keyNames = keyNames;
  this.lockZ = lockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckoutMap.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkoutMap(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.domainName = de.elo.ix.client.checkMemberString('checkoutMap(...), param domainName', this.domainName);
  this.id = de.elo.ix.client.checkMemberString('checkoutMap(...), param id', this.id);
  this.keyNames = de.elo.ix.client.checkMemberArrayString('checkoutMap(...), param keyNames', this.keyNames);
  this.lockZ = de.elo.ix.client.checkMemberObject('checkoutMap(...), param lockZ', this.lockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFDeleteMap = function(ci, domainName, id, keyNames, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFDeleteMap';
  this.ci = ci;
  this.domainName = domainName;
  this.id = id;
  this.keyNames = keyNames;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFDeleteMap.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('deleteMap(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.domainName = de.elo.ix.client.checkMemberString('deleteMap(...), param domainName', this.domainName);
  this.id = de.elo.ix.client.checkMemberString('deleteMap(...), param id', this.id);
  this.keyNames = de.elo.ix.client.checkMemberArrayString('deleteMap(...), param keyNames', this.keyNames);
  this.unlockZ = de.elo.ix.client.checkMemberObject('deleteMap(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFGetContextTerms = function(ci, findInfo, field, max) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFGetContextTerms';
  this.ci = ci;
  this.findInfo = findInfo;
  this.field = field;
  this.max = max;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFGetContextTerms.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('getContextTerms(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.findInfo = de.elo.ix.client.checkMemberObject('getContextTerms(...), param findInfo', this.findInfo, 'de.elo.ix.client.FindInfo');
  this.field = de.elo.ix.client.checkMemberString('getContextTerms(...), param field', this.field);
  this.max = de.elo.ix.client.checkMemberInt('getContextTerms(...), param max', this.max);
};

de.elo.ix.client.JsonMethodIXServicePortIFExecuteRegisteredFunction = function(ci, functionName, param) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFExecuteRegisteredFunction';
  this.ci = ci;
  this.functionName = functionName;
  this.param = param;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFExecuteRegisteredFunction.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('executeRegisteredFunction(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.functionName = de.elo.ix.client.checkMemberString('executeRegisteredFunction(...), param functionName', this.functionName);
  this.param = de.elo.ix.client.checkMemberObject('executeRegisteredFunction(...), param param', this.param, 'de.elo.ix.client.Any');
};

de.elo.ix.client.JsonMethodIXServicePortIFGetSearchTerms = function(ci, findInfo, termType) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFGetSearchTerms';
  this.ci = ci;
  this.findInfo = findInfo;
  this.termType = termType;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFGetSearchTerms.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('getSearchTerms(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.findInfo = de.elo.ix.client.checkMemberObject('getSearchTerms(...), param findInfo', this.findInfo, 'de.elo.ix.client.FindInfo');
  this.termType = de.elo.ix.client.checkMemberInt('getSearchTerms(...), param termType', this.termType);
};

de.elo.ix.client.JsonMethodIXServicePortIFAdminMode = function(ci, mode) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFAdminMode';
  this.ci = ci;
  this.mode = mode;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFAdminMode.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('adminMode(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.mode = de.elo.ix.client.checkMemberInt('adminMode(...), param mode', this.mode);
};

de.elo.ix.client.JsonMethodIXServicePortIFConfigureFulltext = function(ci, userId, opts) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFConfigureFulltext';
  this.ci = ci;
  this.userId = userId;
  this.opts = opts;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFConfigureFulltext.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('configureFulltext(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.userId = de.elo.ix.client.checkMemberString('configureFulltext(...), param userId', this.userId);
  this.opts = de.elo.ix.client.checkMemberObject('configureFulltext(...), param opts', this.opts, 'de.elo.ix.client.FulltextConfig');
};

de.elo.ix.client.JsonMethodIXServicePortIFNotifyServer = function(ci, msg) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFNotifyServer';
  this.ci = ci;
  this.msg = msg;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFNotifyServer.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('notifyServer(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.msg = de.elo.ix.client.checkMemberObject('notifyServer(...), param msg', this.msg, 'de.elo.ix.client.NotifyServerInfo');
};

de.elo.ix.client.JsonMethodIXServicePortIFConfigureBackup = function(ci, backupProfiles) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFConfigureBackup';
  this.ci = ci;
  this.backupProfiles = backupProfiles;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFConfigureBackup.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('configureBackup(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.backupProfiles = de.elo.ix.client.checkMemberArrayObject('configureBackup(...), param backupProfiles', this.backupProfiles, 'de.elo.ix.client.BackupProfile');
};

de.elo.ix.client.JsonMethodIXServicePortIFAddUrlParams = function(ci, url, params) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFAddUrlParams';
  this.ci = ci;
  this.url = url;
  this.params = params;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFAddUrlParams.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('addUrlParams(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.url = de.elo.ix.client.checkMemberString('addUrlParams(...), param url', this.url);
  this.params = de.elo.ix.client.checkMemberObject('addUrlParams(...), param params', this.params, 'de.elo.ix.client.UrlParams');
};

de.elo.ix.client.JsonMethodIXServicePortIFOpenEventBus = function(ci, params) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFOpenEventBus';
  this.ci = ci;
  this.params = params;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFOpenEventBus.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('openEventBus(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.params = de.elo.ix.client.checkMemberObject('openEventBus(...), param params', this.params, 'de.elo.ix.client.EventBusParams');
};

de.elo.ix.client.JsonMethodIXServicePortIFCloseEventBus = function(ci, busId) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCloseEventBus';
  this.ci = ci;
  this.busId = busId;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCloseEventBus.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('closeEventBus(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.busId = de.elo.ix.client.checkMemberLong('closeEventBus(...), param busId', this.busId);
};

de.elo.ix.client.JsonMethodIXServicePortIFCreateEventBusSubscriber = function(ci) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCreateEventBusSubscriber';
  this.ci = ci;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCreateEventBusSubscriber.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('createEventBusSubscriber(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
};

de.elo.ix.client.JsonMethodIXServicePortIFDeleteEventBusSubscriber = function(ci, subsId) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFDeleteEventBusSubscriber';
  this.ci = ci;
  this.subsId = subsId;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFDeleteEventBusSubscriber.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('deleteEventBusSubscriber(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.subsId = de.elo.ix.client.checkMemberLong('deleteEventBusSubscriber(...), param subsId', this.subsId);
};

de.elo.ix.client.JsonMethodIXServicePortIFCreateEventBusListener = function(ci, subsId, eventListener) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCreateEventBusListener';
  this.ci = ci;
  this.subsId = subsId;
  this.eventListener = eventListener;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCreateEventBusListener.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('createEventBusListener(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.subsId = de.elo.ix.client.checkMemberLong('createEventBusListener(...), param subsId', this.subsId);
  this.eventListener = de.elo.ix.client.checkMemberObject('createEventBusListener(...), param eventListener', this.eventListener, 'de.elo.ix.client.EventListener');
};

de.elo.ix.client.JsonMethodIXServicePortIFDeleteEventBusListener = function(ci, lsnId) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFDeleteEventBusListener';
  this.ci = ci;
  this.lsnId = lsnId;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFDeleteEventBusListener.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('deleteEventBusListener(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.lsnId = de.elo.ix.client.checkMemberLong('deleteEventBusListener(...), param lsnId', this.lsnId);
};

de.elo.ix.client.JsonMethodIXServicePortIFInternalReceiveEvents = function(ci, subsId, timeoutMillis) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFInternalReceiveEvents';
  this.ci = ci;
  this.subsId = subsId;
  this.timeoutMillis = timeoutMillis;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFInternalReceiveEvents.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('internalReceiveEvents(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.subsId = de.elo.ix.client.checkMemberLong('internalReceiveEvents(...), param subsId', this.subsId);
  this.timeoutMillis = de.elo.ix.client.checkMemberLong('internalReceiveEvents(...), param timeoutMillis', this.timeoutMillis);
};

de.elo.ix.client.JsonMethodIXServicePortIFSendEvents = function(ci, subsId, events) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFSendEvents';
  this.ci = ci;
  this.subsId = subsId;
  this.events = events;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFSendEvents.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('sendEvents(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.subsId = de.elo.ix.client.checkMemberLong('sendEvents(...), param subsId', this.subsId);
  this.events = de.elo.ix.client.checkMemberArrayObject('sendEvents(...), param events', this.events, 'de.elo.ix.client.Event');
};

de.elo.ix.client.JsonMethodIXServicePortIFCreateRsaKeys = function(ci) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCreateRsaKeys';
  this.ci = ci;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCreateRsaKeys.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('createRsaKeys(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
};

de.elo.ix.client.JsonMethodIXServicePortIFEncryptStringRsa = function(ci, key, data, encryptNotDecrypt) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFEncryptStringRsa';
  this.ci = ci;
  this.key = key;
  this.data = data;
  this.encryptNotDecrypt = encryptNotDecrypt;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFEncryptStringRsa.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('encryptStringRsa(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.key = de.elo.ix.client.checkMemberString('encryptStringRsa(...), param key', this.key);
  this.data = de.elo.ix.client.checkMemberString('encryptStringRsa(...), param data', this.data);
  this.encryptNotDecrypt = de.elo.ix.client.checkMemberBoolean('encryptStringRsa(...), param encryptNotDecrypt', this.encryptNotDecrypt);
};

de.elo.ix.client.JsonMethodIXServicePortIFCreateActivityProject = function(ci, projectName) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCreateActivityProject';
  this.ci = ci;
  this.projectName = projectName;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCreateActivityProject.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('createActivityProject(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.projectName = de.elo.ix.client.checkMemberString('createActivityProject(...), param projectName', this.projectName);
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckinActivityProject = function(ci, actProj, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckinActivityProject';
  this.ci = ci;
  this.actProj = actProj;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckinActivityProject.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkinActivityProject(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.actProj = de.elo.ix.client.checkMemberObject('checkinActivityProject(...), param actProj', this.actProj, 'de.elo.ix.client.ActivityProject');
  this.unlockZ = de.elo.ix.client.checkMemberObject('checkinActivityProject(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckoutActivityProject = function(ci, projectName, lockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckoutActivityProject';
  this.ci = ci;
  this.projectName = projectName;
  this.lockZ = lockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckoutActivityProject.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkoutActivityProject(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.projectName = de.elo.ix.client.checkMemberString('checkoutActivityProject(...), param projectName', this.projectName);
  this.lockZ = de.elo.ix.client.checkMemberObject('checkoutActivityProject(...), param lockZ', this.lockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFDeleteActivityProject = function(ci, projectName, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFDeleteActivityProject';
  this.ci = ci;
  this.projectName = projectName;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFDeleteActivityProject.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('deleteActivityProject(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.projectName = de.elo.ix.client.checkMemberString('deleteActivityProject(...), param projectName', this.projectName);
  this.unlockZ = de.elo.ix.client.checkMemberObject('deleteActivityProject(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFFindActivityProjects = function(ci, findInfo) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFFindActivityProjects';
  this.ci = ci;
  this.findInfo = findInfo;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFFindActivityProjects.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('findActivityProjects(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.findInfo = de.elo.ix.client.checkMemberObject('findActivityProjects(...), param findInfo', this.findInfo, 'de.elo.ix.client.FindActivityProjectsInfo');
};

de.elo.ix.client.JsonMethodIXServicePortIFCreateActivity = function(ci, projectName, objId) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCreateActivity';
  this.ci = ci;
  this.projectName = projectName;
  this.objId = objId;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCreateActivity.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('createActivity(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.projectName = de.elo.ix.client.checkMemberString('createActivity(...), param projectName', this.projectName);
  this.objId = de.elo.ix.client.checkMemberString('createActivity(...), param objId', this.objId);
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckinActivity = function(ci, act, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckinActivity';
  this.ci = ci;
  this.act = act;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckinActivity.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkinActivity(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.act = de.elo.ix.client.checkMemberObject('checkinActivity(...), param act', this.act, 'de.elo.ix.client.Activity');
  this.unlockZ = de.elo.ix.client.checkMemberObject('checkinActivity(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFDeleteActivity = function(ci, actGuid, deleteOptions, unlockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFDeleteActivity';
  this.ci = ci;
  this.actGuid = actGuid;
  this.deleteOptions = deleteOptions;
  this.unlockZ = unlockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFDeleteActivity.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('deleteActivity(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.actGuid = de.elo.ix.client.checkMemberString('deleteActivity(...), param actGuid', this.actGuid);
  this.deleteOptions = de.elo.ix.client.checkMemberObject('deleteActivity(...), param deleteOptions', this.deleteOptions, 'de.elo.ix.client.DeleteActivityOptions');
  this.unlockZ = de.elo.ix.client.checkMemberObject('deleteActivity(...), param unlockZ', this.unlockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFCheckoutActivity = function(ci, actGuid, lockZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFCheckoutActivity';
  this.ci = ci;
  this.actGuid = actGuid;
  this.lockZ = lockZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFCheckoutActivity.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('checkoutActivity(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.actGuid = de.elo.ix.client.checkMemberString('checkoutActivity(...), param actGuid', this.actGuid);
  this.lockZ = de.elo.ix.client.checkMemberObject('checkoutActivity(...), param lockZ', this.lockZ, 'de.elo.ix.client.LockZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFFindFirstActivities = function(ci, findInfo, max, activityZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFFindFirstActivities';
  this.ci = ci;
  this.findInfo = findInfo;
  this.max = max;
  this.activityZ = activityZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFFindFirstActivities.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('findFirstActivities(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.findInfo = de.elo.ix.client.checkMemberObject('findFirstActivities(...), param findInfo', this.findInfo, 'de.elo.ix.client.FindActivityInfo');
  this.max = de.elo.ix.client.checkMemberInt('findFirstActivities(...), param max', this.max);
  this.activityZ = de.elo.ix.client.checkMemberObject('findFirstActivities(...), param activityZ', this.activityZ, 'de.elo.ix.client.ActivityZ');
};

de.elo.ix.client.JsonMethodIXServicePortIFFindNextActivities = function(ci, searchId, idx, max, activityZ) {
  this.clazz = 'de.elo.ix.client.JsonMethodIXServicePortIFFindNextActivities';
  this.ci = ci;
  this.searchId = searchId;
  this.idx = idx;
  this.max = max;
  this.activityZ = activityZ;
  this.checkMembers();
};
de.elo.ix.client.JsonMethodIXServicePortIFFindNextActivities.prototype.checkMembers = function() {
  this.ci = de.elo.ix.client.checkMemberObject('findNextActivities(...), param ci', this.ci, 'de.elo.ix.client.ClientInfo');
  this.searchId = de.elo.ix.client.checkMemberString('findNextActivities(...), param searchId', this.searchId);
  this.idx = de.elo.ix.client.checkMemberInt('findNextActivities(...), param idx', this.idx);
  this.max = de.elo.ix.client.checkMemberInt('findNextActivities(...), param max', this.max);
  this.activityZ = de.elo.ix.client.checkMemberObject('findNextActivities(...), param activityZ', this.activityZ, 'de.elo.ix.client.ActivityZ');
};

/**
 * Service interface with connection
 */
de.elo.ix.client.IXConnIXServicePortIF.prototype.alive = function(asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFAlive(this._ixsl.ci());
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.beginEditWorkFlowNode = function(nFlowId, nNodeId, lockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFBeginEditWorkFlowNode(this._ixsl.ci(), nFlowId, nNodeId, lockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.changeSordMask = function(sord, maskId, editInfoZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFChangeSordMask(this._ixsl.ci(), sord, maskId, editInfoZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkinColors = function(colors, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckinColors(this._ixsl.ci(), colors, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkinConfigFiles = function(configFiles, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckinConfigFiles(this._ixsl.ci(), configFiles, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkinConfigFilesBegin = function(names, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckinConfigFilesBegin(this._ixsl.ci(), names);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkinConfigFilesEnd = function(configFiles, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckinConfigFilesEnd(this._ixsl.ci(), configFiles, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkinCounters = function(counterInfos, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckinCounters(this._ixsl.ci(), counterInfos, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkinDocBegin = function(document, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckinDocBegin(this._ixsl.ci(), document);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkinDocDupl = function(sord, sordZ, document, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckinDocDupl(this._ixsl.ci(), sord, sordZ, document, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkinDocEnd = function(sord, sordZ, document, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckinDocEnd(this._ixsl.ci(), sord, sordZ, document, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkinDocMask = function(docMask, docMaskZ, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckinDocMask(this._ixsl.ci(), docMask, docMaskZ, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkinDocsBegin = function(documents, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckinDocsBegin(this._ixsl.ci(), documents);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkinDocsEnd = function(sords, sordZs, documents, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckinDocsEnd(this._ixsl.ci(), sords, sordZs, documents, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkinKeys = function(keyInfos, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckinKeys(this._ixsl.ci(), keyInfos, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkinKeywords = function(kws, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckinKeywords(this._ixsl.ci(), kws, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkinNotes = function(objId, notes, noteZ, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckinNotes(this._ixsl.ci(), objId, notes, noteZ, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkinReminder = function(remi, receiverIds, expandGroups, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckinReminder(this._ixsl.ci(), remi, receiverIds, expandGroups, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkinReplNames = function(replNames, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckinReplNames(this._ixsl.ci(), replNames, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkinReportOptions = function(options, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckinReportOptions(this._ixsl.ci(), options, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkinSord = function(sord, sordZ, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckinSord(this._ixsl.ci(), sord, sordZ, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkinSordPath = function(parentId, sords, sordZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckinSordPath(this._ixsl.ci(), parentId, sords, sordZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkinSordTypes = function(sordTypes, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckinSordTypes(this._ixsl.ci(), sordTypes, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkinStorage = function(storeInfos, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckinStorage(this._ixsl.ci(), storeInfos, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkinSubs = function(deps, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckinSubs(this._ixsl.ci(), deps, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkinUserProfile = function(userProfile, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckinUserProfile(this._ixsl.ci(), userProfile, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkinUsers = function(userInfos, checkinUsersZ, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckinUsers(this._ixsl.ci(), userInfos, checkinUsersZ, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkinWorkFlow = function(wf, workFlowDiagramZ, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckinWorkFlow(this._ixsl.ci(), wf, workFlowDiagramZ, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkoutColors = function(lockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckoutColors(this._ixsl.ci(), lockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkoutConfigFiles = function(names, configFileZ, lockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckoutConfigFiles(this._ixsl.ci(), names, configFileZ, lockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkoutCounters = function(counterNames, incrementCounters, lockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckoutCounters(this._ixsl.ci(), counterNames, incrementCounters, lockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkoutDoc = function(objId, docId, editInfoZ, lockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckoutDoc(this._ixsl.ci(), objId, docId, editInfoZ, lockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkoutDocMask = function(maskId, docMaskZ, lockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckoutDocMask(this._ixsl.ci(), maskId, docMaskZ, lockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkoutKeys = function(ids, lockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckoutKeys(this._ixsl.ci(), ids, lockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkoutKeywords = function(kwids, keywordZ, max, lockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckoutKeywords(this._ixsl.ci(), kwids, keywordZ, max, lockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkoutNotes = function(objId, noteIds, noteZ, lockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckoutNotes(this._ixsl.ci(), objId, noteIds, noteZ, lockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkoutReminders = function(reminderIds, lockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckoutReminders(this._ixsl.ci(), reminderIds, lockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkoutReplNames = function(lockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckoutReplNames(this._ixsl.ci(), lockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkoutReportOptions = function(lockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckoutReportOptions(this._ixsl.ci(), lockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkoutSord = function(objId, editInfoZ, lockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckoutSord(this._ixsl.ci(), objId, editInfoZ, lockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkoutSordHistory = function(objId, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckoutSordHistory(this._ixsl.ci(), objId);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkoutSordTypes = function(sordTypeIds, sordTypeZ, lockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckoutSordTypes(this._ixsl.ci(), sordTypeIds, sordTypeZ, lockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkoutStorage = function(ids, lockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckoutStorage(this._ixsl.ci(), ids, lockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkoutSubs = function(userId, lockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckoutSubs(this._ixsl.ci(), userId, lockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkoutUserProfile = function(userProfile, lockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckoutUserProfile(this._ixsl.ci(), userProfile, lockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkoutUsers = function(ids, checkoutUsersZ, lockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckoutUsers(this._ixsl.ci(), ids, checkoutUsersZ, lockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkoutWorkFlow = function(flowId, typeZ, workFlowDiagramZ, lockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckoutWorkFlow(this._ixsl.ci(), flowId, typeZ, workFlowDiagramZ, lockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.cleanupStart = function(deleteOptions, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCleanupStart(this._ixsl.ci(), deleteOptions);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.cleanupState = function(asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCleanupState(this._ixsl.ci());
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.cleanupStop = function(asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCleanupStop(this._ixsl.ci());
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.collectJobStates = function(activeJobs, finishedJobs, fullInfo, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCollectJobStates(this._ixsl.ci(), activeJobs, finishedJobs, fullInfo);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.collectWorkFlowNodes = function(flowName, wfTypeZ, nodeName, nodeType, objId, enterDateIso, exitDateIso, userIds, onlyActive, onlyStartNodes, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCollectWorkFlowNodes(this._ixsl.ci(), flowName, wfTypeZ, nodeName, nodeType, objId, enterDateIso, exitDateIso, userIds, onlyActive, onlyStartNodes);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.collectWorkFlows = function(typeZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCollectWorkFlows(this._ixsl.ci(), typeZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.findFirstWorkflows = function(findInfo, max, wfDiagramZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFFindFirstWorkflows(this._ixsl.ci(), findInfo, max, wfDiagramZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.findNextWorkflows = function(searchId, index, maxResults, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFFindNextWorkflows(this._ixsl.ci(), searchId, index, maxResults);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.cookKeyword = function(kwid, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCookKeyword(this._ixsl.ci(), kwid);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.copySord = function(newParentId, objId, copyInfo, copySordZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCopySord(this._ixsl.ci(), newParentId, objId, copyInfo, copySordZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.createDoc = function(parentId, maskId, docTemplate, editInfoZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCreateDoc(this._ixsl.ci(), parentId, maskId, docTemplate, editInfoZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.createDocMask = function(maskId, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCreateDocMask(this._ixsl.ci(), maskId);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.createKey = function(asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCreateKey(this._ixsl.ci());
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.createNote = function(objId, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCreateNote(this._ixsl.ci(), objId);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.createNote2 = function(objId, noteType, templId, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCreateNote2(this._ixsl.ci(), objId, noteType, templId);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.createReminder = function(objId, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCreateReminder(this._ixsl.ci(), objId);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.createSord = function(parentId, maskId, editInfoZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCreateSord(this._ixsl.ci(), parentId, maskId, editInfoZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.createUser = function(rightsAsUserId, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCreateUser(this._ixsl.ci(), rightsAsUserId);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.createWFNode = function(nodeId, nodeTypeC, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCreateWFNode(this._ixsl.ci(), nodeId, nodeTypeC);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.createWorkFlow = function(wfName, typeZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCreateWorkFlow(this._ixsl.ci(), wfName, typeZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.deleteConfigFiles = function(names, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFDeleteConfigFiles(this._ixsl.ci(), names, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.deleteCounters = function(counterNames, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFDeleteCounters(this._ixsl.ci(), counterNames, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.deleteDocMask = function(maskId, assignMaskId, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFDeleteDocMask(this._ixsl.ci(), maskId, assignMaskId, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.deleteKeys = function(ids, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFDeleteKeys(this._ixsl.ci(), ids, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.deleteKeywords = function(kwids, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFDeleteKeywords(this._ixsl.ci(), kwids, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.deleteNotes = function(noteIds, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFDeleteNotes(this._ixsl.ci(), noteIds, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.deleteReminders = function(reminderIds, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFDeleteReminders(this._ixsl.ci(), reminderIds, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.deleteReport = function(endDateISO, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFDeleteReport(this._ixsl.ci(), endDateISO);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.deleteSord = function(parentId, objId, unlockZ, deleteOptions, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFDeleteSord(this._ixsl.ci(), parentId, objId, unlockZ, deleteOptions);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.deleteSordTypes = function(sordTypeIds, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFDeleteSordTypes(this._ixsl.ci(), sordTypeIds, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.deleteSubs = function(deps, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFDeleteSubs(this._ixsl.ci(), deps, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.deleteUserProfile = function(userProfile, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFDeleteUserProfile(this._ixsl.ci(), userProfile, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.deleteUsers = function(ids, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFDeleteUsers(this._ixsl.ci(), ids, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.deleteWorkFlow = function(flowId, typeZ, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFDeleteWorkFlow(this._ixsl.ci(), flowId, typeZ, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.endEditWorkFlowNode = function(nFlowId, nNodeId, bTerminate, bCancel, sName, sComment, arrEnterNodesIds, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFEndEditWorkFlowNode(this._ixsl.ci(), nFlowId, nNodeId, bTerminate, bCancel, sName, sComment, arrEnterNodesIds);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.findClose = function(searchId, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFFindClose(this._ixsl.ci(), searchId);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.findFirstConfigFiles = function(findInfo, max, configFileZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFFindFirstConfigFiles(this._ixsl.ci(), findInfo, max, configFileZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.findFirstReportInfos = function(opts, max, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFFindFirstReportInfos(this._ixsl.ci(), opts, max);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.findFirstSords = function(findInfo, max, sordZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFFindFirstSords(this._ixsl.ci(), findInfo, max, sordZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.findFirstTasks = function(findInfo, max, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFFindFirstTasks(this._ixsl.ci(), findInfo, max);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.findNextConfigFiles = function(searchId, idx, max, configFileZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFFindNextConfigFiles(this._ixsl.ci(), searchId, idx, max, configFileZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.findNextReportInfos = function(searchId, idx, max, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFFindNextReportInfos(this._ixsl.ci(), searchId, idx, max);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.findNextSords = function(searchId, idx, max, sordZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFFindNextSords(this._ixsl.ci(), searchId, idx, max, sordZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.findNextTasks = function(searchId, idx, max, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFFindNextTasks(this._ixsl.ci(), searchId, idx, max);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.finishExport = function(exportId, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFFinishExport(this._ixsl.ci(), exportId);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.getConstants = function(asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFGetConstants(this._ixsl.ci());
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.getExportZipUrl = function(exportId, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFGetExportZipUrl(this._ixsl.ci(), exportId);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.getImportZipUrl = function(importId, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFGetImportZipUrl(this._ixsl.ci(), importId);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.getServerInfo = function(asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFGetServerInfo(this._ixsl.ci());
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.setServerInfo = function(serverInfo, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFSetServerInfo(this._ixsl.ci(), serverInfo);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.getServerInfoDM = function(asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFGetServerInfoDM(this._ixsl.ci());
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.setServerInfoDM = function(serverInfo, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFSetServerInfoDM(this._ixsl.ci(), serverInfo);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.getSessionOptions = function(asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFGetSessionOptions(this._ixsl.ci());
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.getUserNames = function(ids, checkoutUsersZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFGetUserNames(this._ixsl.ci(), ids, checkoutUsersZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.importWorkFlow = function(flowName, fileData, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFImportWorkFlow(this._ixsl.ci(), flowName, fileData);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.linkSords = function(fromId, toIds, linkZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFLinkSords(this._ixsl.ci(), fromId, toIds, linkZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.lockArchive = function(keyId, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFLockArchive(this._ixsl.ci(), keyId);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.login = function(userName, userPwd, clientComputer, runAsUser, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFLogin(this._ixsl.ci(), userName, userPwd, clientComputer, runAsUser);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.loginAdmin = function(userName, userPwd, clientComputer, reportAsUser, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFLoginAdmin(this._ixsl.ci(), userName, userPwd, clientComputer, reportAsUser);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.loginEloProf = function(userId, certificate, clientComputer, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFLoginEloProf(this._ixsl.ci(), userId, certificate, clientComputer);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.loginKerberos = function(ticket, clientComputer, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFLoginKerberos(this._ixsl.ci(), ticket, clientComputer);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.logout = function(asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFLogout(this._ixsl.ci());
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.parseException = function(exceptionString, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFParseException(this._ixsl.ci(), exceptionString);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.processFindResult = function(searchId, procInfo, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFProcessFindResult(this._ixsl.ci(), searchId, procInfo);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.processTrees = function(navigationInfo, procInfo, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFProcessTrees(this._ixsl.ci(), navigationInfo, procInfo);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.queryJobState = function(jobGuid, activeJobs, finishedJobs, fullInfo, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFQueryJobState(this._ixsl.ci(), jobGuid, activeJobs, finishedJobs, fullInfo);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.refSord = function(oldParentId, newParentId, objId, manSortIdx, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFRefSord(this._ixsl.ci(), oldParentId, newParentId, objId, manSortIdx);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.restoreSord = function(objId, restoreOptions, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFRestoreSord(this._ixsl.ci(), objId, restoreOptions);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.setSessionOptions = function(opts, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFSetSessionOptions(this._ixsl.ci(), opts);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.startAdHocWorkFlow = function(name, objId, arrUserIds, nodeName, forValidation, serialFlow, cancelUserId, cancelMessage, finishedUserId, finishedMessage, finishedScript, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFStartAdHocWorkFlow(this._ixsl.ci(), name, objId, arrUserIds, nodeName, forValidation, serialFlow, cancelUserId, cancelMessage, finishedUserId, finishedMessage, finishedScript);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.startExport = function(topLevelIDs, options, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFStartExport(this._ixsl.ci(), topLevelIDs, options);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.startImport = function(filingPath, guidMethod, options, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFStartImport(this._ixsl.ci(), filingPath, guidMethod, options);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.startWorkFlow = function(templFlowId, flowName, objId, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFStartWorkFlow(this._ixsl.ci(), templFlowId, flowName, objId);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.takeWorkFlowNode = function(nFlowId, nNodeId, sUserId, nFlags, lockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFTakeWorkFlowNode(this._ixsl.ci(), nFlowId, nNodeId, sUserId, nFlags, lockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.terminateWorkFlow = function(flowId, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFTerminateWorkFlow(this._ixsl.ci(), flowId, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.delegateWorkFlowNode = function(delegateNodeInfo, lockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFDelegateWorkFlowNode(this._ixsl.ci(), delegateNodeInfo, lockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.deferWorkFlowNode = function(flowId, nodeId, userDelayDateIso, lockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFDeferWorkFlowNode(this._ixsl.ci(), flowId, nodeId, userDelayDateIso, lockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.testAdapter = function(fn, params, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFTestAdapter(this._ixsl.ci(), fn, params);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.unlinkSords = function(fromId, toIds, linkZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFUnlinkSords(this._ixsl.ci(), fromId, toIds, linkZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkoutCryptInfos = function(ids, lockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckoutCryptInfos(this._ixsl.ci(), ids, lockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkinCryptInfos = function(cryptInfos, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckinCryptInfos(this._ixsl.ci(), cryptInfos, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.provideCryptPassword = function(encryptionSet, pwd, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFProvideCryptPassword(this._ixsl.ci(), encryptionSet, pwd);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.invalidateCache = function(flags, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFInvalidateCache(this._ixsl.ci(), flags);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.findFirstTranslateTerms = function(findInfo, max, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFFindFirstTranslateTerms(this._ixsl.ci(), findInfo, max);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.findNextTranslateTerms = function(searchId, idx, max, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFFindNextTranslateTerms(this._ixsl.ci(), searchId, idx, max);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkoutTranslateTerms = function(termIds, lockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckoutTranslateTerms(this._ixsl.ci(), termIds, lockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkinTranslateTerms = function(tterms, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckinTranslateTerms(this._ixsl.ci(), tterms, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.deleteTranslateTerms = function(termIds, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFDeleteTranslateTerms(this._ixsl.ci(), termIds, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.getWorkflowTemplateVersions = function(flowId, onlyDeleted, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFGetWorkflowTemplateVersions(this._ixsl.ci(), flowId, onlyDeleted);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkoutWorkflowTemplate = function(flowId, versionId, wfZ, lockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckoutWorkflowTemplate(this._ixsl.ci(), flowId, versionId, wfZ, lockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkinWorkflowTemplate = function(wf, wfZ, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckinWorkflowTemplate(this._ixsl.ci(), wf, wfZ, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.deleteWorkflowTemplate = function(flowId, versionId, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFDeleteWorkflowTemplate(this._ixsl.ci(), flowId, versionId, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkoutNoteTemplates = function(userId, ids, ntemplZ, lockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckoutNoteTemplates(this._ixsl.ci(), userId, ids, ntemplZ, lockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.createNoteTemplate = function(userId, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCreateNoteTemplate(this._ixsl.ci(), userId);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.deleteNoteTemplates = function(userId, ids, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFDeleteNoteTemplates(this._ixsl.ci(), userId, ids, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkinNoteTemplates = function(noteTemplates, ntemplZ, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckinNoteTemplates(this._ixsl.ci(), noteTemplates, ntemplZ, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.reload = function(asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFReload(this._ixsl.ci());
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.deleteKeywordList = function(kwid, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFDeleteKeywordList(this._ixsl.ci(), kwid, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkoutKeywordList = function(kwid, keywordZ, max, lockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckoutKeywordList(this._ixsl.ci(), kwid, keywordZ, max, lockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkinKeywordList = function(kwList, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckinKeywordList(this._ixsl.ci(), kwList, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.combineAcl = function(lhs, rhs, options, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCombineAcl(this._ixsl.ci(), lhs, rhs, options);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.getEditInfoFromESW = function(fileDatas, eswOptions, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFGetEditInfoFromESW(this._ixsl.ci(), fileDatas, eswOptions);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.getESWFromEditInfo = function(editInfos, eswOptions, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFGetESWFromEditInfo(this._ixsl.ci(), editInfos, eswOptions);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.getSessionFromTicket = function(options, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFGetSessionFromTicket(this._ixsl.ci(), options);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.executeScript = function(params, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFExecuteScript(this._ixsl.ci(), params);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.exportWorkflow = function(wfExportOptions, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFExportWorkflow(this._ixsl.ci(), wfExportOptions);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.getDistinctValuesOfObjKey = function(okeyName, opts, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFGetDistinctValuesOfObjKey(this._ixsl.ci(), okeyName, opts);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.getArchiveStatistics = function(opts, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFGetArchiveStatistics(this._ixsl.ci(), opts);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.collectMapDomains = function(asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCollectMapDomains(this._ixsl.ci());
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkinMapDomain = function(mapDomain, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckinMapDomain(this._ixsl.ci(), mapDomain, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkoutMapDomain = function(domainName, lockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckoutMapDomain(this._ixsl.ci(), domainName, lockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.deleteMapDomain = function(domainName, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFDeleteMapDomain(this._ixsl.ci(), domainName, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkinMap = function(domainName, id, objId, data, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckinMap(this._ixsl.ci(), domainName, id, objId, data, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkoutMap = function(domainName, id, keyNames, lockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckoutMap(this._ixsl.ci(), domainName, id, keyNames, lockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.deleteMap = function(domainName, id, keyNames, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFDeleteMap(this._ixsl.ci(), domainName, id, keyNames, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.getContextTerms = function(findInfo, field, max, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFGetContextTerms(this._ixsl.ci(), findInfo, field, max);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.executeRegisteredFunction = function(functionName, param, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFExecuteRegisteredFunction(this._ixsl.ci(), functionName, param);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.getSearchTerms = function(findInfo, termType, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFGetSearchTerms(this._ixsl.ci(), findInfo, termType);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.adminMode = function(mode, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFAdminMode(this._ixsl.ci(), mode);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.configureFulltext = function(userId, opts, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFConfigureFulltext(this._ixsl.ci(), userId, opts);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.notifyServer = function(msg, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFNotifyServer(this._ixsl.ci(), msg);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.configureBackup = function(backupProfiles, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFConfigureBackup(this._ixsl.ci(), backupProfiles);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.addUrlParams = function(url, params, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFAddUrlParams(this._ixsl.ci(), url, params);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.openEventBus = function(params, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFOpenEventBus(this._ixsl.ci(), params);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.closeEventBus = function(busId, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCloseEventBus(this._ixsl.ci(), busId);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.createEventBusSubscriber = function(asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCreateEventBusSubscriber(this._ixsl.ci());
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.deleteEventBusSubscriber = function(subsId, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFDeleteEventBusSubscriber(this._ixsl.ci(), subsId);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.createEventBusListener = function(subsId, eventListener, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCreateEventBusListener(this._ixsl.ci(), subsId, eventListener);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.deleteEventBusListener = function(lsnId, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFDeleteEventBusListener(this._ixsl.ci(), lsnId);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.internalReceiveEvents = function(subsId, timeoutMillis, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFInternalReceiveEvents(this._ixsl.ci(), subsId, timeoutMillis);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.sendEvents = function(subsId, events, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFSendEvents(this._ixsl.ci(), subsId, events);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.createRsaKeys = function(asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCreateRsaKeys(this._ixsl.ci());
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.encryptStringRsa = function(key, data, encryptNotDecrypt, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFEncryptStringRsa(this._ixsl.ci(), key, data, encryptNotDecrypt);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.createActivityProject = function(projectName, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCreateActivityProject(this._ixsl.ci(), projectName);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkinActivityProject = function(actProj, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckinActivityProject(this._ixsl.ci(), actProj, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkoutActivityProject = function(projectName, lockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckoutActivityProject(this._ixsl.ci(), projectName, lockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.deleteActivityProject = function(projectName, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFDeleteActivityProject(this._ixsl.ci(), projectName, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.findActivityProjects = function(findInfo, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFFindActivityProjects(this._ixsl.ci(), findInfo);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.createActivity = function(projectName, objId, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCreateActivity(this._ixsl.ci(), projectName, objId);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkinActivity = function(act, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckinActivity(this._ixsl.ci(), act, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.deleteActivity = function(actGuid, deleteOptions, unlockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFDeleteActivity(this._ixsl.ci(), actGuid, deleteOptions, unlockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.checkoutActivity = function(actGuid, lockZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckoutActivity(this._ixsl.ci(), actGuid, lockZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.findFirstActivities = function(findInfo, max, activityZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFFindFirstActivities(this._ixsl.ci(), findInfo, max, activityZ);
  return this.send(__local__msg, asyncCallback);
};

de.elo.ix.client.IXConnIXServicePortIF.prototype.findNextActivities = function(searchId, idx, max, activityZ, asyncCallback) {
  var __local__msg = new de.elo.ix.client.JsonMethodIXServicePortIFFindNextActivities(this._ixsl.ci(), searchId, idx, max, activityZ);
  return this.send(__local__msg, asyncCallback);
};

/**
 * This function returns a table of class descriptors used to validate objects.
 */
de.elo.ix.client.createObjectValidationTable = function() {

  var table = { 
    'de.elo.ix.client.WorkFlowNodeMatrix': { members : { clazz:'java.lang.String', flowId:'int', nodeId:'int', isNext:'int', terminate:'int', succType:'int', succ_0:'int', succ_1:'int', succ_2:'int', succ_3:'int', succ_4:'int', succ_5:'int', succ_6:'int', succ_7:'int', succ_8:'int', succ_9:'int', succ_10:'int', succ_11:'int', succ_12:'int', succ_13:'int', succ_14:'int', succ_15:'int', succ_16:'int', succ_17:'int', succ_18:'int', succ_19:'int', versionId:'int' }},
    'de.elo.ix.client.WorkFlowHead': { members : { clazz:'java.lang.String', flowId:'int', tStamp:'java.lang.String', guid:'java.lang.String', status:'int', type:'int', actServerId:'java.lang.String' }},
    'de.elo.ix.client.WorkflowExportOptions': { members : { clazz:'java.lang.String', flowId:'java.lang.String', flowVersId:'java.lang.String', characterSet:'java.lang.String', wordWrap:'java.lang.String' }},
    'de.elo.ix.client.WorkFlowActiveDoc': { members : { clazz:'java.lang.String', flowId:'int', nodeId:'int', flowName:'java.lang.String', name:'java.lang.String', nodeType:'int', succType:'int', department:'int', alertTo:'int', alertFromBegin:'int', alertWait:'int', yNCondition:'java.lang.String', condition:'java.lang.String', comment:'java.lang.String', succ_0:'int', succ_1:'int', succ_2:'int', succ_3:'int', succ_4:'int', succ_5:'int', succ_6:'int', succ_7:'int', succ_8:'int', succ_9:'int', succ_10:'int', succ_11:'int', succ_12:'int', succ_13:'int', succ_14:'int', succ_15:'int', succ_16:'int', succ_17:'int', succ_18:'int', succ_19:'int', locked:'int', posX:'int', posY:'int', onActivate:'java.lang.String', onTerminate:'java.lang.String', nodeFlags:'int', eloObjId:'int', lockId:'int', isNext:'int', activate:'int', terminate:'int', inUseDate:'int', completionDate:'int', templateId:'int', userTerminate:'java.lang.String', tag:'int', designDepartment:'int', moveCyclePosX:'int', department2:'int', delayDays:'int', delayDate:'int', deleted:'int', prio:'int', userDelayDate:'int', versionId:'int', versionName:'java.lang.String', alertTo2:'int', alertWait2:'int', alertTo3:'int', alertWait3:'int', nextServerId:'java.lang.String', versionTag:'java.lang.String', versionUserId:'int', versionCreateDate:'int', iconId:'java.lang.String', formSpec:'java.lang.String' }},
    'de.elo.ix.client.WFVersion': { members : { clazz:'java.lang.String', id:'int', comment:'java.lang.String', userId:'int', userName:'java.lang.String', version:'java.lang.String', createDateIso:'java.lang.String' }},
    'de.elo.ix.client.WFTypeZ': { members : { clazz:'java.lang.String', _bs:'long' }},
    'de.elo.ix.client.WFTimeLimit': { members : { clazz:'java.lang.String', timeLimit:'int', userId:'int', userName:'java.lang.String', timeLimitIso:'java.lang.String', overTimeLimit:'boolean' }},
    'de.elo.ix.client.WFNodeZ': { members : { clazz:'java.lang.String', _bs:'long' }},
    'de.elo.ix.client.WFNodeMatrix': { members : { clazz:'java.lang.String', assocs:'de.elo.ix.client.WFNodeAssoc[]' }},
    'de.elo.ix.client.WFNodeAssoc': { members : { clazz:'java.lang.String', done:'boolean', nodeFrom:'int', nodeTo:'int', type:'int' }},
    'de.elo.ix.client.WFNode': { members : { clazz:'java.lang.String', allowActivate:'boolean', comment:'java.lang.String', delayDays:'int', department2:'int', designDepartment:'int', enterDateIso:'java.lang.String', exitDateIso:'java.lang.String', flags:'int', id:'int', inUseDateIso:'java.lang.String', isNext:'int', moveCyclePosX:'int', name:'java.lang.String', nbOfDonesToExit:'int', onEnter:'java.lang.String', onExit:'java.lang.String', posX:'int', posY:'int', tag:'int', timeLimit:'int', timeLimitIso:'java.lang.String', type:'int', userId:'int', userName:'java.lang.String', userTerminate:'java.lang.String', yesNoCondition:'java.lang.String', delayDateIso:'java.lang.String', overTimeLimit:'boolean', userDelayDateIso:'java.lang.String', processOnServerId:'java.lang.String', timeLimitEscalations:'de.elo.ix.client.WFTimeLimit[]', objKeyNames:'java.lang.String[]', scriptNames:'java.lang.String[]', iconId:'java.lang.String', formSpec:'java.lang.String' }},
    'de.elo.ix.client.WFEditNode': { members : { clazz:'java.lang.String', flowId:'int', node:'de.elo.ix.client.WFNode', nodeId:'int', succNodes:'de.elo.ix.client.WFNode[]' }},
    'de.elo.ix.client.WFDiagramZ': { members : { clazz:'java.lang.String', _bs:'long' }},
    'de.elo.ix.client.WFDiagram': { members : { clazz:'java.lang.String', acl:'java.lang.String', aclItems:'de.elo.ix.client.AclItem[]', completionDateIso:'java.lang.String', deleted:'boolean', id:'int', lockId:'int', lockName:'java.lang.String', matrix:'de.elo.ix.client.WFNodeMatrix', name:'java.lang.String', nodes:'de.elo.ix.client.WFNode[]', objId:'java.lang.String', objType:'int', ownerId:'int', ownerName:'java.lang.String', prio:'int', startDateIso:'java.lang.String', templateId:'int', templateName:'java.lang.String', timeLimit:'int', timeLimitIso:'java.lang.String', timeLimitUserId:'int', timeLimitUserName:'java.lang.String', type:'de.elo.ix.client.WFTypeZ', overTimeLimit:'boolean', flags:'int', access:'int', version:'de.elo.ix.client.WFVersion', guid:'java.lang.String', tStamp:'java.lang.String', processOnServerId:'java.lang.String', timeLimitEscalations:'de.elo.ix.client.WFTimeLimit[]', objName:'java.lang.String' }},
    'de.elo.ix.client.WFDelegateNodeInfo': { members : { clazz:'java.lang.String', flowId:'java.lang.String', nodeId:'int', delegateToUserId:'java.lang.String', delegateNodeName:'java.lang.String', delegateNodeComment:'java.lang.String', backNodeName:'java.lang.String', backNodeComment:'java.lang.String', delegateNodeMoveX:'int', delegateNodeMoveY:'int', backNodeMoveX:'int', backNodeMoveY:'int', copyMembersToDelegateNodeZ:'de.elo.ix.client.WFNodeZ', copyMembersToBackNodeZ:'de.elo.ix.client.WFNodeZ' }},
    'de.elo.ix.client.WFCollectNode': { members : { clazz:'java.lang.String', activateDateIso:'java.lang.String', active:'boolean', flowId:'int', flowName:'java.lang.String', inUseDateIso:'java.lang.String', nodeId:'int', nodeName:'java.lang.String', objGuid:'java.lang.String', objId:'int', objType:'int', prio:'int', terminateDateIso:'java.lang.String', userId:'int', userName:'java.lang.String', overTimeLimit:'boolean', completionDateIso:'java.lang.String', userDelayDateIso:'java.lang.String', flowStatus:'java.lang.String', timeLimitIso:'java.lang.String', timeLimitEscalations:'de.elo.ix.client.WFTimeLimit[]', workflowOwnerId:'int', workflowOwnerName:'java.lang.String', designDepartmentId:'int', designDepartmentName:'java.lang.String', nodeComment:'java.lang.String', objName:'java.lang.String', timeLimit:'int', timeLimitUserId:'int', timeLimitUserName:'java.lang.String' }},
    'de.elo.ix.client.VtDoc': { members : { clazz:'java.lang.String', objId:'int', docId:'int', code:'int' }},
    'de.elo.ix.client.ValuesOfObjKey': { members : { clazz:'java.lang.String', values:'java.lang.String[]', usageCounts:'int[]', totalCount:'int' }},
    'de.elo.ix.client.UserTaskSortOrderZ': { members : { clazz:'java.lang.String', _bs:'long' }},
    'de.elo.ix.client.UserTask': { members : { clazz:'java.lang.String', activity:'de.elo.ix.client.Activity', reminder:'de.elo.ix.client.Reminder', wfNode:'de.elo.ix.client.WFCollectNode' }},
    'de.elo.ix.client.UserProfileData': { members : { clazz:'java.lang.String', user:'int', key:'java.lang.String', value:'java.lang.String' }},
    'de.elo.ix.client.UserProfile': { members : { clazz:'java.lang.String', options:'de.elo.ix.client.KeyValue[]', userId:'java.lang.String', excludeGroupValues:'boolean', excludeDefaultValues:'boolean', userOptions:'de.elo.ix.client.KeyValue[]', groupOptions:'de.elo.ix.client.KeyValue[]', defaultOptions:'de.elo.ix.client.KeyValue[]', groupId:'int' }},
    'de.elo.ix.client.UserName': { members : { clazz:'java.lang.String', id:'int', name:'java.lang.String', type:'int', flags:'int', flags2:'int' }},
    'de.elo.ix.client.UserInfo': { members : { clazz:'java.lang.String', desc:'java.lang.String', flags:'int', groupList:'int[]', id:'int', keylist:'int[]', name:'java.lang.String', parent:'int', pwd:'java.lang.String', sessions:'de.elo.ix.client.SessionInfo[]', type:'int', userProps:'java.lang.String[]', guid:'java.lang.String', tStamp:'java.lang.String', lastLoginIso:'java.lang.String', superiorId:'int', flags2:'int' }},
    'de.elo.ix.client.UrlParams': { members : { clazz:'java.lang.String', length:'long', offset:'long', highlightTerms:'java.lang.String' }},
    'de.elo.ix.client.TranslateTermData': { members : { clazz:'java.lang.String', guid:'java.lang.String', TStamp:'java.lang.String', status:'int', lang1:'java.lang.String', lang2:'java.lang.String', lang3:'java.lang.String', lang4:'java.lang.String', lang5:'java.lang.String', lang6:'java.lang.String', lang7:'java.lang.String', lang8:'java.lang.String', lang9:'java.lang.String' }},
    'de.elo.ix.client.TranslateTerm': { members : { clazz:'java.lang.String', guid:'java.lang.String', deleted:'boolean', tStamp:'java.lang.String', termLangs:'java.lang.String[]', langs:'java.lang.String[]' }},
    'de.elo.ix.client.Thesaurus': { members : { clazz:'java.lang.String', groupId:'int', prio:'int', data:'java.lang.String', compare:'java.lang.String', listId:'int' }},
    'de.elo.ix.client.SubsInfo': { members : { clazz:'java.lang.String', active:'boolean', inheritRights:'boolean', subsId:'int', subsName:'java.lang.String', userId:'int', userName:'java.lang.String' }},
    'de.elo.ix.client.StoreInfo': { members : { clazz:'java.lang.String', createDateISO:'java.lang.String', dir:'java.lang.String', flags:'int', id:'int', name:'java.lang.String', scatter:'int', stdPath:'boolean', updateDateISO:'java.lang.String', previewDir:'java.lang.String', fulltextDir:'java.lang.String' }},
    'de.elo.ix.client.SordZ': { members : { clazz:'java.lang.String', _bs:'long' }},
    'de.elo.ix.client.SordTypeZ': { members : { clazz:'java.lang.String', _bs:'long' }},
    'de.elo.ix.client.SordType': { members : { clazz:'java.lang.String', disabledIcon:'de.elo.ix.client.FileData', extensions:'java.lang.String[]', icon:'de.elo.ix.client.FileData', id:'int', name:'java.lang.String', workflowIcon:'de.elo.ix.client.FileData' }},
    'de.elo.ix.client.SordLink': { members : { clazz:'java.lang.String', id:'java.lang.String', linkId:'java.lang.String' }},
    'de.elo.ix.client.SordHistKey': { members : { clazz:'java.lang.String', histGuid:'java.lang.String', keyData:'java.lang.String', keyName:'java.lang.String', keyNo:'int' }},
    'de.elo.ix.client.SordHist': { members : { clazz:'java.lang.String', histGuid:'java.lang.String', histSource:'int', objGuid:'java.lang.String', timeStampLocal:'java.lang.String', timeStampUTC:'java.lang.String', userName:'java.lang.String', userNo:'int', workStation:'java.lang.String', histKeys:'de.elo.ix.client.SordHistKey[]' }},
    'de.elo.ix.client.SordDetails': { members : { clazz:'java.lang.String', archivingMode:'int', encryptionSet:'int', fulltext:'boolean', sortOrder:'int', arcReplEnabled:'boolean', fulltextDone:'boolean', replRoot:'boolean', linked:'boolean' }},
    'de.elo.ix.client.Sord': { members : { clazz:'java.lang.String', SReg:'java.lang.String', TStamp:'java.lang.String', acl:'java.lang.String', att:'int', childCount:'int', doc:'int', guid:'java.lang.String', histCount:'int', id:'int', info:'int', key:'int', kind:'int', lockId:'int', mask:'int', name:'java.lang.String', ownerId:'int', parentId:'int', path:'int', type:'int', vtRep:'int', IDateIso:'java.lang.String', XDateIso:'java.lang.String', access:'int', aclItems:'de.elo.ix.client.AclItem[]', delDateIso:'java.lang.String', deleted:'boolean', desc:'java.lang.String', details:'de.elo.ix.client.SordDetails', docVersion:'de.elo.ix.client.DocVersion', hiddenText:'java.lang.String', linksComeIn:'de.elo.ix.client.SordLink[]', linksGoOut:'de.elo.ix.client.SordLink[]', lockName:'java.lang.String', objKeys:'de.elo.ix.client.ObjKey[]', ownerName:'java.lang.String', parentIds:'java.lang.String[]', refPaths:'de.elo.ix.client.ArcPath[]', replNames:'de.elo.ix.client.ReplSetName[]', replSet:'de.elo.ix.client.ReplSet', maskName:'java.lang.String', attVersion:'de.elo.ix.client.DocVersion' }},
    'de.elo.ix.client.SessionOptions': { members : { clazz:'java.lang.String', options:'de.elo.ix.client.KeyValue[]' }},
    'de.elo.ix.client.SessionInfo': { members : { clazz:'java.lang.String', clientComputer:'java.lang.String', userId:'int', validSeconds:'int' }},
    'de.elo.ix.client.ServerState': { members : { clazz:'java.lang.String', actionId:'int', subKey:'int', action:'java.lang.String' }},
    'de.elo.ix.client.ServerInfoDM': { members : { clazz:'java.lang.String', basisStoreIds:'int[]', backupStoreIds:'int[]', restoreStoreId:'int', storeMode:'int', proxyMode:'int', blackeningEnabled:'boolean' }},
    'de.elo.ix.client.ServerInfo': { members : { clazz:'java.lang.String', indexServers:'de.elo.ix.client.IndexServerForArchive[]', license:'de.elo.ix.client.License', version:'java.lang.String', replProcessOnServerId:'java.lang.String', databaseEngine:'java.lang.String', instanceName:'java.lang.String' }},
    'de.elo.ix.client.SearchModeZ': { members : { clazz:'java.lang.String', _bs:'long' }},
    'de.elo.ix.client.RestoreOptions': { members : { clazz:'java.lang.String', minIDate:'java.lang.String', singleObject:'boolean' }},
    'de.elo.ix.client.ReportOptions': { members : { clazz:'java.lang.String', erpCodes:'de.elo.ix.client.ReportErpCode[]', mode:'de.elo.ix.client.ReportModeZ' }},
    'de.elo.ix.client.ReportModeZ': { members : { clazz:'java.lang.String', _bs:'long' }},
    'de.elo.ix.client.ReportInfo': { members : { clazz:'java.lang.String', actTime:'int', actionNo:'int', extra1:'int', extra2:'int', id:'java.lang.String', objId:'int', sessionNo:'int', text:'java.lang.String', userId:'int', actTimeISO:'java.lang.String', action:'java.lang.String', comment:'java.lang.String', userName:'java.lang.String' }},
    'de.elo.ix.client.ReportErpCode': { members : { clazz:'java.lang.String', id:'int', limited:'boolean', name:'java.lang.String', verbose:'boolean' }},
    'de.elo.ix.client.ReplSetName': { members : { clazz:'java.lang.String', TStamp:'java.lang.String', desc:'java.lang.String', id:'int', image:'int', mobile:'int', name:'java.lang.String' }},
    'de.elo.ix.client.ReplSet': { members : { clazz:'java.lang.String', dw:'int[]', objId:'int' }},
    'de.elo.ix.client.RepliHist': { members : { clazz:'java.lang.String', id:'int', tSDate:'java.lang.String', imEx:'int', succ:'int', arcGuid:'java.lang.String', arcShort:'java.lang.String', arcDesc:'java.lang.String', tSBegin:'java.lang.String', tSEnd:'java.lang.String' }},
    'de.elo.ix.client.Reminder': { members : { clazz:'java.lang.String', desc:'java.lang.String', id:'int', lockId:'int', name:'java.lang.String', objId:'int', objType:'int', prio:'int', receiverId:'int', senderId:'int', createDateIso:'java.lang.String', deleted:'boolean', dueDateIso:'java.lang.String', lockName:'java.lang.String', notifyOnDelete:'boolean', notifyOnView:'boolean', objGuid:'java.lang.String', promptDateIso:'java.lang.String', receiverName:'java.lang.String', senderName:'java.lang.String' }},
    'de.elo.ix.client.Relation': { members : { clazz:'java.lang.String', parentId:'int', objId:'int', ordinal:'int', status:'int', tStamp:'java.lang.String', guid:'java.lang.String' }},
    'de.elo.ix.client.ProcessScript': { members : { clazz:'java.lang.String', name:'java.lang.String', processPostfix:'boolean', tag:'java.lang.String' }},
    'de.elo.ix.client.ProcessReplSet': { members : { clazz:'java.lang.String', addReplSets:'de.elo.ix.client.IdName[]', andReplSets:'de.elo.ix.client.IdName[]', setReplSets:'de.elo.ix.client.IdName[]', subReplSets:'de.elo.ix.client.IdName[]' }},
    'de.elo.ix.client.ProcessMoveDocumentsToStoragePath': { members : { clazz:'java.lang.String', pathId:'java.lang.String' }},
    'de.elo.ix.client.ProcessInfo': { members : { clazz:'java.lang.String', delStatus:'int', desc:'java.lang.String', errorMode:'int', ignoreDocuments:'boolean', ignoreStructures:'boolean', lockZ:'de.elo.ix.client.LockZ', procAcl:'de.elo.ix.client.ProcessAcl', procFulltext:'de.elo.ix.client.ProcessFulltext', procCountElem:'de.elo.ix.client.ProcessCountElements', procMoveDocumentsToStoragePath:'de.elo.ix.client.ProcessMoveDocumentsToStoragePath', procCopyElements:'de.elo.ix.client.ProcessCopyElements', procMsgMax:'int', procMsgs:'java.lang.String[]', procReplSet:'de.elo.ix.client.ProcessReplSet', procScript:'de.elo.ix.client.ProcessScript', forceOperation:'boolean', inclReferences:'boolean' }},
    'de.elo.ix.client.ProcessFulltext': { members : { clazz:'java.lang.String', addToFulltext:'boolean' }},
    'de.elo.ix.client.ProcessCountElements': { members : { clazz:'java.lang.String', countResult:'de.elo.ix.client.CountResult' }},
    'de.elo.ix.client.ProcessCopyElements': { members : { clazz:'java.lang.String', copyOptions:'de.elo.ix.client.CopyOptions' }},
    'de.elo.ix.client.ProcessAcl': { members : { clazz:'java.lang.String', addAclItems:'de.elo.ix.client.AclItem[]', andAclItems:'de.elo.ix.client.AclItem[]', setAclItems:'de.elo.ix.client.AclItem[]', subAclItems:'de.elo.ix.client.AclItem[]', addAcl:'java.lang.String', subAcl:'java.lang.String', andAcl:'java.lang.String', setAcl:'java.lang.String' }},
    'de.elo.ix.client.PointInfo': { members : { clazz:'java.lang.String', x:'int', y:'int' }},
    'de.elo.ix.client.PhysDelDocs': { members : { clazz:'java.lang.String', objId:'int' }},
    'de.elo.ix.client.PhysDel': { members : { clazz:'java.lang.String', guid:'java.lang.String', type:'int', TStamp:'java.lang.String' }},
    'de.elo.ix.client.ObjKeyData': { members : { clazz:'java.lang.String', objId:'int', id:'int', name:'java.lang.String', data:'java.lang.String', udata:'java.lang.String', sdata:'java.lang.String' }},
    'de.elo.ix.client.ObjKey': { members : { clazz:'java.lang.String', data:'java.lang.String[]', id:'int', name:'java.lang.String', objId:'int' }},
    'de.elo.ix.client.ObjChange': { members : { clazz:'java.lang.String', objId:'java.lang.String', tStamp:'java.lang.String', code:'int', param:'int', param2:'java.lang.String', user:'int' }},
    'de.elo.ix.client.NotifyServerInfo': { members : { clazz:'java.lang.String', scanCount:'int', ocrCount:'int' }},
    'de.elo.ix.client.NoteZ': { members : { clazz:'java.lang.String', _bs:'long' }},
    'de.elo.ix.client.NoteText': { members : { clazz:'java.lang.String', fontInfo:'de.elo.ix.client.FontInfo', text:'java.lang.String' }},
    'de.elo.ix.client.NoteTemplateZ': { members : { clazz:'java.lang.String', _bs:'long' }},
    'de.elo.ix.client.NoteTemplate': { members : { clazz:'java.lang.String', id:'int', name:'java.lang.String', userId:'java.lang.String', noteText:'de.elo.ix.client.NoteText', noteImage:'de.elo.ix.client.NoteImage', acl:'java.lang.String', aclItems:'de.elo.ix.client.AclItem[]' }},
    'de.elo.ix.client.NoteImage': { members : { clazz:'java.lang.String', fileName:'java.lang.String', fileData:'de.elo.ix.client.FileData' }},
    'de.elo.ix.client.NoteFreehand': { members : { clazz:'java.lang.String', width:'int', points:'de.elo.ix.client.PointInfo[]', strikeoutWidth:'int', strikeoutColor:'int' }},
    'de.elo.ix.client.Note': { members : { clazz:'java.lang.String', TStamp:'java.lang.String', XPos:'int', YPos:'int', desc:'java.lang.String', guid:'java.lang.String', height:'int', id:'int', ownerId:'int', pageNo:'int', type:'int', width:'int', createDateIso:'java.lang.String', deleted:'boolean', lockId:'int', lockName:'java.lang.String', objId:'java.lang.String', ownerName:'java.lang.String', acl:'java.lang.String', aclItems:'de.elo.ix.client.AclItem[]', color:'int', noteText:'de.elo.ix.client.NoteText', noteImage:'de.elo.ix.client.NoteImage', noteFreehand:'de.elo.ix.client.NoteFreehand', access:'int' }},
    'de.elo.ix.client.NavigationInfo': { members : { clazz:'java.lang.String', ignoreDocuments:'boolean', maxCount:'int', maxDepth:'int', maxSiblings:'int', startIDs:'java.lang.String[]' }},
    'de.elo.ix.client.MaskName': { members : { clazz:'java.lang.String', documentMask:'boolean', id:'int', name:'java.lang.String', searchMask:'boolean', folderMask:'boolean', guid:'java.lang.String', access:'int' }},
    'de.elo.ix.client.MapItem': { members : { clazz:'java.lang.String', id:'java.lang.String', key:'java.lang.String', value:'java.lang.String' }},
    'de.elo.ix.client.MapHead': { members : { clazz:'java.lang.String', id:'java.lang.String', lockId:'int', objId:'int', TStamp:'java.lang.String', guid:'java.lang.String' }},
    'de.elo.ix.client.MapDomain': { members : { clazz:'java.lang.String', name:'java.lang.String', copy:'boolean', replicate:'boolean' }},
    'de.elo.ix.client.MapData': { members : { clazz:'java.lang.String', domainName:'java.lang.String', id:'java.lang.String', objId:'int', lockId:'int', lockName:'java.lang.String', TStamp:'java.lang.String', items:'de.elo.ix.client.KeyValue[]' }},
    'de.elo.ix.client.LoginResult': { members : { clazz:'java.lang.String', clientInfo:'de.elo.ix.client.ClientInfo', ticketLifetime:'int', user:'de.elo.ix.client.UserInfo' }},
    'de.elo.ix.client.LockZ': { members : { clazz:'java.lang.String', _bs:'long' }},
    'de.elo.ix.client.LinkSordZ': { members : { clazz:'java.lang.String', _bs:'long' }},
    'de.elo.ix.client.License': { members : { clazz:'java.lang.String', backup:'boolean', cold:'boolean', demoVersion:'boolean', dispatchFolder:'boolean', domea:'boolean', emailOnly:'boolean', features:'int[]', fultext:'boolean', httpServer:'boolean', indexServer:'boolean', limitedIg:'boolean', limitedVersion:'boolean', nbOfIgLicenses:'int', nbOfServerLicenses:'int', professional:'boolean', replication:'boolean', sapALink:'boolean', serno:'java.lang.String', signature:'boolean', stack:'boolean', tobid:'boolean', xmlImport:'boolean' }},
    'de.elo.ix.client.KeywordZ': { members : { clazz:'java.lang.String', _bs:'long' }},
    'de.elo.ix.client.KeywordList': { members : { clazz:'java.lang.String', id:'java.lang.String', guid:'java.lang.String', tStamp:'java.lang.String', deleted:'boolean', userId:'int', userName:'java.lang.String', children:'de.elo.ix.client.Keyword[]', lockId:'int' }},
    'de.elo.ix.client.Keyword': { members : { clazz:'java.lang.String', add:'boolean', children:'de.elo.ix.client.Keyword[]', enabled:'boolean', id:'java.lang.String', raw:'boolean', text:'java.lang.String' }},
    'de.elo.ix.client.KeyValue': { members : { clazz:'java.lang.String', key:'java.lang.String', value:'java.lang.String' }},
    'de.elo.ix.client.KeyInfo': { members : { clazz:'java.lang.String', id:'int', name:'java.lang.String' }},
    'de.elo.ix.client.JobState': { members : { clazz:'java.lang.String', countErrors:'long', countEstimatedMax:'long', countProcessed:'long', expires:'long', jobEnd:'java.lang.String', jobGuid:'java.lang.String', jobName:'java.lang.String', jobRunning:'boolean', jobStart:'java.lang.String', lastGuid:'java.lang.String', lastID:'int', procInfo:'de.elo.ix.client.ProcessInfo', countResult:'de.elo.ix.client.CountResult', strMsg:'java.lang.String' }},
    'de.elo.ix.client.IXServerEventsContext': { members : { clazz:'java.lang.String', url:'java.lang.String', ci:'de.elo.ix.client.ClientInfo', user:'de.elo.ix.client.UserInfo' }},
    'de.elo.ix.client.IXExceptionData': { members : { clazz:'java.lang.String', callId:'java.lang.String', details:'java.lang.String', exceptionType:'int', message:'java.lang.String', ticket:'java.lang.String' }},
    'de.elo.ix.client.IndexServerForArchive': { members : { clazz:'java.lang.String', arcName:'java.lang.String', url:'java.lang.String' }},
    'de.elo.ix.client.IdName': { members : { clazz:'java.lang.String', guid:'java.lang.String', id:'int', name:'java.lang.String' }},
    'de.elo.ix.client.HttpResponseInfo': { members : { clazz:'java.lang.String', contentType:'java.lang.String', responseString:'java.lang.String' }},
    'de.elo.ix.client.HttpRequestInfo': { members : { clazz:'java.lang.String', headers:'de.elo.ix.client.KeyValue[]', cookies:'de.elo.ix.client.KeyValue[]', requestParams:'de.elo.ix.client.KeyValue[]', requestURI:'java.lang.String', requestURL:'java.lang.String' }},
    'de.elo.ix.client.FulltextConfig': { members : { clazz:'java.lang.String', source:'int', flags:'int', knowlegeMapUrl:'java.lang.String' }},
    'de.elo.ix.client.FontInfo': { members : { clazz:'java.lang.String', faceName:'java.lang.String', bold:'boolean', italic:'boolean', strikeOut:'boolean', underline:'boolean', RGB:'int', height:'int', heightPerCell:'boolean', escapement:'int' }},
    'de.elo.ix.client.FindWorkflowInfo': { members : { clazz:'java.lang.String', userIds:'java.lang.String[]', name:'java.lang.String', type:'de.elo.ix.client.WFTypeZ', overTimeLimit:'boolean', objId:'java.lang.String', startDateIso:'java.lang.String', completionDateIso:'java.lang.String', templateId:'java.lang.String', inclDeleted:'boolean', ownerIds:'java.lang.String[]', activeUserIds:'java.lang.String[]' }},
    'de.elo.ix.client.FindTranslateTermInfo': { members : { clazz:'java.lang.String', terms:'java.lang.String[]', langs:'java.lang.String[]', inclDeleted:'boolean', inclToBeTranslated:'boolean' }},
    'de.elo.ix.client.FindTasksInfo': { members : { clazz:'java.lang.String', endDateIso:'java.lang.String', highestPriority:'int', inclActivities:'boolean', inclDeputy:'boolean', inclGroup:'boolean', inclReminders:'boolean', inclWorkflows:'boolean', lowestPriority:'int', objId:'java.lang.String', sortOrder:'de.elo.ix.client.UserTaskSortOrderZ', startDateIso:'java.lang.String', overTimeLimit:'boolean', inclOverTimeForSuperior:'boolean', userIds:'java.lang.String[]' }},
    'de.elo.ix.client.FindResult': { members : { clazz:'java.lang.String', breakTimeout:'boolean', breakTotalCount:'boolean', configFiles:'de.elo.ix.client.ConfigFile[]', ids:'java.lang.String[]', moreResults:'boolean', reportInfos:'de.elo.ix.client.ReportInfo[]', count:'int', estimatedCount:'int', searchId:'java.lang.String', sords:'de.elo.ix.client.Sord[]', tasks:'de.elo.ix.client.UserTask[]', workflows:'de.elo.ix.client.WFDiagram[]', translateTerms:'de.elo.ix.client.TranslateTerm[]', fulltextResultItems:'de.elo.ix.client.FindByFulltextResultItem[]', fulltextCtrlResultItems:'de.elo.ix.client.FindByFulltextCtrlResultItem[]' }},
    'de.elo.ix.client.FindReportInfo': { members : { clazz:'java.lang.String', endDateIso:'java.lang.String', erpCodes:'int[]', objId:'java.lang.String', orderBy:'java.lang.String', searchId:'java.lang.String', startDateIso:'java.lang.String', timeoutSeconds:'int', totalCount:'int', userId:'java.lang.String' }},
    'de.elo.ix.client.FindOptions': { members : { clazz:'java.lang.String', escapeChar:'java.lang.String', inclDeleted:'boolean', objIds:'java.lang.String[]', orderBy:'java.lang.String', rangeDelimiter:'java.lang.String', replSet:'de.elo.ix.client.ReplSet', reserved:'long', searchId:'java.lang.String', searchMode:'de.elo.ix.client.SearchModeZ', sortOrder:'int', timeoutSeconds:'int', totalCount:'int', evalCount:'boolean', onlyDeleted:'boolean', TStamp:'java.lang.String', wildcards:'java.lang.String', lockZ:'de.elo.ix.client.LockZ' }},
    'de.elo.ix.client.FindInfo': { members : { clazz:'java.lang.String', findByFulltext:'de.elo.ix.client.FindByFulltext', findDirect:'de.elo.ix.client.FindDirect', findByIndex:'de.elo.ix.client.FindByIndex', findByNotes:'de.elo.ix.client.FindByNotes', findBySordHist:'de.elo.ix.client.FindBySordHist', findByType:'de.elo.ix.client.FindByType', findByVersion:'de.elo.ix.client.FindByVersion', findChildren:'de.elo.ix.client.FindChildren', findOptions:'de.elo.ix.client.FindOptions', findByAcl:'de.elo.ix.client.FindByAcl', findByPreviewCtrl:'de.elo.ix.client.FindByPreviewCtrl', findByFulltextCtrl:'de.elo.ix.client.FindByFulltextCtrl', findByRegisteredFunction:'de.elo.ix.client.FindByRegisteredFunction' }},
    'de.elo.ix.client.FindDirect': { members : { clazz:'java.lang.String', query:'java.lang.String', searchInSordName:'boolean', searchInMemo:'boolean', searchInIndex:'boolean', searchInFulltext:'boolean', searchInNotes:'boolean', searchInVersions:'boolean' }},
    'de.elo.ix.client.FindConfigFileInfo': { members : { clazz:'java.lang.String', names:'java.lang.String[]', inclDeputy:'boolean', postboxUserId:'java.lang.String' }},
    'de.elo.ix.client.FindChildren': { members : { clazz:'java.lang.String', mainParent:'boolean', parentId:'java.lang.String', endLevel:'int' }},
    'de.elo.ix.client.FindByVersion': { members : { clazz:'java.lang.String', versionComment:'java.lang.String', versionMD5:'java.lang.String', versionNumber:'java.lang.String', workVersionOnly:'boolean' }},
    'de.elo.ix.client.FindByType': { members : { clazz:'java.lang.String', typeDocuments:'boolean', typeExtensions:'java.lang.String[]', typeIDs:'int[]', typeNames:'java.lang.String[]', typeStructures:'boolean' }},
    'de.elo.ix.client.FindBySordHist': { members : { clazz:'java.lang.String', histKeys:'de.elo.ix.client.SordHistKey[]' }},
    'de.elo.ix.client.FindByRegisteredFunction': { members : { clazz:'java.lang.String', functionName:'java.lang.String', args:'de.elo.ix.client.Any' }},
    'de.elo.ix.client.FindByPreviewCtrl': { members : { clazz:'java.lang.String', previewAvailable:'boolean', previewError:'boolean', fileExtensions:'java.lang.String[]' }},
    'de.elo.ix.client.FindByNotes': { members : { clazz:'java.lang.String', term:'java.lang.String', type:'int' }},
    'de.elo.ix.client.FindByIndex': { members : { clazz:'java.lang.String', delDateIso:'java.lang.String', desc:'java.lang.String', iDateIso:'java.lang.String', maskId:'java.lang.String', name:'java.lang.String', exactName:'boolean', objKeys:'de.elo.ix.client.ObjKey[]', ownerId:'java.lang.String', xDateIso:'java.lang.String', acl:'java.lang.String', pathId:'java.lang.String' }},
    'de.elo.ix.client.FindByFulltextResultItem': { members : { clazz:'java.lang.String', relevance:'int', summaryFulltext:'java.lang.String', summaryDesc:'java.lang.String', fieldNames:'java.lang.String[]', sord:'de.elo.ix.client.Sord' }},
    'de.elo.ix.client.FindByFulltextCtrlResultItem': { members : { clazz:'java.lang.String', sord:'de.elo.ix.client.Sord', TStamp:'java.lang.String', note:'de.elo.ix.client.Note' }},
    'de.elo.ix.client.FindByFulltextCtrl': { members : { clazz:'java.lang.String', startTStamp:'java.lang.String', endTStamp:'java.lang.String' }},
    'de.elo.ix.client.FindByFulltext': { members : { clazz:'java.lang.String', term:'java.lang.String' }},
    'de.elo.ix.client.FindByAcl': { members : { clazz:'java.lang.String', distinctAcl:'boolean', acls:'java.lang.String[]' }},
    'de.elo.ix.client.FindAlertInfo': { members : { clazz:'java.lang.String', sourceId:'java.lang.String', destId:'java.lang.String', inclAll:'boolean', inclAlam:'boolean', inclReminder:'boolean', inclInTray:'boolean', inclWorkFlow:'boolean', inclOthers:'boolean', inclSubs:'boolean', objId:'java.lang.String', timeIso:'java.lang.String' }},
    'de.elo.ix.client.FindActivityProjectsInfo': { members : { clazz:'java.lang.String', projectName:'java.lang.String' }},
    'de.elo.ix.client.FindActivityInfo': { members : { clazz:'java.lang.String', objId:'java.lang.String', senderId:'java.lang.String', receiverId:'java.lang.String', senderOrReceiver:'boolean', inclGroup:'boolean', inclDeputy:'boolean' }},
    'de.elo.ix.client.FileData': { members : { clazz:'java.lang.String', contentType:'java.lang.String', data:'byte[]' }},
    'de.elo.ix.client.ExecuteScriptResult': { members : { clazz:'java.lang.String', returnedString:'java.lang.String', errorMessage:'java.lang.String', errorLine:'int', errorColumn:'int' }},
    'de.elo.ix.client.ExecuteScriptParams': { members : { clazz:'java.lang.String', scriptEngine:'java.lang.String', scriptCode:'de.elo.ix.client.FileData', scriptString:'java.lang.String', scriptObjId:'java.lang.String', functionName:'java.lang.String', functionParams:'java.lang.String[]' }},
    'de.elo.ix.client.EventListener': { members : { clazz:'java.lang.String', filters:'de.elo.ix.client.EventFilter[]' }},
    'de.elo.ix.client.EventFilter': { members : { clazz:'java.lang.String', busId:'long', type:'long', param1:'long', param2:'java.lang.String' }},
    'de.elo.ix.client.EventBusParams': { members : { clazz:'java.lang.String', ticket:'java.lang.String', userId:'java.lang.String', channelId:'java.lang.String' }},
    'de.elo.ix.client.Event': { members : { clazz:'java.lang.String', busId:'long', type:'long', param1:'long', param2:'java.lang.String', id:'long', senderId:'long', data:'byte[]', any:'de.elo.ix.client.Any', acl:'java.lang.String' }},
    'de.elo.ix.client.EloIxOpt_old': { members : { clazz:'java.lang.String', optNo:'int', optVal:'java.lang.String', remark:'java.lang.String' }},
    'de.elo.ix.client.EloIxOpt': { members : { clazz:'java.lang.String', name:'java.lang.String', ixId:'java.lang.String', value:'java.lang.String' }},
    'de.elo.ix.client.EloFtStop': { members : { clazz:'java.lang.String', stopword:'java.lang.String' }},
    'de.elo.ix.client.EloFtOpt': { members : { clazz:'java.lang.String', id:'int', value:'java.lang.String', remark:'java.lang.String' }},
    'de.elo.ix.client.EloDmOpt': { members : { clazz:'java.lang.String', id:'int', value:'java.lang.String', remark:'java.lang.String' }},
    'de.elo.ix.client.EditInfoZ': { members : { clazz:'java.lang.String', _bs:'long', sordZ:'de.elo.ix.client.SordZ' }},
    'de.elo.ix.client.EditInfoEswOptions': { members : { clazz:'java.lang.String', reserved:'int' }},
    'de.elo.ix.client.EditInfo': { members : { clazz:'java.lang.String', docTemplates:'de.elo.ix.client.IdName[]', document:'de.elo.ix.client.Document', keywords:'de.elo.ix.client.Keyword[]', markerNames:'de.elo.ix.client.IdName[]', mask:'de.elo.ix.client.DocMask', maskNames:'de.elo.ix.client.MaskName[]', notes:'de.elo.ix.client.Note[]', pathNames:'de.elo.ix.client.IdName[]', replNames:'de.elo.ix.client.IdName[]', sord:'de.elo.ix.client.Sord', sordTypes:'de.elo.ix.client.SordType[]' }},
    'de.elo.ix.client.DocVersion': { members : { clazz:'java.lang.String', accessDateIso:'java.lang.String', comment:'java.lang.String', createDateIso:'java.lang.String', deleted:'boolean', ext:'java.lang.String', contentType:'java.lang.String', fileData:'de.elo.ix.client.FileData', guid:'java.lang.String', id:'int', md5:'java.lang.String', milestone:'boolean', ownerId:'int', ownerName:'java.lang.String', pathId:'int', pathId2:'int', physPath:'java.lang.String', previewUrl:'java.lang.String', sig:'de.elo.ix.client.DocVersion', preview:'de.elo.ix.client.DocVersion', size:'long', tStamp:'java.lang.String', updateDateIso:'java.lang.String', uploadResult:'java.lang.String', url:'java.lang.String', version:'java.lang.String', workVersion:'boolean', encryptionSet:'int', fulltextContent:'de.elo.ix.client.DocVersion' }},
    'de.elo.ix.client.Document': { members : { clazz:'java.lang.String', atts:'de.elo.ix.client.DocVersion[]', docs:'de.elo.ix.client.DocVersion[]', objId:'java.lang.String' }},
    'de.elo.ix.client.DocMaskZ': { members : { clazz:'java.lang.String', _bs:'long' }},
    'de.elo.ix.client.DocMaskLine': { members : { clazz:'java.lang.String', comment:'java.lang.String', id:'int', key:'java.lang.String', maskId:'int', max:'int', min:'int', name:'java.lang.String', aclItems:'de.elo.ix.client.AclItem[]', canEdit:'boolean', editCol:'int', editRow:'int', editWidth:'int', hidden:'boolean', labelCol:'int', labelRow:'int', nextTab:'boolean', onlyBuzzwords:'boolean', postfixAsterix:'boolean', prefixAsterix:'boolean', readOnly:'boolean', tabOrder:'int', type:'int', externalData:'java.lang.String', important:'boolean', version:'boolean', translate:'boolean', acl:'java.lang.String', access:'int', disableWordWheel:'boolean', defaultValue:'java.lang.String' }},
    'de.elo.ix.client.DocMaskDetails': { members : { clazz:'java.lang.String', archivingMode:'int', encryptionSet:'int', fulltext:'boolean', sortOrder:'int', documentMask:'boolean', searchMask:'boolean', folderMask:'boolean', createIndexPath:'boolean', createIndexReferencesPaths:'boolean' }},
    'de.elo.ix.client.DocMask': { members : { clazz:'java.lang.String', DAcl:'java.lang.String', DKind:'int', DPath:'int', TStamp:'java.lang.String', barcode:'java.lang.String', flowId:'int', id:'int', index:'java.lang.String', lifetime:'java.lang.String', lockId:'int', lockName:'java.lang.String', name:'java.lang.String', text:'java.lang.String', acl:'java.lang.String', aclItems:'de.elo.ix.client.AclItem[]', details:'de.elo.ix.client.DocMaskDetails', docAclItems:'de.elo.ix.client.AclItem[]', lines:'de.elo.ix.client.DocMaskLine[]', guid:'java.lang.String', deleted:'boolean', flowId2:'int' }},
    'de.elo.ix.client.DocInfoDM': { members : { clazz:'java.lang.String', id:'int', guid:'java.lang.String', size:'int', md5:'java.lang.String', pathId:'int', pathId2:'int', createDateIso:'java.lang.String', lastAccessIso:'java.lang.String', lastUpdateIso:'java.lang.String', owner:'int', ext:'java.lang.String', fclip:'java.lang.String', extOrig:'java.lang.String', sizeOrig:'int', encrSet:'int', previewSize:'int', previewExt:'java.lang.String', fulltextContentTStamp:'java.lang.String', fulltextContentSize:'int' }},
    'de.elo.ix.client.DocHistory': { members : { clazz:'java.lang.String', objId:'int', docId:'int', user:'int', createDate:'int', comment:'java.lang.String', version:'java.lang.String', docMD5:'java.lang.String', guid:'java.lang.String', tStamp:'java.lang.String', sigId:'int', status:'int', flags:'int' }},
    'de.elo.ix.client.DeleteOptions': { members : { clazz:'java.lang.String', deleteFinally:'boolean', maxIDate:'java.lang.String', deleteExpiredOnly:'boolean', maxTStamp:'java.lang.String', deleteDocumentVersionsOnly:'boolean', deleteResidueFree:'boolean', folderMustBeEmpty:'boolean' }},
    'de.elo.ix.client.DeleteActivityOptions': { members : { clazz:'java.lang.String', deleteFinally:'boolean' }},
    'de.elo.ix.client.CryptInfo': { members : { clazz:'java.lang.String', id:'int', name:'java.lang.String', pwd:'java.lang.String', keyInfo:'java.lang.String' }},
    'de.elo.ix.client.CountResult': { members : { clazz:'java.lang.String', docCount:'int', structCount:'int', docAttachCount:'int', docVersionsCount:'int', otherAttachVersionsCount:'int', docBytesCount:'long', otherDocVersBytesCount:'long', attBytesCount:'long', otherAttVersBytesCount:'long' }},
    'de.elo.ix.client.CounterInfo': { members : { clazz:'java.lang.String', name:'java.lang.String', value:'int' }},
    'de.elo.ix.client.CopySordZ': { members : { clazz:'java.lang.String', _bs:'long' }},
    'de.elo.ix.client.CopyOptions': { members : { clazz:'java.lang.String', targetName:'java.lang.String', newParentId:'int', copyOnlyBaseElement:'boolean', copyStructuresAndDocuments:'boolean', keepOriginalOwner:'boolean', keepCurrentNotes:'boolean', keepReferences:'boolean' }},
    'de.elo.ix.client.CopyInfo': { members : { clazz:'java.lang.String', depth:'int', manSortIdx:'int', name:'java.lang.String', adjustAclDifference:'boolean', adjustAclOverwrite:'boolean', adjustAclIgnoreFolders:'boolean', adjustAclIgnoreDocuments:'boolean', adjustAclInBackground:'boolean' }},
    'de.elo.ix.client.ContextTerm': { members : { clazz:'java.lang.String', term:'java.lang.String', docNum:'int' }},
    'de.elo.ix.client.ConfigFileZ': { members : { clazz:'java.lang.String', _bs:'long' }},
    'de.elo.ix.client.ConfigFile': { members : { clazz:'java.lang.String', dir:'java.lang.String', fileData:'de.elo.ix.client.FileData', isDirectory:'boolean', lastModifiedISO:'java.lang.String', name:'java.lang.String', size:'long', uploadResult:'java.lang.String', url:'java.lang.String' }},
    'de.elo.ix.client.CombineAclResult': { members : { clazz:'java.lang.String', compareCode:'int', compareIgnoreAccessCode:'int', intersection:'de.elo.ix.client.AclItem[]', intersectionAclStr:'java.lang.String', sum:'de.elo.ix.client.AclItem[]', sumAclStr:'java.lang.String', difference:'de.elo.ix.client.AclItem[]', differenceAclStr:'java.lang.String', inverseDifference:'de.elo.ix.client.AclItem[]', inverseDifferenceAclStr:'java.lang.String' }},
    'de.elo.ix.client.CombineAclOptions': { members : { clazz:'java.lang.String', lhsAclStr:'java.lang.String', rhsAclStr:'java.lang.String' }},
    'de.elo.ix.client.ColorData': { members : { clazz:'java.lang.String', RGB:'int', id:'int', name:'java.lang.String', guid:'java.lang.String', TStamp:'java.lang.String', deleted:'boolean' }},
    'de.elo.ix.client.ClientInfo': { members : { clazz:'java.lang.String', callId:'java.lang.String', country:'java.lang.String', language:'java.lang.String', ticket:'java.lang.String', timeZone:'java.lang.String', options:'int' }},
    'de.elo.ix.client.CheckoutUsersZ': { members : { clazz:'java.lang.String', _bs:'long' }},
    'de.elo.ix.client.CheckinUsersZ': { members : { clazz:'java.lang.String', _bs:'long' }},
    'de.elo.ix.client.Bitset': { members : { clazz:'java.lang.String', v:'long' }},
    'de.elo.ix.client.BackupProfile': { members : { clazz:'java.lang.String', name:'java.lang.String', pathId:'int', slot:'int', writeKeywording:'boolean', sqlDocSelect:'java.lang.String', nbOfDocsPerLoop:'int', retention:'int' }},
    'de.elo.ix.client.ArcPath': { members : { clazz:'java.lang.String', path:'de.elo.ix.client.IdName[]', pathAsString:'java.lang.String' }},
    'de.elo.ix.client.ArchiveStatistics': { members : { clazz:'java.lang.String', maxDocId:'int', maxObjId:'int' }},
    'de.elo.ix.client.Any': { members : { clazz:'java.lang.String', type:'int', booleanValue:'boolean', intValue:'int', longValue:'long', doubleValue:'double', stringValue:'java.lang.String', objectValue:'de.elo.ix.client.ValueClass', byteArray:'byte[]', anyArray:'de.elo.ix.client.Any[]' }},
    'de.elo.ix.client.Alert': { members : { clazz:'java.lang.String', dest:'int', destName:'java.lang.String', source:'int', sourceName:'java.lang.String', type:'int', objId:'int', extra1:'int', extra2:'int', memo:'java.lang.String', time:'int', timeIso:'java.lang.String' }},
    'de.elo.ix.client.ActivityZ': { members : { clazz:'java.lang.String', _bs:'long' }},
    'de.elo.ix.client.ActivityProject': { members : { clazz:'java.lang.String', project:'java.lang.String', major:'int', minor:'int', optValue:'java.lang.String', options:'de.elo.ix.client.ActivityOption[]', protectedProject:'boolean', lockedWhenFinished:'boolean' }},
    'de.elo.ix.client.ActivityOption': { members : { clazz:'java.lang.String', id:'int', name:'java.lang.String', onlyKeyword:'boolean', readOnly:'boolean', sorted:'boolean', stamp:'boolean', mandatory:'boolean', keywords:'java.lang.String[]' }},
    'de.elo.ix.client.Activity': { members : { clazz:'java.lang.String', TStamp:'java.lang.String', backAt:'java.lang.String', backMode:'java.lang.String', comment:'java.lang.String', destination:'java.lang.String', dueDateIso:'java.lang.String', fileName:'java.lang.String', guid:'java.lang.String', name:'java.lang.String', objGuid:'java.lang.String', prio:'int', project:'java.lang.String', receiverId:'int', revVers:'java.lang.String', senderId:'int', sentAtIso:'java.lang.String', sentMode:'java.lang.String', ud0:'java.lang.String', ud1:'java.lang.String', ud2:'java.lang.String', ud3:'java.lang.String', ud4:'java.lang.String', ud5:'java.lang.String', ud6:'java.lang.String', ud7:'java.lang.String', ud8:'java.lang.String', ud9:'java.lang.String', receiverName:'java.lang.String', senderName:'java.lang.String', transId:'java.lang.String' }},
    'de.elo.ix.client.AclItem': { members : { clazz:'java.lang.String', access:'int', id:'int', name:'java.lang.String', type:'int', andGroups:'de.elo.ix.client.IdName[]' }}
  };

  return table;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////
//
// IXConnection
//
///////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * <p>
 * This class provides the IndexServer interface with a relogin mechanism 
 * in each of the interface functions and supersedes the IXClient class. 
 * An object of this class represents one IndexServer session which is 
 * managed by an IXConnLogin object.
 * </p><p>
 * This class is similar to the IXClient class but does not extend the ticket
 * lifetime of the sessions. If the ticket becomes invalid, the IXConnLogin object
 * performs a relogin. 
 * </p><p>
 * To obtain this relogin mechanism in each of the IndexServer interface functions, 
 * the wrapper class IXConnIXServicePortIF is used. It implements each of the 
 * IndexServer functions again without a ClientInfo parameter. The ClientInfo
 * is supplied by the IXConnLogin object and is updated, when the ticket becomes
 * invalid.
 * </p><p>
 * Instances of this class are usually created by an IXConnFactory object.
 * </p><p>
 * Example:
 * <code>Properties props = IXConnFactory.createConnProps(tp.url, 2, 10 * 60);</code>
 * <code>Properties sessOpts = IXConnFactory.createSessionOptions("MyApp", "1.0", "");</code>
 * <code>connFact = new IXConnFactory(props, sessOpts);</code>
 * <code>IXServicePortC CONST = connFact.getCONST();</code>
 * <code>IXConnection ixConn = connFact.create("Fritz", "geheim", "MYPC", null);</code>
 * <code>EditInfo ed = ixConn.ix.checkoutDoc(docId, null, EditInfoC.mbSordDoc, LockC.NO);</code>
 * <code>...</code>
 * <code>ixConn.logout();</code>
 */
de.elo.ix.client.IXConnection = function(ix1, ixsl1, connProps1) {
	
	/**
	 * IXConnServicePortIF
	 */
	var _ixVal = ix1;
	
	/**
	* Internally used IXConnLogin object which holds a session and performs 
	* relogin.
	*/
	var _ixsl = ixsl1;
	
	/**
	 * Connection properties. This properties are the same that have beed
	 * supplied to the IXConnFactory object. 
	 */
	var connProps = connProps1;
	  
	/**
	 * Database engine name.
	 */
	var _databaseEngine = null;
	  
	/**
	 * Name-value-pairs from the Indexserver status page.
	 */
	var _statusPageProperties = null;
	
	/**
	 * Indexserver API _CONSTANTS
	 */
	var _CONSTANTS  = null;

	/**
	* EventBusApi object.
	*/
	var _eventBusApi = null;

	/**
	* Get IndexServer interface object (IXConnIXServicePortIF)
	*/	
	this.ix = function() {
		_ixsl.callAliveForOldTicket();
		return _ixVal;
	};
	
	/**
	 * Get IXConnLogin object
	 */
	this.getLogin = function() {
		return _ixsl;
	};
	
	/**
	 * Get LoginResult
	 */
	this.getLoginResult = function() {
		return _ixsl.lr();
	};

	/**
	 * Get user ID
	 */
	this.getUserId = function() {
		return _ixsl.lr().user.id;
	};
	
	/**
	 * Get user name
	 */
	this.getUserName = function() {
		return _ixsl.lr().user.name;
	};
	
	/**
	 * Get connection properties
	 */
	this.getConnProperties = function() {
		return connProps;
	};
	
	/**
	 * Get Indexserver URL
	 */
	this.getEndpointUrl = function() {
		return _ixsl.ix().url;
	};
	
	/**
	 * Get session options
	 */
	this.getSessionOptions = function() {
		return _ixsl.getSessionOptions();
	};
	
	/**
	 * Private function. 
	 * Used to read the Indexserver status page.
	 */
	this.getStatusPageProperties = function() {
        if (!_statusPageProperties) {
            var url = this.getEndpointUrl() + '?cmd=status&mode=text';
        	var responseText = de.elo.ix.client.sendReceiveSync(url, "GET", "");
            _statusPageProperties = {};
            var lines = responseText.split("\n");
            for (var i=0; i<lines.length; i++) {
            	var line = lines[i];
            	var p = line.indexOf('=');
            	var name = line;
            	var value = "";
            	if (p >= 0) {
            		name = line.substring(0, p);
            		value = line.substring(p+1);
            	}
                _statusPageProperties[name] = value;
            }
		}
		return _statusPageProperties;
	};
	
	/**
	 * Refreshes the internal cache of status page properties.
	 * @return Status page properties as associative array.
	 */
	this.reloadStatusPageProperties = function() {
		_statusPageProperties = null;
		return this.getStatusPageProperties();
	};
	
	/**
	 * Returns the error messages from the status page.
	 */
	this.getStatusPageErrors = function() {
		var props = this.getStatusPageProperties();
		var errs = [];
		for (var key in props) {
			if (key.indexOf("ERROR.") == 0) {
				var val = props[key];
				errs.push(val);
			}
		}
		return errs;
	};
	
	/**
	 * Get the Indexserver version and build number.
	 */
	this.getImplVersion = function() {
		var props = this.getStatusPageProperties();
		return props["Version"] + "." + props["Build"];
	};
	
	/**
	 * Get the Indexserver version number.
	 */
	this.getVersion = function() {
		var props = this.getStatusPageProperties();
		return props["Version"];
	};
	
	/**
	 * Get the Indexserver stream version number.
	 */
	this.getStreamVersion = function() {
		var props = this.getStatusPageProperties();
		return props["StreamVersion"];
	};
	
	/**
	 * Get object with Indexserver API CONSTANTS.
	 */
	this.getCONST = function() {
		if (!_CONSTANTS) {
			_CONSTANTS = _ixVal.getConstants();
		}
		return _CONSTANTS;
	};
	
	/**
	 * Convert ISO date into JavaScript Date object
	 */
	this.isoToDate = function(iso) {
		if (!iso) return null;
		var dt = new Date();
		iso = iso.replace(".", "").replace("-", "").replace(" ","");
		if (iso.length >= 4) dt.setUTCFullYear(iso.substr(0, 4));
		if (iso.length >= 6) dt.setUTCMonth(iso.substr(4, 2));
		if (iso.length >= 8) dt.setUTCDate(iso.substr(6, 2));
		if (iso.length >= 10) dt.setUTCHours(iso.substr(8, 2));
		if (iso.length >= 12) dt.setUTCMinutes(iso.substr(10, 2));
		if (iso.length >= 14) dt.setUTCSeconds(iso.substr(12, 2));
		if (iso.length > 14) dt.setUTCMilliseconds(iso.substr(14));
		return dt;
	};
	
	/**
	 * Convert a JavaScript Date object to ISO.
	 */
	this.dateToIso = function(date) {
		if (!date) return null;
		function pad(n) {  return n < 10 ? '0'+n : n; };
	    return date.getUTCFullYear()+'-'
		    + pad(date.getUTCMonth()+1)+'-'
		    + pad(date.getUTCDate())+'T'
		    + pad(date.getUTCHours())+':'
		    + pad(date.getUTCMinutes())+':'
		    + pad(date.getUTCSeconds())+'Z';
	};
	
	/**
	 * Logout.
	 */
	this.logout = function() {
		try {
		    if (_eventBusApi) {
		        _eventBusApi.done();
		        _eventBusApi = null;
		    }
		    this.ix().logout();
		}
		catch (ignored) {}
	};
	
	/**
	 * Get the database engine: MSSQL, ORACLE, DB2.
	 */
	this.getDatabaseEngine = function() {
		if (!_databaseEngine) {
			try {
				_databaseEngine = ix().getServerInfo().databaseEngine; 
			} catch (ignored) {}
		}
		return _databaseEngine;
	};
	
	/**
	 * Encrytps a password used to login or to supply an encryption set password.
	 * @param s Plain text password.
	 * @return Encrypted password.
	 */
	this.encryptPassword = function(s) {
		return _ixsl.encryptPassword(s);
	};

	/**
	 * This function builds an URL to upload a file by HTML or AJAX.
	 * When Indexserver has received all file data, it calls the event IXServerEvents.onFileUploadBuildResponse.
	 * Implement this event to build a response according to the file upload solution. 
	 * The response must supply the "uploadResult" generated in the Indexserver. 
	 * It has to be assigned to the uploadResult member of the DocVersion object in order to call checkinDocEnd.      
	 */
	this.makeUploadUrl = function(additionalParams) {
		var url = this.getEndpointUrl();
		url += "?cmd=writedoc&mode=vdef&retjson=true";
		if (additionalParams) {
			if (additionalParams.length && additionalParams.charAt(0) != '&') {
				url += "&";
			}
			url += additionalParams;
		}
		return url;
	};

    this.getEventBusApi = function () {
        if (!this._eventBusApi) {
            this._eventBusApi = new de.elo.ix.client.EventBusApi(this);
        }
        return this._eventBusApi;
    };
};

///////////////////////////////////////////////////////////////////////////////////////////////////////
//
// IXConnFactory
//
///////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * <p>
 * This class is used to create IXConnection objects that represent sessions
 * to IndexServer. Use one of the create methods to instanciate an IXConnection 
 * object.
 * </p><p>
 * The connection to the IndexServer is internally hold by an IXClient object. 
 * Its initial parameters are supplied by a Properties collection given in the
 * constructor of IXConnFactory. A reference to the IXClient object is passed
 * to each IXConnection object created by one of the create functions. 
 * </p>
 */
de.elo.ix.client.IXConnFactory = function(url, appName, appVersion) {
	
	this.url = url;
	this.computerName = "";
	
	/**
	 * Creates a ClientInfo object and assigns the language, country and timezone
	 * from the default values of the Java VM.
	 * @return ClientInfo object.
	 */
	this.makeDefaultClientInfo = function() {
		var ci = new de.elo.ix.client.ClientInfo();
		ci.timeZone = "UTC";
		if (navigator && navigator.language) {
			ci.language = navigator.language;
		}
		return ci;
	};

	// Initialize connection properties
	this.PROP_URL = "connection.url";
	this.PROP_TIMEOUT_SECONDS = "connection.timeoutSeconds";
	this.connProps = {};
	this.connProps[this.PROP_URL] = url;
	this.connProps[this.PROP_TIMEOUT_SECONDS] = 600;;
	
	// Initialize session options
	this.CLIENT_APP_NAME = "clientApp.name";
	this.CLIENT_APP_VERSION = "clientApp.version";
	this.CLIENT_APP_TYPE = "clientApp.type";
	this.TYPE_PARTNER_APPLICATION = "TDBD";
	this.IX_URL_BASE = "ix.ixUrlBase";
	this.DOC_URL_BASE = "ix.documentUrlBase";
	this.sessOpts = {};
	this.sessOpts[this.CLIENT_APP_NAME] = appName || "IXJSON-Application";
	this.sessOpts[this.CLIENT_APP_VERSION] = appVersion || "1.0";
	this.sessOpts[this.CLIENT_APP_TYPE] = this.TYPE_PARTNER_APPLICATION;
	this.sessOpts[this.IX_URL_BASE] = url; 
	this.sessOpts[this.DOC_URL_BASE] = url; 
};

/**
 * This class wraps callback functions for asynchronous procession of requests.
 * @param handleSuccess Optional. A function that is called when the response is available and neither an error nor an exception has occured. 
 * 						function(retVal) {}, retval is the returned Indexserver API object.
 * @param handleException Optional. A function that is called when the response is not available but an error or exception has occured.
 * 						function(exVal) {}, exVal is the exception message (String).
 */
de.elo.ix.client.AsyncCallback = function(handleSuccess, handleException) {
	this.handleSuccess = handleSuccess;
	this.handleException = handleException;
};

/**
 * Create a session with the given credentials.
 * @param userName User name
 * @param userPwd User password
 * @param computerName Computer name
 * @param runAs Reserved
 * @param reloginCallback An optional de.elo.ix.client.AsyncCallback object. 
 * When a relogin is performed and succeeds, the reloginCallback.handleSuccess 
 * is called with the de.elo.ix.client.LoginResult. If the relogin fails, the 
 * reloginCallback.handleException is called.
 */
de.elo.ix.client.IXConnFactory.prototype.create = function(userName, userPwd, computerName, runAs, reloginCallback) {
	
	var serviceInterface = new de.elo.ix.client.IXServicePortIF(this.url);
	
	var ci = this.makeDefaultClientInfo();
	
	var ixsl = new de.elo.ix.client._IXConnLoginImpl(serviceInterface, ci, userName, userPwd, computerName, null, null, this.sessOpts, null, reloginCallback);
	ixsl.reloginOrThrow(0, null);
	
	var ix = new de.elo.ix.client.IXConnIXServicePortIF(ixsl);
	
	var conn = new de.elo.ix.client.IXConnection(ix, ixsl, this.connProps);
	
	return conn;
};

/**
 * Create a session that uses the existing ticket in ci.ticket.
 * This session cannot perform an automatic relogin since it does not have the credentials.
 * @param ci Either ClientInfo object with ticket or the ticket itself.
 * @param reloginCallback An optional de.elo.ix.client.AsyncCallback object. 
 * When a relogin is performed and succeeds, the reloginCallback.handleSuccess 
 * is called with the de.elo.ix.client.LoginResult. If the relogin fails, the 
 * reloginCallback.handleException is called.
 */
de.elo.ix.client.IXConnFactory.prototype.createFromTicket = function(ci, reloginCallback) {
	
	var serviceInterface = new de.elo.ix.client.IXServicePortIF(this.url);
	
	var ci1 = this.makeDefaultClientInfo();
	if (ci.clazz && ci.clazz == "de.elo.ix.client.ClientInfo") {
		if (ci.language) ci1.language = ci.language;
		if (ci.timeZone) ci1.timeZone = ci.timeZone;
		if (ci.country) ci1.country = ci.country;
		if (ci.ticket) ci1.ticket = ci.ticket;
	}
	else {
		ci1.ticket = ci;
	}
	
	var ixsl = new de.elo.ix.client._IXConnLoginSessionFromAM(serviceInterface, ci1, this.sessOpts, null, reloginCallback);
	ixsl.reloginOrThrow(0, null);

	var ix = new de.elo.ix.client.IXConnIXServicePortIF(ixsl);
	
	var conn = new de.elo.ix.client.IXConnection(ix, ixsl, this.connProps);

	return conn;
};

/**
 * Create a session that uses the existing ticket in ci.ticket.
 * This session cannot perform an automatic relogin since it does not have the credentials.
 * @param reloginCallback An optional de.elo.ix.client.AsyncCallback object. 
 * When a relogin is performed and succeeds, the reloginCallback.handleSuccess 
 * is called with the de.elo.ix.client.LoginResult. If the relogin fails, the 
 * reloginCallback.handleException is called.
 */
de.elo.ix.client.IXConnFactory.prototype.createSSO = function(reloginCallback) {
	
	var serviceInterface = new de.elo.ix.client.IXServicePortIF(this.url);
	
	var ci = this.makeDefaultClientInfo();
	
	var ixsl = new de.elo.ix.client._IXConnLoginSSO(serviceInterface, ci, this.sessOpts, null, reloginCallback);
	ixsl.reloginOrThrow(0, null);

	var ix = new de.elo.ix.client.IXConnIXServicePortIF(ixsl);
	
	var conn = new de.elo.ix.client.IXConnection(ix, ixsl, this.connProps);

	return conn;
};


///////////////////////////////////////////////////////////////////////////////////////////////////////
//
// _IXConnLogin
//
///////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * This private class manages automatic re-logins.
 */
de.elo.ix.client._IXConnLogin = function(ix1, ci1, sessOpts1, encrPasswords1, reloginCallback1) {
	
	// private members
	this._ix = ix1;
	this._sessOpts = sessOpts1 || {};
	this._encrPasswords = encrPasswords1 || {};
	this._reloginCallback = reloginCallback1;
	this._lr = new de.elo.ix.client.LoginResult();
	this._lr.clientInfo = ci1;
	this._callId = 0;
	this._ticketBestBefore = 0;
	this._DEFAULT_LOOP_MAX = 5;
	this._RELOGIN_ERRORS = [
		  "[ELOIX:2001]", // session expired
		  "[ELOIX:2002]", // temporary problem (DB connection unavail)
		  "[ELOIX:3001]"  // AM connection problem
		];
	
};

/**
 * Return current ClientInfo object.
 */
de.elo.ix.client._IXConnLogin.prototype.ci = function() {
	var c = this._lr.clientInfo;
	if (!c) { this._lr.clientInfo = c = new de.elo.ix.client.ClientInfo(); }
    c.callId = "JSON-" + (++this._callId);
    return c;
};

/**
 * Return the current LoginResult object.
 * @return
 */
de.elo.ix.client._IXConnLogin.prototype.lr = function() {
  return this._lr;
};

/**
 * Get IndexServer interface.
 * @return
 */
de.elo.ix.client._IXConnLogin.prototype.ix = function() {
	return this._ix;
};

/**
 * Extend ticket lifetime, if 80% is over.
 */
de.elo.ix.client._IXConnLogin.prototype.callAliveForOldTicket = function() {
	var ms = new Date().getTime();
	if (ms >= this._ticketBestBefore) {
	    try {
	    	
	    	var msg = new de.elo.ix.client.JsonMethodIXServicePortIFAlive(this.ci());
	    	this._ix.send(msg);
	    	
	    	this._ticketBestBefore = ms + (this._lr.ticketLifetime * 800);
	    	
	    } catch (ignored) {}
	};
};

/**
 * Get session options.
 */
de.elo.ix.client._IXConnLogin.prototype.getSessionOptions = function() {
	return this._sessOpts;
};

/**
 * Get encrpytion passwords
 */
de.elo.ix.client._IXConnLogin.prototype.getEncrPasswords = function() {
	return this._encrPasswords;
};

/**
 * Returns true, if the specified error is a session timeout error.
 * @param e
 * @return
 */
de.elo.ix.client._IXConnLogin.prototype.isReloginError = function(e) {
	if (!e) return true;
	var msg = e.toString();
	for ( var i = 0; i < this._RELOGIN_ERRORS.length; i++) {
		if (msg.indexOf(this._RELOGIN_ERRORS[i]) >= 0)
			return true;
	}
	return false;
};

/**
 * Checks wether the given error is a session timeout. In this case the
 * login function is called. Otherwise the exeption is thrown.
 * 
 * @param loopCount
 * @param e
 * @return
 * @throws RemoteException
 */
de.elo.ix.client._IXConnLogin.prototype.reloginOrThrow = function(loopCount, e) {

	var me = this;
	
	if (loopCount >= this._DEFAULT_LOOP_MAX) throw e;
	if (!this.isReloginError(e)) throw e;
    
	try {
		me._lr = me.login();
		
		me._ticketBestBefore = new Date().getTime() + (me._lr.ticketLifetime * 800);
		  
		var opts = me.makeSessOptsObj();
		var msg = new de.elo.ix.client.JsonMethodIXServicePortIFSetSessionOptions(me.ci(), opts);
		me._ix.send(msg);
		  
		for (var cryptId in me._encrPasswords ) {
		    var pwd = me._encrPasswords[cryptId];
		    var pwdEncr = me.encryptPassword(pwd);
		    
		    var msg = new de.elo.ix.client.JsonMethodIXServicePortIFProvideCryptPassword(me.ci(), cryptId, pwdEncr);
		    me._ix.send(msg);
		}
		 
		// Notify application via callback
		if (me._reloginCallback && me._reloginCallback.handleSuccess) {
			me._reloginCallback.handleSuccess(me._lr);
		}
	}
	catch (e) {
		
		// Notify application via callback
		if (me._reloginCallback && me._reloginCallback.handleException) {
			me._reloginCallback.handleException(e);
		}
		
		// THROW
		throw e;
	}
};

/**
 * Make IndexServer API object from java.util.Properties
 */
de.elo.ix.client._IXConnLogin.prototype.makeSessOptsObj = function() {
	var opts = new de.elo.ix.client.SessionOptions();
	var kvs = opts.options = [];
	var i = 0;
	for (var k in this._sessOpts) {
		var kv = kvs[i++] = new de.elo.ix.client.KeyValue();
		kv.key = k;
		kv.value = this._sessOpts[kv.key];
	}
	return opts;
};

/**
 * Performs the login. To be implemented by subclass.
 * @throws RemoteException
 */
de.elo.ix.client._IXConnLogin.prototype.login = function() {
	throw "This function must be implemented by a subclass.";
};

/**
 * Encrypts the given password.
 * 
 * @param pwd
 * @throws RemoteException
 */
de.elo.ix.client._IXConnLogin.prototype.encryptPassword = function(pwd) {
	
	// Read public RSA key from Indexserver 
    var ci = new de.elo.ix.client.ClientInfo();
    var enc = "PUBLIC_ENCR_KEY_HEX";
    var msg = new de.elo.ix.client.JsonMethodIXServicePortIFLogin(ci, enc, "", "", "");
    var lr = this._ix.send(msg);
    var rsaKeysHex = lr.clientInfo.ticket;

    // Create an object of Tom Wu's RSA class 
    var p = rsaKeysHex.indexOf(" ");
    var mod = rsaKeysHex.substr(0, p);
    var exp = rsaKeysHex.substr(p+1); 
    var rsaKey = new RSAKey();
    rsaKey.setPublic(mod, exp);
    
    // encrypt password
    var res = rsaKey.encrypt(pwd);
    
    // encode with BASE64
    var base64 = hex2b64(res);
    
    // return encrypted password
    var epwd = "##RSA##" + base64;
    return epwd;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////
//
// _IXConnLoginImpl
//
///////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * This class implements the abstract IXConnLogin class for authentication with
 * user name and password.
 */
de.elo.ix.client._IXConnLoginImpl = function(ix, ci, userName1, userPwd1, computerName1, runAs1, reportAs1, sessOpts, encrPasswords, reloginCallback) {
	
	// call superclass constructor (_IXConnLogin)
	de.elo.ix.client._IXConnLoginImpl.superclass.constructor.call(this, ix, ci, sessOpts, encrPasswords, reloginCallback);
	
	// private members
	this._userName = userName1;
	this._userPwd = userPwd1;
	this._computerName = computerName1;
	this._runAs = runAs1;
	this._reportAs = reportAs1;
	
};
de.elo.ix.client.extend(de.elo.ix.client._IXConnLoginImpl, de.elo.ix.client._IXConnLogin);

de.elo.ix.client._IXConnLoginImpl.prototype.login = function() {
	var pwdEncr = this.encryptPassword(this._userPwd);
	var ci = this.ci();
	var msg;
	if (this._reportAs != null && this._reportAs.length != 0) {
		msg = new de.elo.ix.client.JsonMethodIXServicePortIFLogin(ci, this._userName, pwdEncr, this._computerName, this._reportAs);
	}
	else {
		msg = new de.elo.ix.client.JsonMethodIXServicePortIFLogin(ci, this._userName, pwdEncr, this._computerName, this._runAs);
	}

	var loginResult = this._ix.send(msg);
	return loginResult;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////
//
// _IXConnLoginSessionFromAM
//
///////////////////////////////////////////////////////////////////////////////////////////////////////

de.elo.ix.client._IXConnLoginSessionFromAM = function(ix, ci, sessOpts, encrPasswords, reloginCallback) {
	
	// call superclass constructor (_IXConnLogin)
	de.elo.ix.client._IXConnLoginSessionFromAM.superclass.constructor.call(this, ix, ci, sessOpts, encrPasswords, reloginCallback);
	
};
de.elo.ix.client.extend(de.elo.ix.client._IXConnLoginSessionFromAM, de.elo.ix.client._IXConnLogin);

de.elo.ix.client._IXConnLoginSessionFromAM.prototype.login = function() {
	
	// SessionOptionsC.SESSION_FROM_AM_ADD
	var SESSION_FROM_AM_ADD = 3;
	
	var msg = new de.elo.ix.client.JsonMethodIXServicePortIFGetSessionFromTicket(this.ci(), SESSION_FROM_AM_ADD);
	return  this._ix.send(msg);
};

///////////////////////////////////////////////////////////////////////////////////////////////////////
//
// _IXConnLoginSSO
//
///////////////////////////////////////////////////////////////////////////////////////////////////////

de.elo.ix.client._IXConnLoginSSO = function(ix, ci, sessOpts, encrPasswords, reloginCallback) {
	
	// call superclass constructor (_IXConnLogin)
	de.elo.ix.client._IXConnLoginSSO.superclass.constructor.call(this, ix, ci, sessOpts, encrPasswords, reloginCallback);
	
};
de.elo.ix.client.extend(de.elo.ix.client._IXConnLoginSSO, de.elo.ix.client._IXConnLogin);

de.elo.ix.client._IXConnLoginSSO.prototype.login = function(asyncCallback) {

	var loginUrl = this._ix.url;
	var p = loginUrl.lastIndexOf("/");
	if (p >= 0) loginUrl = loginUrl.substr(0, p);
	loginUrl += "/ixlogin/ixlogin?streamversion=8&responseformat=json";
	
	var ci = this._lr.clientInfo;
	if (ci.language) loginUrl += "&language=" + ci.language;
	if (ci.country) loginUrl += "&language=" + ci.country;
	if (ci.timeZone) loginUrl += "&timezone=" + ci.timeZone;
	
	var responseText = de.elo.ix.client.sendReceiveSync(loginUrl, "GET", "");
	
	return JSON.parse(responseText);
};

/**
 * Override checkoutSord to support both EditInfo and Sord.
 *  
 * @param objId Object-ID
 * @param sordZOrEditInfoZ Either a de.elo.ix.client.SordZ or a de.elo.ix.client.EditInfoZ.
 * @param lockZ Lock mode.
 * @param asyncCallback Optional. Object of class de.elo.ix.client.AsyncCallback.
 * @return If parameter sordZOrEditInfoZ contains a de.elo.ix.client.SordZ, the function returns a Sord object.
 * If parameter sordZOrEditInfoZ contains a de.elo.ix.client.EditInfoZ, the function returns a EditInfo object.  
 */
de.elo.ix.client.IXConnIXServicePortIF.prototype.checkoutSord = function(objId, sordZOrEditInfoZ, lockZ, asyncCallback) {
  
  var editInfoZ = sordZOrEditInfoZ;
  var isSordZ = sordZOrEditInfoZ && sordZOrEditInfoZ.clazz == 'de.elo.ix.client.SordZ';
  
  if (isSordZ) {
	editInfoZ = new de.elo.ix.client.EditInfoZ();
	editInfoZ.sordZ = sordZOrEditInfoZ;
  }
  
  var msg = new de.elo.ix.client.JsonMethodIXServicePortIFCheckoutSord(this._ixsl.ci(), objId, editInfoZ, lockZ);
  var ed = this.send(msg, asyncCallback);
  
  return isSordZ ? ed.sord : ed;
};

/**
 * Override checkoutSord to support both EditInfo and Sord.
 * 
 * @param parentId ID of parent entry.
 * @param maskId ID or name of keywording form.
 * @param sordZOrEditInfoZ Elements to be returned. Either a de.elo.ix.client.SordZ or a de.elo.ix.client.EditInfoZ.
 * @param asyncCallback Optional. Object of class de.elo.ix.client.AsyncCallback.
 * @return If parameter sordZOrEditInfoZ contains a de.elo.ix.client.SordZ, the function returns a Sord object.
 * If parameter sordZOrEditInfoZ contains a de.elo.ix.client.EditInfoZ, the function returns a EditInfo object.  
 */
de.elo.ix.client.IXConnIXServicePortIF.prototype.createSord = function(parentId, maskId, sordZOrEditInfoZ, asyncCallback) {
  var editInfoZ = sordZOrEditInfoZ;
  var isSordZ = sordZOrEditInfoZ && sordZOrEditInfoZ.clazz == 'de.elo.ix.client.SordZ';
	  
  if (isSordZ) {
    editInfoZ = new de.elo.ix.client.EditInfoZ();
    editInfoZ.sordZ = sordZOrEditInfoZ;
  }
	  
  var msg = new de.elo.ix.client.JsonMethodIXServicePortIFCreateSord(this._ixsl.ci(), parentId, maskId, editInfoZ);
  var ed = this.send(msg, asyncCallback);
	  
  return isSordZ ? ed.sord : ed;
};

	
///////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Helper functions
//
///////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Convert Any to JavaScript object and vice versa.
 */
de.elo.ix.client.AnyToObject = {

	TYPE_OBJECT : 0,
	
	TYPE_BOOLEAN : 1,
	
	TYPE_INT : 5,
	
	TYPE_LONG : 6,
	
	TYPE_DOUBLE : 7,
	
	TYPE_STRING : 8,
	
	TYPE_HANDLE : 10,
	
	TYPE_ARRAY_BYTE : 1001,
	
	TYPE_ARRAY_ANY : 1002,
		
	/**
	 * Convert given Any object to JavaScript object.
	 * @param any Any object
	 * @return JavaScript object
	 */
	toObject : function(any) {
		var ret = null;
		switch (any.type) {
			case this.TYPE_BOOLEAN: 
				ret = any.booleanValue; 
				break;
			case this.TYPE_INT:
				ret = any.intValue;
				break;
			case this.TYPE_LONG:
				ret = any.longValue;
				break;
			case this.TYPE_DOUBLE:
				ret = any.doubleValue;
				break;
			case this.TYPE_STRING:
				ret = any.stringValue;
				break;
			case this.TYPE_ARRAY_BYTE:
				ret = any.byteArray;
				break;
			case this.TYPE_ARRAY_ANY:
				if (any.anyArray) {
					ret = [];
					for (var i = 0; i < any.anyArray.length; i++) {
						ret[i] = this.toObject(any.anyArray[i]);
					}
				}
				break;
			default: // assume TYPE_OBJECT
				ret = any.objectValue;
		}
		return ret;
	},

	/**
	 * Convert given Any object into a 2dim JavaScript array.
	 * @param any Any object.
	 * @return 2dim JavaScript array.
	 */
	toObjectTable : function(any) {
		var ret = null;
		switch (any.type) {
			case this.TYPE_BOOLEAN: 
				ret = [[any.booleanValue]]; 
				break;
			case this.TYPE_INT:
				ret = [[any.intValue]];
				break;
			case this.TYPE_LONG:
				ret = [[any.longValue]];
				break;
			case this.TYPE_DOUBLE:
				ret = [[any.doubleValue]];
				break;
			case this.TYPE_STRING:
				ret = [[any.stringValue]];
				break;
			case this.TYPE_ARRAY_BYTE:
				ret = [[any.byteArray]];
				break;
			case this.TYPE_ARRAY_ANY:
				if (any.anyArray) {
					var anyArray = any.anyArray;
	                ret = [];
			        if (anyArray.length != 0) {
						if (anyArray[0].type == this.TYPE_ARRAY_ANY) {
							for (var i = 0; i < anyArray.length; i++) {
								ret[i] = this.toObject(anyArray[i]);
							}
						}
						else {
							var arr = [];
							for (var i = 0; i < anyArray.length; i++) {
								arr[i] = this.toObject(anyArray[i]);
							}
							ret = [arr];
						}
					}
				}
				break;
			default: // assume TYPE_OBJECT
				ret = any.objectValue;
		}
		return ret;
	},
	
	/**
	 * Convert JavaScript object to Any object
	 * @param JavaScript object
	 * @return Any object
	 */
	fromObject : function(obj) {
		var any = null;
		if (obj != null) {
			if (obj.constructor === Boolean) {
				any = new de.elo.ix.client.Any();
				any.type = this.TYPE_BOOLEAN;
				any.booleanValue = obj;
			}
			else if (obj.constructor === Number) {
				any = new de.elo.ix.client.Any();
				any.type = this.TYPE_DOUBLE;
				any.doubleValue = obj;
			}
			else if (obj.constructor === String) {
				any = new de.elo.ix.client.Any();
				any.type = this.TYPE_STRING;
				any.stringValue = obj;
			}
			else if (obj.constructor === Array) {
				any = new de.elo.ix.client.Any();
				any.type = this.TYPE_ARRAY_ANY;
				any.anyArray = [];
				for (var i = 0; i < obj.length; i++) {
					any.anyArray[i] = this.fromObject(obj[i]);
				}
			}
			else if (obj.clazz && obj.clazz.indexOf("de.elo.ix.client") == 0) {
				any = new de.elo.ix.client.Any();
				any.type = this.TYPE_OBJECT;
				any.objectValue = obj;
			}
			else {
				var ex = de.elo.ix.client.JSException.createInvalidParam("Cannot convert given object to Any");
				throw ex;
			}
		}
		return any;
	}
};


/**
 * Return the table of class informations.
 */
de.elo.ix.client.getObjectValidationTable = function() {
	
	// Create class informations by generated function.
	// This function is called only once, see below. 
	var table = de.elo.ix.client.createObjectValidationTable();
	
	// Redirect the function.
	de.elo.ix.client.getObjectValidationTable = function() { return table; };
	
	return table;
};

/**
 * Check the members of an object.
 * This function checks whether the object members are either undefined or of the correct type. 
 * Furthermore it makes sure, that only those memembers are defined that are recognized by Indexserver.
 * So a typo inside a member name will cause an exception. 
 * @param errorInfo A String used to create the exception message.
 * @param paramObj The object to be tested.
 * @throws This function throws an de.elo.ix.client.INVALID_PARAM exception for the first invalid member.  
 */
de.elo.ix.client.checkMemberObject = function(errorInfo, paramObj, expectedType) {
    
	if (undefined == paramObj) return paramObj;
    
    // clazz element contains the type information: e.g. "int", "de.elo.ix.ClientInfo", ...
    if (!paramObj.clazz) {
    	throw de.elo.ix.client.JSException.createInvalidParam(errorInfo, "Object must have member 'clazz'");
    }
    
    // clazz element must contain the expected type.
    if (paramObj.clazz != expectedType) {
    	throw de.elo.ix.client.JSException.createInvalidParam(errorInfo, "Object is of type '" + paramObj.clazz + "' but must be of type '" + expectedType + "'");
    }
    
    // get the table of class informations
    var validationTable = de.elo.ix.client.getObjectValidationTable();
    var validationInfoType = validationTable[expectedType];
    if (!validationInfoType) throw de.elo.ix.client.JSException.createInvalidParam(errorInfo, "Object is of unknown type '" + paramObj.clazz);
    
    for (var memberName in paramObj) {
    	
    	// ignore undefined or null values
    	var memberValue = paramObj[memberName];
    	if (memberValue == undefined) continue;
    	
    	// ignore functions, e.g. toString ...
    	if (typeof memberValue === 'function') continue;
    	
    	// ignore application defined cookie
    	if (memberName == 'transientCookie') continue;

		// check for obsolete members
    	var memberType = validationInfoType.members[memberName];
    	if (!memberType) {
    		throw de.elo.ix.client.JSException.createInvalidParam(errorInfo + "." + memberName, "Object is obsolete");
    	}

    	// check member type
        var fnctName = "checkMember";
    	
    	if (memberName == "_bs") {
    		// LongBitset._bs
    		fnctName = "checkMemberLongBitset";
    	}
    	else {

	    	// compose check function name -> checkMemberObject, checkMemberInt, ...
	        var dimPos = memberType.indexOf("[]"); 
	        if (dimPos >= 0) {
	        	fnctName += "Array";
	        	memberType = memberType.substr(0, dimPos);
	        }
	    	if ("+boolean+int+long+double".indexOf("+" + memberType) >= 0) {
	    		fnctName += memberType.substr(0, 1).toUpperCase() + memberType.substr(1);
	    	}
	    	else if ("java.lang.String" == memberType) {
	    		fnctName += "String";
	    	}
			else if ("de.elo.ix.client.Any" == memberType) {
				fnctName += "Any";
			}
	    	else {
	    		fnctName += "Object";
	    	}
	
    	}

    	// call check function
    	var validateFunction = de.elo.ix.client[fnctName];
    	validateFunction(errorInfo + "." + memberName, memberValue, memberType);
    }
    
    return paramObj;
};

/**
 * Check whether paramObj is a boolean value.
 * @param errorInfo A String used to create the exception message.
 * @param paramObj The object to be tested.
 * @throws This function throws an de.elo.ix.client.INVALID_PARAM exception, if paramObj is invalid.  
 */
de.elo.ix.client.checkMemberBoolean = function(errorInfo, paramObj) {
	if (undefined != paramObj) {
		if (paramObj.toString() != 'true' && paramObj.toString() != 'false') {
			throw de.elo.ix.client.JSException.createInvalidParam(errorInfo, "Must be true or false");
		}
	}
	else {
		paramObj = false;
	}
	return paramObj;
};

/**
 * Check whether paramObj is an integer value.
 * @param errorInfo A String used to create the exception message.
 * @param paramObj The object to be tested.
 * @throws This function throws an de.elo.ix.client.INVALID_PARAM exception, if paramObj is invalid.  
 */
de.elo.ix.client.checkMemberInt = function(errorInfo, paramObj) {
	if (undefined != paramObj) {
		var intVal = parseInt(paramObj);
		if (intVal != paramObj) {
			throw de.elo.ix.client.JSException.createInvalidParam(errorInfo, "Must be of type Integer");
		}
	}
	else {
		paramObj = 0;
	}
	return paramObj;
};

/**
 * Check whether paramObj is a long bitset value.
 * @param errorInfo A String used to create the exception message.
 * @param paramObj The object to be tested.
 * @throws This function throws an de.elo.ix.client.INVALID_PARAM exception, if paramObj is invalid.  
 */
de.elo.ix.client.checkMemberLongBitset = function(errorInfo, paramObj) {
	if (undefined != paramObj) {
		if (paramObj.constructor != Array || paramObj.length != 4) {
			throw de.elo.ix.client.JSException.createInvalidParam(errorInfo, "Must be of type Long (Array of 4 Integer)");
		}
		for (var i = 0; i < 4; i++) {
			paramObj[i] = de.elo.ix.client.checkMemberInt(errorInfo + "[" + i + "]", paramObj[i]);
		}
	}
	return paramObj;
};

/**
 * Check whether paramObj is a long  value.
 * @param errorInfo A String used to create the exception message.
 * @param paramObj The object to be tested.
 * @throws This function throws an de.elo.ix.client.INVALID_PARAM exception, if paramObj is invalid.  
 */
de.elo.ix.client.checkMemberLong = function(errorInfo, paramObj) {
	if (undefined != paramObj) {
		var n = parseFloat(paramObj);
		if (isNaN(n)) {
			throw de.elo.ix.client.JSException.createInvalidParam(errorInfo, "Must be of type Long");
		}
	}
	else {
		paramObj = 0; 
	}
	return paramObj;
};

/**
 * Check whether paramObj is a double value.
 * @param errorInfo A String used to create the exception message.
 * @param paramObj The object to be tested.
 * @throws This function throws an de.elo.ix.client.INVALID_PARAM exception, if paramObj is invalid.  
 */
de.elo.ix.client.checkMemberDouble = function(errorInfo, paramObj) {
	if (undefined != paramObj) {
		if (paramObj.constructor != Number) {
			throw de.elo.ix.client.JSException.createInvalidParam(errorInfo, "Must be a numeric type");
		}
	}
	else {
		paramObj = 0.0; 
	}
	return paramObj;
};

/**
 * Check whether paramObj is a String value.
 * @param errorInfo A String used to create the exception message.
 * @param paramObj The object to be tested.
 * @throws This function throws an de.elo.ix.client.INVALID_PARAM exception, if paramObj is invalid.  
 */
de.elo.ix.client.checkMemberString = function(errorInfo, paramObj) {
	if (undefined != paramObj) {
		if (paramObj.constructor != String) {
			paramObj = paramObj.toString();
		}
	}
	else {
		paramObj = ""; 
	}
	return paramObj;
};


/**
 * Check wether paramObj is an Any object.
 * @param errorInfo A String used to create the exception message
 * @param paramObj The object to be tested.
 * @throws This function throws an de.elo.ix.client.INVALID_PARAM exception, if paramObj is invalid.  
 */
de.elo.ix.client.checkMemberAny = function(errorInfo, paramObj) {
	if (paramObj) {
		
		if (paramObj.clazz != "de.elo.ix.client.Any") {
			throw de.elo.ix.client.JSException.createInvalidParam(errorInfo, "Must be of type de.elo.ix.client.Any");
		}
		
		var any = paramObj;
		switch (any.type) {
		case this.TYPE_BOOLEAN: 
			any.booleanValue = this.checkMemberBoolean(errorInfo + ".booleanValue", any.booleanValue); 
			break;
		case this.TYPE_INT:
			any.intValue = this.checkMemberBoolean(errorInfo + ".intValue", any.intValue); 
			break;
		case this.TYPE_LONG:
			any.longValue = this.checkMemberLong(errorInfo + ".longValue", any.longValue); 
			break;
		case this.TYPE_DOUBLE:
			any.dobuleValue = this.checkMemberBoolean(errorInfo + ".doubleValue", any.doubleValue); 
			break;
		case this.TYPE_STRING:
			any.stringValue = this.checkMemberBoolean(errorInfo + ".stringValue", any.stringValue); 
			break;
		case this.TYPE_ARRAY_ANY:
			any.anyArray = this.checkMemberArrayAny(errorInfo + ".anyArray", any.anyArray);
			break;
		default: // assume TYPE_OBJECT
			if (any.objectValue) {
				if (!any.objectValue.clazz || any.objectValue.clazz.indexOf("de.elo.ix.client.") < 0) {
					throw de.elo.ix.client.JSException.createInvalidParam(errorInfo + ".objectValue", "Must be of type de.elo.ix.client.*");
				}
			}
		}		
	}
	
	return paramObj;
};

/**
 * Check whether paramObj is an array.
 * This function is called by the other checkMemberArray* functions.
 * @param errorInfo A String used to create the exception message.
 * @param paramObj The object to be tested.
 * @param checkParamFnct The function to be used to check the object.
 * @param expectedParamType paramObj must be of this type. E.g. 'de.elo.ix.client.Sord'. 
 * This parameter has to be omitted for int, long, double, String.
 * @throws This function throws an de.elo.ix.client.INVALID_PARAM exception, if paramObj is invalid.  
 */
de.elo.ix.client.checkMemberArray = function(errorInfo, paramObj, checkParamFnct, expectedParamType) {
	if (undefined != paramObj) {
		if (paramObj.constructor != Array) throw de.elo.ix.client.JSException.createInvalidParam(errorInfo, "Must be an array");
		for (var i = 0; i < paramObj.length; i++) {
			paramObj[i] = checkParamFnct(errorInfo + "[" + i + "]", paramObj[i], expectedParamType);
		}
	}
	return paramObj;
};

/**
 * Checks whether paramObj is an array of the type expectedParamType.
 * @param errorInfo A String used to create the exception message.
 * @param paramObj The object to be tested.
 * @param expectedParamType paramObj must be of this type. E.g. 'de.elo.ix.client.Sord'. 
 * @throws This function throws an de.elo.ix.client.INVALID_PARAM exception, if paramObj is invalid.  
 */
de.elo.ix.client.checkMemberArrayObject = function(errorInfo, paramObj, expectedParamType) {
	return de.elo.ix.client.checkMemberArray(errorInfo, paramObj, de.elo.ix.client.checkMemberObject, expectedParamType);
};

/**
 * Checks whether paramObj is an array of boolean values.
 * @param errorInfo A String used to create the exception message.
 * @param paramObj The object to be tested.
 * @throws This function throws an de.elo.ix.client.INVALID_PARAM exception, if paramObj is invalid.  
 */
de.elo.ix.client.checkMemberArrayBoolean = function(errorInfo, paramObj) {
	return de.elo.ix.client.checkMemberArray(errorInfo, paramObj, de.elo.ix.client.checkMemberBoolean);
};

/**
 * Checks whether paramObj is an array of integer values.
 * @param errorInfo A String used to create the exception message.
 * @param paramObj The object to be tested.
 * @throws This function throws an de.elo.ix.client.INVALID_PARAM exception, if paramObj is invalid.  
 */
de.elo.ix.client.checkMemberArrayInt = function(errorInfo, paramObj) {
	return de.elo.ix.client.checkMemberArray(errorInfo, paramObj, de.elo.ix.client.checkMemberInt);
};

/**
 * Checks whether paramObj is an array of long values.
 * @param errorInfo A String used to create the exception message.
 * @param paramObj The object to be tested.
 * @throws This function throws an de.elo.ix.client.INVALID_PARAM exception, if paramObj is invalid.  
 */
de.elo.ix.client.checkMemberArrayLong = function(errorInfo, paramObj) {
	return de.elo.ix.client.checkMemberArray(errorInfo, paramObj, de.elo.ix.client.checkMemberLong);
};

/**
 * Checks whether paramObj is an array of double values.
 * @param errorInfo A String used to create the exception message.
 * @param paramObj The object to be tested.
 * @throws This function throws an de.elo.ix.client.INVALID_PARAM exception, if paramObj is invalid.  
 */
de.elo.ix.client.checkMemberArrayDouble = function(errorInfo, paramObj) {
	return de.elo.ix.client.checkMemberArray(errorInfo, paramObj, de.elo.ix.client.checkMemberDouble);
};

/**
 * Checks whether paramObj is an array of String values.
 * @param errorInfo A String used to create the exception message.
 * @param paramObj The object to be tested.
 * @throws This function throws an de.elo.ix.client.INVALID_PARAM exception, if paramObj is invalid.  
 */
de.elo.ix.client.checkMemberArrayString = function(errorInfo, paramObj) {
	return de.elo.ix.client.checkMemberArray(errorInfo, paramObj, de.elo.ix.client.checkMemberString);
};

/**
 * Checks whether paramObj is an array of Any objects.
 * @param errorInfo A String used to create the exception message.
 * @param paramObj The object to be tested.
 * @throws This function throws an de.elo.ix.client.INVALID_PARAM exception, if paramObj is invalid.  
 */
de.elo.ix.client.checkMemberArrayAny = function(errorInfo, paramObj) {
	return de.elo.ix.client.checkMemberArray(errorInfo, paramObj, de.elo.ix.client.checkMemberAny, "de.elo.ix.client.Any");
};

/**
* This class helps to use the event bus API functions.
* <p>
* In order to send an event, obtain an event bus with one of the functions 
* <code>getEventBus, getBroadcastBus, getUserBus</code> and call one of its send functions.
* </p><p> 
* For receiving events, pass an implementation of the interface <code>IXEventBusHandler</code>
* to function <code>setHandler</code> and add event listeners to a predefined or 
* application defined bus. 
* </p><p> 
* Listeners can be registered with an event bus by calling the addListeners functions of 
* the nested <code>Bus</code> class.
* </p><p> 
* Predefined event busses, like the broadcast bus and the user busses, do not need to be closed, 
* when they are no longer needed. In contrast, application defined busses should be closed. They
* stay alive inside Indexserver as long as there are listeners registered with.  
* The function <code>Bus.release</code> deletes the currently attached listeners of a bus object. 
* Listeners are automatically removed, when the user loggs out. 
* </p><p> 
* Objects of this class are thread safe.
* @see IXEventBusHandler
*/

de.elo.ix.client.EventBusApi = function (conn) {

    /**
    * Get subscriber ID
    */
    this.getSubscriberId = function () {
        return this._subsId;
    };

    /**
    * Initialize the subscriber ID 
    */
    this._initEventBusSubscriber = function () {

        // create subscriber ID
        var subsId = this._conn.ix().createEventBusSubscriber();

        // add event listener for chat events in user bus 
        var eventListener = new de.elo.ix.client.EventListener();
        var filter = new de.elo.ix.client.EventFilter();
        var userId = conn.getUserId();
        var busId = parseInt(this._conn.getCONST().EVENT_BUS.BUSID_USER) + parseInt(userId);
        filter.busId = "" + busId;
        filter.type = this._conn.getCONST().EVENT_BUS.EVENT_TYPE_OPEN_CHAT;
        eventListener.filters = [filter];

        this._conn.ix().createEventBusListener(subsId, eventListener);

        return subsId;
    };

    /**
    * Asynchronously sends internalReceiveEvents to ask for events.
    */
    this._startReceiveEvents = function () {

        // Ticket must not change until 
        this._conn.ix().createSord("", "", conn.getCONST().SORD.mbOnlyId);

        // Relogin or first call?
        var connTicket = this._conn.getLoginResult().clientInfo.ticket;
        if (!this._lastTicket || this._lastTicket != connTicket) {

            // aquire a new subscriber ID and register event listeners
            this._subsId = this._initEventBusSubscriber();

            // on relogin, assign the listeners again
            if (this._lastTicket) {
                this._renewAllEventListenersAfterRelogin();
            }

            this._lastTicket = connTicket;
        }

        // Define async callback function for received events 
        var me = this;
        var handleSuccess = function (events) {
            if (me._handlers) {
                // Process events
                for (var i = 0; i < me._handlers.length; i++) {
                    var handler = me._handlers[i];
                    if (handler && handler.processEventBusEvents) {
                        handler.processEventBusEvents(me._subsId, events);
                    }
                };
            }
            // Receive further events
            me._startReceiveEvents();
        };
        var handleException = function (msg) {
            // Receive further events on timeout
            if (msg && msg.indexOf(de.elo.ix.client.HTTP_ERROR) >= 0 && msg.indexOf("408") >= 0) {
                me._startReceiveEvents();
            }
        };

        var asyncContext = new de.elo.ix.client.AsyncCallback(handleSuccess, handleException);

        // read events 
        var timeoutMillis = 60 * 1000;
        this._conn.ix().internalReceiveEvents(this._subsId, timeoutMillis.toString(), asyncContext);
    };

    /**
    * Calls _startReceiveEvents if it was not called jet.
    */
    this._maybeStartReceiveEvents = function () {
        if (!this._lastTicket) {
            this._startReceiveEvents();
        }
    };

    this._renewAllEventListenersAfterRelogin = function () {
        for (var i = 0; i < this._busses.length; i++) {
            var bus = this._busses[i];
            bus._renewEventListenersAfterRelogin();
        };
    };

    /**
    * Add a handler object that receives bus events.
    * @param handler Object like IXEventBusHandler that defines the function processEventBusEvents.
    */
    this.addHandler = function (handler) {
        for (var i = 0; i < this._handlers.length; i++) {
            if (this._handlers[i] === handler) return;
        }
        this._handlers.push(handler);
        this._maybeStartReceiveEvents();
    };

    /**
    * Remove a handler object that receives bus events.
    * @param handler Object like IXEventBusHandler that defines the function processEventBusEvents.
    */
    this.removeHandler = function (handler) {
        var a = [];
        for (var i = 0; i < this._handlers.length; i++) {
            if (this._handlers[i] === handler) continue;
            a.push(this._handlers[i]);
        }
        this._handlers = a;
    };

    /**
    * Shutdown EventBusApi object.
    * This function is called from IXConnection on logout.
    */
    this.done = function () {
        this._handlers = [];
    };


    /**
    * This class encapsulates the functions for sending events and listening for events.
    * Objects of this class are thread safe.
    */
    this.Bus = function (eventBusApi, busId) {

        /**
        * Bus ID
        */
        this.getId = function () {
            return this._busId;
        };

        /**
        * Send an event of the given type with the supplied event ID and object as event data.
        * @param eventType Event type, one of the constants EventBusC.EVENT_TYPE*.
        * @param eventId Event ID, optional.
        * @param data Object passed to Event.any, optional. Is encapsulated in an de.elo.ix.client.Any before it is assigned to Event.any.
        * @return this object
        */
        this.send = function (eventType, eventId, data) {
            var event = new de.elo.ix.client.Event();
            event.busId = this._busId;
            event.type = eventType;
            event.id = eventId ? eventId : "0";
            event.any = data ? de.elo.ix.client.AnyToObject.fromObject(data) : null;
            return this.sendArray([event]);
        };

        /**
        * Send the given events. 
        * The function sets the member busId of the Event objects to the ID of this bus.
        * @param events Events to be sent.
        * @return this object
        */
        this.sendArray = function (events) {
            if (events && events.length != 0) {
                for (var i = 0; i < events.length; i++) {
                    events[i].busId = this._busId;
                }

                this._conn.ix().sendEvents(this._eventBusApi.getSubscriberId(), events);
            }
            return this;
        };

        /**
        * Add an event listener for events of the given type.
        * @param eventType Event type, one of the constants EventBusC.EVENT_TYPE* or an application defined event type.
        * @return Listener ID
        * @throws RemoteException
        * @see EventBusC
        */
        this.addListener = function (eventType) {
            var filter = new de.elo.ix.client.EventFilter();
            filter.type = eventType;
            return this.addListenerArray([filter]);
        };

        /**
        * Add an event listener with the given filters.
        * @param filters Event filters
        * @return Listener ID
        */
        this.addListenerArray = function (filters) {
            if (!filters) return "0";

            for (var i = 0; i < filters.length; i++) {
                filters[i].busId = this._busId;
            }

            var eventListener = new de.elo.ix.client.EventListener();
            eventListener.filters = filters;

            var lsnId = this._conn.ix().createEventBusListener(this._eventBusApi.getSubscriberId(), eventListener);
            this._eventListeners[lsnId] = eventListener;


            return lsnId;
        };

        /**
        * Deletes an event bus listener
        * @param lsnId Listener ID
        * @throws RemoteException
        */
        this.deleteListener = function (lsnId) {
            this._eventListeners[lsnId] = null;
            this._conn.ix().deleteEventBusListener(lsnId);
        };

        /**
        * Delete all listeners from this event bus.
        * Call this function, if the Bus object is no longer needed by this application. 
        * Other applications can use the bus furtheron.
        */
        this.release = function () {
            for (var lsnId in this._eventListeners) {
                this._conn.ix().deleteEventBusListener(lsnId);
            }
            this._eventListeners = {};
        };

        /**
        * Close event bus.
        * Call this function, if the Bus object is no longer needed by this and other applications. 
        * This function internally calls release() to delete all listeners from the bus.
        */
        this.close = function () {
            this.release();
            this._conn.ix().closeEventBus(busId);
        };

        /**
        * Reconnect event listeners. 
        * This function is called from EventBusApi.
        */
        this._renewEventListenersAfterRelogin = function () {
            var arr = [];
            var subsId = this._eventBusApi.getSubscriberId();

            for (var i = 0; i < this._eventListeners.length; i++) {
                var eventListener = this._eventListeners[i];
                var lsnId = this._conn.ix().createEventBusListener(subsId, eventListener);
                arr[lsnId] = eventListener;
            }

            this._eventListeners = arr;
        };

        // back pointer to EventBusApi object
        this._busId = busId;
        this._eventBusApi = eventBusApi;
        this._conn = eventBusApi._conn;
        this._eventListeners = {};
    };

    /**
    * Return an event bus object for the given bus ID.
    * @busId Event bus ID.
    * @return An de.elo.ix.client.EventBus
    */
    this.getEventBus = function (busId) {
        var bus = this._busses[busId];
        if (!bus) {
            this._busses[busId] = bus = new this.Bus(this, busId);
        }
        this._maybeStartReceiveEvents();
        return bus;
    };

    /**
    * Get event bus for broadcast messages.
    * @return An de.elo.ix.client.EventBus
    */
    this.getBroadcastBus = function () {
        var busId = this._conn.getCONST().EVENT_BUS.BUSID_BROADCAST;
        var bus = this.getEventBus(busId);
        return bus;
    };

    /**
    * Get event bus for user messages.
    * @return An de.elo.ix.client.EventBus
    */
    this.getUserBus = function (userId) {
        var busId = parseInt(this._conn.getCONST().EVENT_BUS.BUSID_USER) + parseInt(userId);
        var bus = this.getEventBus("" + busId);
        return bus;
    };

    this._conn = conn;
    this._subsId = null;
    this._lastTicket = null;
    this._busses = {};
    this._handlers = [];
};

/**
* In order to process bus events, an object must be supplied that implements the function processEventBusEvents. 
*/
de.elo.ix.client.IXEventBusHandler = function () {

    /**
    * Function to process events.
    * @param subsId Subscriber ID
    * @param events Array of event objects
    */
    this.processEventBusEvents = null;

};

/**
 * This function synchonously sends an Indexserver request object and returns the result.
 * If parameter asyncCallback is used, the request is processed asynchronously. 
 * On success, function asyncCallback.handleSuccess is called.
 * Function asyncCallback.handleException is called on error.
 * If parameter asyncCallback is not supplied or undefined, the request is processed synchonously.
 * In this case, this function returns the Indexserver API object (e.g. EditInfo) when the request is successful.
 * Otherwise it throws an exception.
 * @param dataObj Request object, e.g. JsonMethodIXServicePortIFCreateSord
 * @param asyncCallback Optional. Callback object of type de.elo.ix.client.AsyncCallback.
 * @return If processed synchonousloy, the function returns an Indexserver API object, e.g. EditInfo. 
 * Otherwise it returns nothing.
 * @throws de.elo.ix.client.JSException  
 */
de.elo.ix.client.IXServicePortIF.prototype.send = function(dataObj, asyncCallback) {
	var me = this;
	var ret = {};

	if (asyncCallback) {
		
		var jsonText = JSON.stringify(dataObj);
		
		var fnctSuccess = function(responseText) {
			var ret = JSON.parse(responseText);
			if (asyncCallback.handleSuccess && ret.jsonDataStreamMethodReturn) asyncCallback.handleSuccess(ret.jsonDataStreamMethodReturn);
			if (asyncCallback.handleException && ret.jsonDataStreamMethodException) asyncCallback.handleException(ret.jsonDataStreamMethodException);
		};
		
		var fnctError = function(errorText) {
			if (asyncCallback.handleException) asyncCallback.handleException(ex);
		};

		de.elo.ix.client.sendReceiveAsync(me.url, "POST", jsonText, fnctSuccess, fnctError);
	}
	else {
	
		var jsonText = JSON.stringify(dataObj);
	
		var responseText = de.elo.ix.client.sendReceiveSync(this.url, "POST", jsonText);
	
		ret = JSON.parse(responseText);
		
		if (ret.jsonDataStreamMethodException) {
			throw ret.jsonDataStreamMethodException;
		}
		
	}
	
	return ret.jsonDataStreamMethodReturn;
};

/**
 * This function synchonously or asynchronously sends an Indexserver request object.
 * A relogin is performed automatically, if the current ticket lifetime has been expired.
 * If the current session has become invalid, the function performs a relogin.
 * If parameter asyncCallback is used, the request is processed asynchronously. 
 * On success, function asyncCallback.handleSuccess is called.
 * Function asyncCallback.handleException is called on error.
 * If parameter asyncCallback is not supplied or undefined, the request is processed synchonously.
 * In this case, this function returns the Indexserver API object (e.g. EditInfo) when the request is successful.
 * Otherwise it throws an exception.
 * @param dataObj Request object, e.g. JsonMethodIXServicePortIFCreateSord
 * @param asyncCallback Optional. Callback object of type de.elo.ix.client.AsyncCallback.
 * @return If processed synchonousloy, the function returns an Indexserver API object, e.g. EditInfo. 
 * Otherwise it returns nothing.
 * @throws de.elo.ix.client.JSException   
 */
de.elo.ix.client.IXConnIXServicePortIF.prototype.send = function(dataObj, asyncCallback) {
	var me = this;

	if (asyncCallback) {
		
		asyncCallback.loopCount = asyncCallback.loopCount || 0;
		
		var jsonText = JSON.stringify(dataObj);

		var fnctSuccess = function(responseText) {

			var ret = JSON.parse(responseText);
						
			// Fehlermeldung "[ELOIX:" ?
			if (ret.jsonDataStreamMethodException) {

				// relogin?
				try {
					// Login is performed synchronously. Async retry would make too much effort.
					me._ixsl.reloginOrThrow(asyncCallback.loopCount++, ret.jsonDataStreamMethodException);
			        
					// retry async
					dataObj.ci = me._ixsl.ci();
					me.send(dataObj, asyncCallback);
				}
				catch (ex) {
					if (asyncCallback.handleException) asyncCallback.handleException(ex);
				}
			}
			else {
				if (asyncCallback.handleSuccess) asyncCallback.handleSuccess(ret.jsonDataStreamMethodReturn);
			}
		};
		
		var fnctError = function(errorText) {
			if (asyncCallback.handleException) asyncCallback.handleException(errorText);
		};

		var ix = me._ixsl.ix();
		de.elo.ix.client.sendReceiveAsync(ix.url, "POST", jsonText, fnctSuccess, fnctError);

	}
	else {
	    while (true) {
	    	var loopCount = 0;
			try {
				var ix = this._ixsl.ix();
				return ix.send(dataObj);
			} catch (e) {
				this._ixsl.reloginOrThrow(loopCount++, e);
				dataObj.ci = me._ixsl.ci();
			}
		}
	}
};

/**
 * This function returns the headers to be used for JSON requests.  
 * Returns Content-Type and Accept headers. 
 */
de.elo.ix.client.getRequestHeaders = function() {
	var ret = [
	           ["Content-Type", "application/json"],
	           ["Accept", "application/json, text/plain, text/html, */*"]
	          ];
	return ret;
};

/**
 * Sends a request asynchonously.
 * @param url Destination URL
 * @param method GET, POST
 * @param jsonText Message content (text)
 * @param fnctSuccess This function is called on success. It receives the response text as argument.
 * @param fnctError This function is called if an error occurs. It receives the error message as argument.
 */
de.elo.ix.client.sendReceiveAsync = function(url, method, jsonText, fnctSuccess, fnctError) {

	var req = new AsyncXMLHttpRequest();

	req.onload = function() {
		fnctSuccess(req.responseText);
	};
	
	req.onerror = function() {
		if (!fnctError) return;
		var ex = de.elo.ix.client.JSException.createHttpError(req.status);
		fnctError(ex);
	};

	req.ontimeout = function() {
		if (!fnctError) return;
		var ex = de.elo.ix.client.JSException.createHttpError(408);
		fnctError(ex);
	};

	url = de.elo.ix.client.appendUrlTimestamp(url);
	req.open(method, url, false);

	var hdrs = this.getRequestHeaders();
	for (var i = 0; i < hdrs.length; i++) {
		var hdr = hdrs[i];
		req.setRequestHeader(hdr[0], hdr[1]);
	};
	
	req.send(jsonText);
};

/**
 * Sends a request synchonously.
 * @param url Destination URL
 * @param method GET, POST
 * @param jsonText Message content (text)
 * @return 
 * @param fnctError This function is called if an error occurs. It receives the error message as argument.
 */
de.elo.ix.client.sendReceiveSync = function(url, method, jsonText) {
	
	var req = new XMLHttpRequest();

	url = de.elo.ix.client.appendUrlTimestamp(url);
	req.open(method, url, false);
	
	var hdrs = this.getRequestHeaders();
	for (var i = 0; i < hdrs.length; i++) {
		var hdr = hdrs[i];
		req.setRequestHeader(hdr[0], hdr[1]);
	};
	
	req.send(jsonText);
	
	if (req.status != 200) {
		var ex = de.elo.ix.client.JSException.createHttpError(req.status);
		throw ex;
	}
	
	var ret = req.responseText;
	return ret;
};

/**
 * This function is called before a request is sent to append a timestamp to the URL.
 * URLs are made unique in order to prevent browsers from reading the data from their cache.
 * @param url
 * @returns
 */
de.elo.ix.client.appendUrlTimestamp = function(url) {
	var ts = (url.indexOf("?") < 0) ? ts = "?" : ts = "&";
	ts += "__ts=";
	ts += new Date().getTime();
	return url + ts;
};


