package de.elo.ix.workflowexamples;

import de.elo.ix.client.ClientInfo;
import de.elo.ix.client.LoginResult;
import de.elo.ix.client.EditInfo;
import de.elo.ix.client.EditInfoC;
import de.elo.ix.client.IXConnFactory;
import de.elo.ix.client.IXConnection;
import de.elo.ix.client.IXServicePortC;
import de.elo.ix.client.SordC;
import de.elo.ix.client.LockC;
import de.elo.ix.client.WFCollectNode;
import de.elo.ix.client.WFNode;
import de.elo.ix.client.WFEditNode;
import java.rmi.RemoteException;
import java.util.Date;
import java.util.Properties;

/**
 * This example shows how a sequential adhoc workflow is started and processed.
 * collectWorkFlowNodes is used to retrieve the nodes as it allows the search
 * to be restricted to the actual workflow.
 * The helper class is used to create the users.
 */
public class AdhocWorkFlowSequential {
    
    private final static String IX_URL = "http://localhost:8080/ix-elotest1/ix";
    private final static String LOGIN_NAME = "Administrator";
    private final static String LOGIN_PWD = "elo";
    private final static String CNN_NAME = "IX-Workshop";
    private static IXConnFactory connFact;
    private static IXConnection ix;
    private static IXServicePortC CONS;
    private static EditInfoC EDIT_INFO;
    private static SordC SORD;
    private static LockC LOCK;
    
    public static void main(String[] args){
        
         try {
            // Login
            connectIx();
            
            // Insert a new workflow template
            createAdhocWorkFlow();

            
        } catch (RemoteException e) {
            System.out.println(e.toString());
            
        } finally {
            
            // logout from Index Server
            disconnectIx();
        }    
        
    }
    
    public static void createAdhocWorkFlow() throws RemoteException{
        
        // Create 3 workflow users
        String[] userId = new String[3];
        String userName = new String();
        
        for (int i = 0; i < 3; i++){
            userName = ("WF-User" + (i + 1));
            userId[i] = Integer.toString(WFHelper.createNewUser(ix, userName, "elo", true));
        }

        // Create Sord object
        EditInfo ed = ix.ix().createSord("1", "0", EDIT_INFO.getMbSord());
        ed.getSord().setName("Adhoc WF Sord " + (new Date()));
        int objId = ix.ix().checkinSord(ed.getSord(), SORD.getMbMin(), LOCK.getNO());
       
        // Start workflow
        String flowName = "Adhoc WF " + (new Date());
        int flowId = ix.ix().startAdHocWorkFlow(
                                              flowName, 
                                              ed.getSord().getGuid(),
                                              userId,
                                              "Adhoc WF Start",
                                              true,
                                              true,
                                              userId[0],
                                              "Workflow cancelled!",
                                              userId[2],
                                              "Workflow finished!",
                                              null);                 

        System.out.println("Started WF: sordName= " + ed.getSord().getName() + 
                ", flowId= " + flowId + 
                ", flowName= " + flowName); 
        
        // Find first node to forward
        WFCollectNode nextNode = new WFCollectNode();
        nextNode = getNextNode(flowName, objId);
        String comment = new String();
        int nodeNo = 1;
 
        // Forward remaining nodes
        while (nextNode != null){
            comment = "Forwarded node " + nodeNo + " on " + (new Date());
            WFHelper.forwardNode(connFact, nextNode, comment);
            nodeNo++;
            nextNode = getNextNode(flowName, objId);
        }

        
        // Delete Sord
       ix.ix().deleteSord(null, Integer.toString(objId), LOCK.getNO(), null);     
    }
    
 
    public static WFCollectNode getNextNode(String flowName, int objId) throws RemoteException{
        
        // Search for active workflow node with workflow name
        WFCollectNode[] nodes = ix.ix().collectWorkFlowNodes(
                                                           flowName,        // Name of workflow
                                                           null,            // WF type - null = active
                                                           null,            // Node name
                                                           0,               // Node type - 0 = all nodes
                                                           Integer.toString(objId), // objId for object
                                                           null,            // Enter date
                                                           null,            // Exit date
                                                           null,            // User ids
                                                           true,            // Only active nodes
                                                           false);          // Only start nodes
        
        // Return node if found
        if (nodes.length > 0){
             return nodes[0];
        } else{
            // No active nodes found - return null
            return null;
        }
        
    }
        
    
    
    /**
     * Connect and login to IndexServer
     */
    public static void connectIx() throws RemoteException {
        Properties connProps = IXConnFactory.createConnProps(IX_URL);
        Properties sessOpts = IXConnFactory.createSessionOptions("IX-Example", "1.0");
        connFact = new IXConnFactory(connProps, sessOpts);
        ix = connFact.create(LOGIN_NAME, LOGIN_PWD, CNN_NAME, null);
        
        // Get contstant values (cached by IXClient object)
        CONS = ix.getCONST();
        EDIT_INFO = CONS.getEDIT_INFO();
        SORD = CONS.getSORD();
        LOCK = CONS.getLOCK();
    }
    
    // Logout from IndexServer
    public static void disconnectIx() {
         if (ix != null) {
           ix.logout();
         }
         System.out.println("Logged off");
    }
}
