package de.elo.ix.examples;

import de.elo.ix.client.ClientInfo;
import de.elo.ix.client.DocVersion;
import de.elo.ix.client.Document;
import de.elo.ix.client.EditInfo;
import de.elo.ix.client.EditInfoC;
import de.elo.ix.client.IXServicePortC;
import de.elo.ix.client.LockC;
import de.elo.ix.client.DeleteOptions;
import de.elo.ix.client.IXConnFactory;
import de.elo.ix.client.IXConnection;
import de.elo.ix.client.Sord;
import java.io.File;
import java.io.*;
import java.rmi.RemoteException;
import java.util.Properties;

/**
 * This example shows how to checkin an attachment for a document.
 * 
 * A sord will be created for a document without a version
 * The attachment will be checked in
 * The will be checked out and displayed
 * 
 */
public class CheckinAttachment {
    
    private final static String IX_URL = "http://localhost:8080/ix-elotest1/ix";
    private final static String LOGIN_NAME = "Administrator";
    private final static String LOGIN_PWD = "elo";
    private final static String CNN_NAME = "IX-Workshop";
    private static IXConnection ix;
    private static IXServicePortC CONS;
    private static EditInfoC EDIT_INFO;
    private static LockC LOCK;
    
    public static void main(String[] args) {

        try {
            // Login
            connectIx();
            
            // Insert a new document 
            checkinAttachment();

            
        } catch (RemoteException e) {
            System.out.println(e.toString());
            
        } finally {
            
            // logout from Index Server
            disconnectIx();
        }    
    }
    
    

    // Create a document object
    public static void checkinAttachment() throws RemoteException {
        
        // Create a document without a version
        EditInfo ed = ix.ix().createDoc("1", "0", null, EDIT_INFO.getMbSordDocAtt());
        Sord sord = ed.getSord();
        sord.setName("Example CheckinAttachmentDocument");
     //   sord.setId(ix.ix().checkinSord(sord, SORD.getMbAll(), LOCK.getNO()));
        System.out.println("Sord created with Id: " + sord.getId() + 
                           " and name: " + sord.getName());
                           
       // Create attachment file
       String text = "CheckinAttachment attachment";
       File attFile = internalCreateTestFile(text, ".txt");
       
           
       // Supply the extension for the document 
       Document doc = ed.getDocument(); 
       DocVersion dv = new DocVersion();
       dv.setExt(ix.getFileExt(attFile.getName()));
       doc.setAtts(new DocVersion[] {dv});
       System.out.println("Document attachment created: " + attFile.getName());
       
       // The Index Server creates a URL where the document must be uploaded to
       doc = ix.ix().checkinDocBegin(doc);
       //dv = doc.getDocs()[0];
       System.out.println("Document upload URL created:" + doc.getAtts()[0].getUrl() + 
                          " and attachment guid = " + doc.getAtts()[0].getGuid());
       
       // Upload document to the URL. Uses helper function from IXClient.
       String uploadResult = ix.upload(doc.getAtts()[0].getUrl(), attFile);
       doc.getAtts()[0].setUploadResult(uploadResult);
       System.out.println("Attachment uploaded");
       attFile.delete();
        
      
       
       doc = ix.ix().checkinDocEnd(ed.getSord(), null, doc, LOCK.getYES());
       System.out.println("Inserted document attachment:");
       System.out.println("   objId = " + doc.getObjId());
       System.out.println("   attId = " + doc.getAtts()[0].getId());
       System.out.println("   attachment Guid = " + doc.getAtts()[0].getGuid());
       System.out.println("   attachment url = " + doc.getAtts()[0].getUrl());
       
       // Delete sord if no longer required
       // To delete set delete = true
       boolean delete = false;
       if (delete == true){
           
           DeleteOptions delOpts = new DeleteOptions();
           delOpts.setDeleteFinally(true);
           ix.ix().deleteSord(null, sord.getGuid(), LOCK.getNO(), null);
           ix.ix().deleteSord(null, sord.getGuid(), LOCK.getNO(), delOpts);
           System.out.println("Sord with Id: " + sord.getGuid() + " has been deleted!");
       }
    }
    
    
    //Connect and login to IndexServer
    public static void connectIx() throws RemoteException {
        Properties connProps = IXConnFactory.createConnProps(IX_URL);
        Properties sessOpts = IXConnFactory.createSessionOptions("IX-Example", "1.0");
        IXConnFactory connFact = new IXConnFactory(connProps, sessOpts);
        ix = connFact.create(LOGIN_NAME, LOGIN_PWD, CNN_NAME, null);
        
        // Get contstant values (cached by IXClient object)
        CONS = ix.getCONST();
        EDIT_INFO = CONS.getEDIT_INFO();
        LOCK = CONS.getLOCK();
    }
    
    // Write to temp file
    public static File internalCreateTestFile(String text, String ext) {
        File tempFile = null;
        try{
            tempFile = internalMakeTempFile(ext);
            BufferedWriter out = new BufferedWriter(new FileWriter(tempFile));
            out.write(text);
            out.close();
            
        } catch (IOException ioe){
            System.out.println(ioe.toString());
        }
        
        return tempFile;
    }
    
    
    // Make file name and create temp file
    public static File internalMakeTempFile(String ext) throws IOException {
        
        String tempFile = "AttachmentFile";
        File f = File.createTempFile(tempFile, ext);
        System.out.println("File " + f.getName() + " created");
        return f;
    }
    
    
    // Logout from IndexServer
    public static void disconnectIx() {
         if (ix != null) {
           ix.logout();
         }
         System.out.println("Logged off");
    }
    
}
