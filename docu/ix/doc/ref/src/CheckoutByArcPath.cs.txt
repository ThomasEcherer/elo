using System;

namespace Examples
{
	/// <summary>
	/// 
	/// 1. Create structure:
	/// - e1
	///   - e2
	///     - e3
	///       - e4
	/// 
	/// 2. Checkout Sord by archive path: /e1/e2/e3/e4
	///
	/// </summary>
	public class CheckoutByArcPath
	{
		// URL to IndexServer
		public String url;

		// [X] Account to authenticate 
		public String userName = "Administrator"; 
		public String userPwd = "";					

		public void run()
		{
			// IndexServer stub
			IXClient ix = null;
			try 
			{
				// Create IndexServer object
				Logger.instance().log("create IX...");
				ix = new IXClient(url);
				Logger.instance().log("create IX OK");

				// Prepare ClientInfo object with language and country
				IndexServer.ClientInfo ci = new IndexServer.ClientInfo();
				ci.language = "de";
				ci.country = "DE";

				// LOGIN
				Logger.instance().log("login...");
				IndexServer.LoginResult loginResult = ix.login2(ci, userName, userPwd, "myComputer", null);
				ci = loginResult.clientInfo;
				Logger.instance().log("login OK");

				// get constants
				Logger.instance().log("get const...");
				IndexServer.IXServicePortC CONST = ix.getCONST(ci);
				Logger.instance().log("get const OK");
				// 1. Create structure
				IndexServer.Sord e1 = ix.createSord(ci, "1", "0", CONST.EDIT_INFO.mbSord).sord;
				e1.name = "e1";
				e1.id = ix.checkinSord(ci, e1, CONST.SORD.mbAll, CONST.LOCK.NO);
				Logger.instance().log("created e1: id=" + e1.id);

				IndexServer.Sord e2 = ix.createSord(ci, e1.guid, "0", CONST.EDIT_INFO.mbSord).sord;
				e2.name = "e2";
				e2.id = ix.checkinSord(ci, e2, CONST.SORD.mbAll, CONST.LOCK.NO);
				Logger.instance().log("created e2: id=" + e2.id);

				IndexServer.Sord e3 = ix.createSord(ci, e2.guid, "0", CONST.EDIT_INFO.mbSord).sord;
				e3.name = "e3";
				e3.id = ix.checkinSord(ci, e3, CONST.SORD.mbAll, CONST.LOCK.NO);
				Logger.instance().log("created e3: id=" + e3.id);

				IndexServer.Sord e4 = ix.createSord(ci, e3.guid, "0", CONST.EDIT_INFO.mbSord).sord;
				e4.name = "e4";
				e4.id = ix.checkinSord(ci, e4, CONST.SORD.mbAll, CONST.LOCK.NO);
				Logger.instance().log("created e4: id=" + e4.id);

				// 2. Checkout Sord by archive path: /e1/e2/e3/e4
				IndexServer.Sord sord = ix.checkoutSord(ci, "ARCPATH:¶e1¶e2¶e3¶e4", 
					CONST.EDIT_INFO.mbSord, CONST.LOCK.NO).sord;
				Logger.instance().log("¶e1¶e2¶e3¶e4, id=" + sord.id + " == e4.id=" + e4.id);

				// Hint: The first character in the archive path defines the delimiter
				//       character used to seperate the archive levels.
				//       Thus you can use any character as delimiter. But consider 
				//		 that this character should not be used in Sord names.

				sord = ix.checkoutSord(ci, "ARCPATH:\\e1\\e2\\e3\\e4", 
					CONST.EDIT_INFO.mbSord, CONST.LOCK.NO).sord;
				Logger.instance().log("\\e1\\e2\\e3\\e4, id=" + sord.id + " == e4.id=" + e4.id);

				bool cleanUp = true;
				if (cleanUp) 
				{
          IndexServer.DeleteOptions delOpts = new IndexServer.DeleteOptions();
          delOpts.deleteFinally = true;
					ix.deleteSord(ci, null, e1.guid, CONST.LOCK.NO, delOpts);
				}
			}
			catch (Exception e) 
			{
				throw e;
			} 
			finally 
			{
				// Always release IXClient object to make sure 
				// that all all open sessions are closed on exit
				if (ix != null) 
				{
					Logger.instance().log("IX done...");
					ix.done();
					Logger.instance().log("IX done OK");
				}
			}

		}
	}
}
