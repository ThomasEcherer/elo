using System;

namespace Examples
{
	/// <summary>
	/// 
	/// 1. Create a Sord with index attribute (ObjKey object)
	/// 2. Checkout Sord by index attribute
	///
	/// </summary>
	public class CheckoutByIndex
	{
		// URL to IndexServer
		public String url;

		// [X] Account to authenticate 
		public String userName = "Administrator"; 
		public String userPwd = "";					

		public void run()
		{
			// IndexServer stub
			IXClient ix = null;
			try 
			{
				// Create IndexServer object
				Logger.instance().log("create IX...");
				ix = new IXClient(url);
				Logger.instance().log("create IX OK");

				// Prepare ClientInfo object with language and country
				IndexServer.ClientInfo ci = new IndexServer.ClientInfo();
				ci.language = "de";
				ci.country = "DE";

				// LOGIN
				Logger.instance().log("login...");
				IndexServer.LoginResult loginResult = ix.login2(ci, userName, userPwd, "myComputer", null);
				ci = loginResult.clientInfo;
				Logger.instance().log("login OK");

				// get constants
				Logger.instance().log("get const...");
				IndexServer.IXServicePortC CONST = ix.getCONST(ci);
				Logger.instance().log("get const OK");

				// 1. Create a Sord with index attribute
				IndexServer.Sord sord = ix.createSord(ci, "1", "0", CONST.EDIT_INFO.mbSord).sord;
				sord.name = "C# example CheckoutByIndex";
				sord.objKeys = new IndexServer.ObjKey[1];
				sord.objKeys[0] = new IndexServer.ObjKey();
				sord.objKeys[0].name = "Vendor";
				sord.objKeys[0].data = new String[] {"ELO Digital Office GmbH"};
				sord.id = ix.checkinSord(ci, sord, CONST.SORD.mbAll, CONST.LOCK.NO);
				Logger.instance().log("created sord: id=" + sord.id);

				// 2. Checkout Sord by index attribute
				sord = ix.checkoutSord(ci, "OKEY:VENdor=ELO digital OFFICE gmbh", 
					CONST.EDIT_INFO.mbSord, CONST.LOCK.NO).sord;
				Logger.instance().log("checkout sord, id=" + sord.id);

				bool cleanUp = true;
				if (cleanUp) 
				{
          IndexServer.DeleteOptions delOpts = new IndexServer.DeleteOptions();
          delOpts.deleteFinally = true;
          ix.deleteSord(ci, null, sord.guid, CONST.LOCK.NO, null);
          ix.deleteSord(ci, null, sord.guid, CONST.LOCK.NO, delOpts);
				}
			}
			catch (Exception e) 
			{
				throw e;
			} 
			finally 
			{
				// Always release IXClient object to make sure 
				// that all all open sessions are closed on exit
				if (ix != null) 
				{
					Logger.instance().log("IX done...");
					ix.done();
					Logger.instance().log("IX done OK");
				}
			}

		}
	}

}
