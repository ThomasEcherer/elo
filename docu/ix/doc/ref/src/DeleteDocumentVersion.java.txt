package de.elo.ix.examples;

import de.elo.ix.client.ClientInfo;
import de.elo.ix.client.DocVersion;
import de.elo.ix.client.Document;
import de.elo.ix.client.EditInfo;
import de.elo.ix.client.EditInfoC;
import de.elo.ix.client.IXServicePortC;
import de.elo.ix.client.LockC;
import de.elo.ix.client.DeleteOptions;
import de.elo.ix.client.IXConnFactory;
import de.elo.ix.client.IXConnection;
import de.elo.ix.client.Sord;
import de.elo.ix.client.SordC;
import java.io.File;
import java.io.*;
import java.rmi.RemoteException;
import java.util.Properties;

/**
 * This code demonstrates how to delete a version of a document.
 * 
 * A Document object is created.
 * 3 text files are created and saved as versions of the document
 * The document is checked in
 * One version of the document will be deleted
 */


public class DeleteDocumentVersion {
    
    private final static String IX_URL = "http://localhost:8080/ix-elotest1/ix";
    private final static String LOGIN_NAME = "Administrator";
    private final static String LOGIN_PWD = "elo";
    private final static String CNN_NAME = "IX-Workshop";
    private static IXConnection ix;
    private static IXServicePortC CONS;
    private static EditInfoC EDIT_INFO;
    private static SordC SORD;
    private static LockC LOCK;
    
    public static void main(String[] args) {

        try {
            // Login
            connectIx();
            
            // Insert a new document 
            deleteVersion();

            
        } catch (RemoteException e) {
            System.out.println(e.toString());
            
        } finally {
            
            // logout from Index Server
            disconnectIx();
        }    
    }
    
    

    // Create a document object
    public static void deleteVersion() throws RemoteException {
        
        // Create a document without an associated file
        EditInfo ed = ix.ix().createDoc("1", "0", null, EDIT_INFO.getMbSord());
        Sord sord = ed.getSord();
        sord.setName("Example: Delete Version");
        sord.setId(ix.ix().checkinSord(sord, SORD.getMbAll(), LOCK.getNO()));
        System.out.println("Sord created with Id: " + sord.getId() + 
                           " and name: " + sord.getName());
                           
       // Create test file
       // Checkout document
       ed = ix.ix().checkoutDoc(
                              sord.getGuid(), 
                              null, 
                              EDIT_INFO.getMbSordDocAtt(), 
                              LOCK.getYES());
       sord = ed.getSord();
       Document doc = ed.getDocument();
       System.out.println("Checked out sord with Id: " + sord.getId() + 
                          " and name: " + sord.getName());
       
       // The document is now locked and will only be unlocked by checkinEndDoc()
       
       // Create a number of files as new versions
       doc = createVersions(doc, 3);
       
       // Unlock using checkinSord
       ix.ix().checkinSord(sord, SORD.getMbOnlyUnlock(), LOCK.getYES());
       
       // Checkout all versions
       ed = ix.ix().checkoutDoc(ed.getSord().getGuid(), "-1", EDIT_INFO.getMbSordDocAtt(), LOCK.getYES());
       sord = ed.getSord();
       doc = ed.getDocument();
       DocVersion[] dv;
       // Display non-deleted documents
       dv = doc.getDocs();
       for (int i = 0; i < dv.length; i++){
           if (!dv[i].isDeleted()){
               System.out.println("Document version: " + dv[i].getVersion());
           }       
       }
       // Delete version no2 of the document
       doc.getDocs()[1].setDeleted(true);
       doc = ix.ix().checkinDocEnd(null, null, doc, LOCK.getNO());
       System.out.println("Deleted version 2");
       
       // Display non-deleted documents
       dv = doc.getDocs();
       for (int i = 0; i < dv.length; i++){
           if (!dv[i].isDeleted()){
               System.out.println("Document version: " + dv[i].getVersion());
           }       
       }
       
       // Unlock using checkinSord
       ix.ix().checkinSord(sord, SORD.getMbOnlyUnlock(), LOCK.getYES());
       
       // Delete sord if no longer required
       // To delete set delete = true
       boolean delete = false;
       if (delete == true){
           
           DeleteOptions delOpts = new DeleteOptions();
           delOpts.setDeleteFinally(true);
           ix.ix().deleteSord(null, sord.getGuid(), LOCK.getNO(), null);
           ix.ix().deleteSord(null, sord.getGuid(), LOCK.getNO(), delOpts);
           System.out.println("Sord with Id: " + sord.getGuid() + " has been deleted!");
       }
    }
    
    
    //Connect and login to IndexServer
    public static void connectIx() throws RemoteException {
        Properties connProps = IXConnFactory.createConnProps(IX_URL);
        Properties sessOpts = IXConnFactory.createSessionOptions("IX-Example", "1.0");
        IXConnFactory connFact = new IXConnFactory(connProps, sessOpts);
        ix = connFact.create(LOGIN_NAME, LOGIN_PWD, CNN_NAME, null);
        
        // Get contstant values (cached by IXClient object)
        CONS = ix.getCONST();
        EDIT_INFO = CONS.getEDIT_INFO();
        SORD = CONS.getSORD();
        LOCK = CONS.getLOCK();
    }
    
    public static Document createVersions(Document doc, int noOfVersions) throws RemoteException{
        // This code is taken from the example CheckinManyDocumentVersions
        // and creates a document with the number of different versions 
        // determined by noOfVersions
        for (int i = 0; i < noOfVersions; i++){
           
            String text = "Version number " + (i + 1);
            File testFile = internalCreateTestFile(text, ".txt");
            
            // Supply the extension for the document
            DocVersion dv = new DocVersion();
            dv.setExt(ix.getFileExt(testFile.getName()));
            doc.setDocs(new DocVersion[] {dv});
            System.out.println("Document version created for " + testFile.getName());
            
            // The Index Server creates a URL where the document must be uploaded to
            doc = ix.ix().checkinDocBegin(doc);
            dv = doc.getDocs()[0];
            System.out.println("Document " + (i + 1) + " checked in");
            
            // Upload document. Use helper function of IXClient.
            String uploadResult = ix.upload(dv.getUrl(), testFile);
            System.out.println("Document " + (i + 1) + " uploaded");
            
            // Assign response to uploadResult - contains document ID 
            dv.setUploadResult(uploadResult);
            System.out.println("UploadResult returned and set");
            
            // Set version comment
            dv.setVersion("" + (i + 1) + ".0");
            dv.setComment("Example document number " + (i + 1));
        
            // Commit document with checkinDocEnd method.
            // uploadResult contains the document information from the ELODM -
            // this must be passed to the Index Server
            
            doc = ix.ix().checkinDocEnd(null, null, doc, LOCK.getNO());
  
             
            System.out.println("Inserted document version: " + (i + 1));
            
            // Delete local file
            testFile.delete();
            System.out.println("File deleted");
            
            
        }     
       return doc;
    }
    
    // Write to temp file
    public static File internalCreateTestFile(String text, String ext) {
        File tempFile = null;
        try{
            tempFile = internalMakeTempFile(ext);
            BufferedWriter out = new BufferedWriter(new FileWriter(tempFile));
            out.write(text);
            out.close();
            
        } catch (IOException ioe){
            System.out.println(ioe.toString());
        }
        
        return tempFile;
    }
    
    
    // Make file name and create temp file
    public static File internalMakeTempFile(String ext) throws IOException {
        
        String tempFile = "Eloix";
        File f = File.createTempFile(tempFile, ext);
        System.out.println("File " + f.getName() + " created");
        return f;
    }
    
    
    // Logout from IndexServer
    public static void disconnectIx() {
         if (ix != null) {
           ix.logout();
         }
         System.out.println("Logged off");
    }
}
