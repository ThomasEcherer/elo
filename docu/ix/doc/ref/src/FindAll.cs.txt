using System;

namespace Examples
{
	/// <summary>
	/// This example shows how to search over all index attributes.
	/// 
	/// 1. Create test sords with search term in name, desc and index data
	/// 2. Execute find
	/// 
	/// </summary>
	public class FindAll
	{
		public String searchAllFor = "hallodallo";

		// URL to IndexServer
		public String url;

		// [X] Account to authenticate 
		public String userName = "Administrator"; 
		public String userPwd = "";					

		public void run()
		{
			// IndexServer stub
			IXClient ix = null;
			try 
			{
				// Create IndexServer object
				Logger.instance().log("create IX...");
				ix = new IXClient(url);
				Logger.instance().log("create IX OK");

				// Prepare ClientInfo object with language and country
				IndexServer.ClientInfo ci = new IndexServer.ClientInfo();
				ci.language = "de";
				ci.country = "DE";

				// LOGIN
				Logger.instance().log("login...");
				IndexServer.LoginResult loginResult = ix.login2(ci, userName, userPwd, "myComputer", null);
				ci = loginResult.clientInfo;
				Logger.instance().log("login OK");

				// get constants
				Logger.instance().log("get const...");
				IndexServer.IXServicePortC CONST = ix.getCONST(ci);
				Logger.instance().log("get const OK");
				
				// 1. Create test sords with search term in name, desc and index data

				// sord1 has search term in name attribute
				IndexServer.Sord sord1 = ix.createSord(ci, "1", null, CONST.EDIT_INFO.mbSord).sord;
				sord1.name = "C# example FindAll sord1 " + searchAllFor;
				sord1.id = ix.checkinSord(ci, sord1, CONST.SORD.mbAll, CONST.LOCK.NO);
				Logger.instance().log("sord1.id=" + sord1.id);

				// sord2 has search term in desc attribute
				IndexServer.Sord sord2 = ix.createSord(ci, "1", null, CONST.EDIT_INFO.mbSord).sord;
				sord2.name = "C# example FindAll sord2";
				sord2.desc = searchAllFor;
				sord2.id = ix.checkinSord(ci, sord2, CONST.SORD.mbAll, CONST.LOCK.NO);
				Logger.instance().log("sord2.id=" + sord2.id);

				// sord3 has search term in index attribute
				IndexServer.Sord sord3 = ix.createSord(ci, "1", null, CONST.EDIT_INFO.mbSord).sord;
				sord3.name = "C# example FindAll sord3";
				IndexServer.ObjKey okey = new IndexServer.ObjKey();
				okey.id = 0;
				okey.name = "IX-EXAMPLE";
				okey.data = new String[] {"find " + searchAllFor + " in index line"};
        sord3.objKeys = new IndexServer.ObjKey[] { okey };
				sord3.id = ix.checkinSord(ci, sord3, CONST.SORD.mbAll, CONST.LOCK.NO);
				Logger.instance().log("sord3.id=" + sord3.id);

				// 2. Execute find
				
				// Prepare FindInfo object
				Logger.instance().log("find ...");
				IndexServer.FindInfo findInfo = new IndexServer.FindInfo();
				findInfo.findByIndex = new IndexServer.FindByIndex();
				findInfo.findByIndex.name = "#" + searchAllFor;

				// find
				IndexServer.FindResult findResult = ix.findFirstSords(ci, findInfo, 1000, CONST.SORD.mbAll);
				if (findResult.sords != null)
				{
					Logger.instance().log("found #=" + findResult.sords.Length);
					for (int i = 0; i < findResult.sords.Length; i++)
					{
						Logger.instance().log("sord.id=" + findResult.sords[i].id + ", sord.name=" + findResult.sords[i].name);
					}
				}
				ix.findClose(ci, findResult.searchId);
				Logger.instance().log("find OK");

				bool cleanUp = true;
				if (cleanUp)
				{
          IndexServer.DeleteOptions delOpts = new IndexServer.DeleteOptions();
          delOpts.deleteFinally = true;
          ix.deleteSord(ci, null, sord1.guid, CONST.LOCK.NO, null);
          ix.deleteSord(ci, null, sord2.guid, CONST.LOCK.NO, null);
          ix.deleteSord(ci, null, sord3.guid, CONST.LOCK.NO, null);
          ix.deleteSord(ci, null, sord1.guid, CONST.LOCK.NO, delOpts);
          ix.deleteSord(ci, null, sord2.guid, CONST.LOCK.NO, delOpts);
          ix.deleteSord(ci, null, sord3.guid, CONST.LOCK.NO, delOpts);
        }
			} 
			catch (Exception e) 
			{
				throw e;
			} 
			finally 
			{
				// Always release IXClient object to make sure 
				// that all all open sessions are closed on exit
				if (ix != null) 
				{
					Logger.instance().log("IX done...");
					ix.done();
					Logger.instance().log("IX done OK");
				}
			}

		}
	}
}
