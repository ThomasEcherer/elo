package de.elo.ix.examples;

import de.elo.ix.client.ClientInfo;
import de.elo.ix.client.EditInfo;
import de.elo.ix.client.EditInfoC;
import de.elo.ix.client.FindInfo;
import de.elo.ix.client.FindOptions;
import de.elo.ix.client.SearchModeC;
import de.elo.ix.client.SearchModeZ;
import de.elo.ix.client.FindChildren;
import de.elo.ix.client.FindByIndex;
import de.elo.ix.client.IXClient;
import de.elo.ix.client.IXServicePortC;
import de.elo.ix.client.LockC;
import de.elo.ix.client.Sord;
import de.elo.ix.client.SordC;
import de.elo.ix.client.SordZ;
import de.elo.ix.client.ObjKey;
import java.rmi.RemoteException;
import de.elo.ix.client.DeleteOptions;
import de.elo.ix.client.IXConnFactory;
import de.elo.ix.client.IXConnection;
import java.util.Properties;

/**
 * This code demonstrates how to search for entries using a given index value.
 * 
 * Create archive entries
 *  s1 Find by Index Value
 *   |_
 *      name=ka-mo, mask = Email, from = karl@x.com, to = mona@x.com
 *      name=ka-fi, mask = Email, from = karl@x.com, to = finn@x.com
 *      name=mo-ka, mask = Email, from = mona@x.com, to = karl@x.com
 *      name=mo-fi, mask = Email, from = mona@x.com, to = finn@x.com
 *      name=fi-mo, mask = Email, from = finn@x.com, to = mona@x.com
 *      name=ki-ka, mask = Email, from = finn@x.com, to = karl@x.com
 *      name=ka-mofi, mask = Email, from = karl@x.com, to = mona@x.com, finn@x.com
 * 
 * Find emails sent from karl to mona: ka-mo, ka-mofi
 * Find emails sent from karl to anyone: ka-mo, ka-mofi, ka-fi
 * Find emails sent from karl or to karl: ka-mo, ka-mofi, ka-fi, mo-ka, fi-ka
 * Find emails sent from karl or from mona: ka-mo, ka-mofi, mo-ka, mo,fi
 * Find emails sent to mona and finn: ka-mofi
 * Find emails sent to mona or finn: ka-mo, ka-mofi, ka-fi, mo-fi, fi-mo
 *        
 */

public class FindByIndexValue {
    
    private final static String IX_URL = "http://localhost:8080/ix-elotest1/ix";
    private final static String LOGIN_NAME = "Administrator";
    private final static String LOGIN_PWD = "elo";
    private final static String CNN_NAME = "IX-Workshop";
    private static IXConnection ix;
    private static IXServicePortC CONS;
    private static EditInfoC EDIT_INFO;
    private static SordC SORD;
    private static LockC LOCK;
    private static SearchModeC SEARCH_MODE;

    
    public static void main(String[] args) {

        try {
            // Login
            connectIx();
            
            // Create sord and check out using index attributes
            findIndexValue();
            
        } catch (RemoteException e) {
            System.out.println(e.toString());
            
        } finally {
            
            // logout from Index Server
            disconnectIx();
        }    
    }
    
     public static void findIndexValue() throws RemoteException {
        
         // Email addresses
         String karl = "karl@x.com";
         String mona = "mona@x.com";
         String finn = "finn@x.com";
         
         // Create archive heirachy
         // root folder
         EditInfo ed = ix.ix().createSord("1", null, EDIT_INFO.getMbSord());
         Sord s1 = ed.getSord();
         s1.setName("s1 Find by Index Value");
         s1.setId(ix.ix().checkinSord(s1, SORD.getMbAll(), LOCK.getNO()));
         System.out.println("Sord created Id = " + s1.getId() + " and name " + s1.getName());
         
         Sord d1 = internalCreateEmail(ix, CONS, s1.getGuid(),"ka-mo", karl, mona);
         Sord d2 = internalCreateEmail(ix, CONS, s1.getGuid(),"ka-fi", karl, finn);
         Sord d3 = internalCreateEmail(ix, CONS, s1.getGuid(),"mo-ka", mona, karl);
         Sord d4 = internalCreateEmail(ix, CONS, s1.getGuid(),"mo-fi", mona, finn);
         Sord d5 = internalCreateEmail(ix, CONS, s1.getGuid(),"fi-mo", finn, mona);
         Sord d6 = internalCreateEmail(ix, CONS, s1.getGuid(),"fi-ka", finn, karl);
         Sord d7 = internalCreateEmail(ix, CONS, s1.getGuid(),"ka-mofi", karl, mona + ", " + finn);
         System.out.println("Created sords OK");
         
         // Create search modes
         SearchModeZ mbAnd = new SearchModeZ();
         mbAnd.setBset(SEARCH_MODE.getBsetAND());
         SearchModeZ mbOr = new SearchModeZ();
         mbOr.setBset(SEARCH_MODE.getBsetOR());
         
         
         // Find emails sent from karl to mona (ka-mo, ka-mofi)
         internalFindEmailsFromTo(ix, CONS, s1.getGuid(), "*karl*", "*mona*", mbAnd);

         // Find emails sent from karl to anyone (ka-mo, ka-fi, ka-mofi)
         internalFindEmailsFromTo(ix, CONS, s1.getGuid(), "*karl*", "*", mbAnd);

         // Find emails sent from or to karl (ka-mo, ka-fi, ka-mofi, mo-ka, fi-ka)
         internalFindEmailsFromTo(ix, CONS, s1.getGuid(), "*karl*", "*karl*", mbOr);
         
         // Find emails sent from karl or from mona (ka-mo, ka-fi, ka-mofi, mo-ka, mo-fi)
         internalFindEmailsFromTo(ix, CONS, s1.getGuid(), "\"*karl*\" + \"*mona*\"",  "*", mbAnd);

         // Find emails sent to mona and finn (ka-mofi)
         internalFindEmailsFromTo(ix, CONS, s1.getGuid(), "*", "\"*mona*\" & \"*finn*\"", mbAnd);

         // Find emails sent to mona or finn (ka-mo, ka-fi, ka-mofi, mo-fi, fi-mo)
         internalFindEmailsFromTo(ix, CONS, s1.getGuid(), "*", "\"*mona*\" + \"*finn*\"", mbAnd);

         
         
        
         // Delete sord objects
         Boolean delete = false;
         if (delete == true){
            // Delete sord twice - first for logical delete in archive and
            // second time to permanently delete the sord.
            DeleteOptions delOpts = new DeleteOptions();
            delOpts.setDeleteFinally(true);
            ix.ix().deleteSord(null, s1.getGuid(), LOCK.getNO(), null);
            ix.ix().deleteSord(null, s1.getGuid(), LOCK.getNO(), delOpts);
            System.out.println("Sords deleted");
         }
        
        
       
    }
     
     public static Sord internalCreateEmail(IXConnection ix, IXServicePortC CONS, String parentId, String name, String from, String to) throws RemoteException{
        
         Sord d1 = ix.ix().createDoc(parentId, "Email", null, CONS.getEDIT_INFO().getMbSord()).getSord();
         d1.setName(name);
         d1.getObjKeys()[0].setData(new String[] {from});
         d1.getObjKeys()[1].setData(new String[] {to});
         d1.setId(ix.ix().checkinSord(d1, CONS.getSORD().getMbAll(), CONS.getLOCK().getNO()));
         System.out.println("Name= " + name + ", from = " + from + ", to = " + to);
         
         return d1;
     }
     
     public static void internalFindEmailsFromTo(IXConnection ix, IXServicePortC CONS, String parentId, String from, String to, SearchModeZ mode) throws RemoteException{
         
         System.out.println("Finding from = " + from + ", to = " + to);
         // Select names only
         SordZ mbName = new SordZ();
         mbName.setBset(CONS.getSORD().getMbName());
         
         // Find data
         FindInfo findInfo = internalMakeFindInfo(parentId, from, to, mode);
         Sord[] sords = ix.ix().findFirstSords(findInfo, 1000, mbName).getSords();
         String nameList = "";
         for ( int i = 0; i < sords.length; i++){
             if (i != 0) nameList += ", ";
             nameList += sords[i].getName();
         }
         System.out.println("Find OK, sords = " + nameList);
     }
     
     public static FindInfo internalMakeFindInfo(  String parentId, String from, String to, SearchModeZ mode){
         
         FindInfo findInfo = new FindInfo();
         
         // restrict results to children of parent s1
         findInfo.setFindChildren(new FindChildren());
         findInfo.getFindChildren().setParentId(parentId);
         
         findInfo.setFindByIndex(new FindByIndex());
         findInfo.getFindByIndex().setObjKeys(new ObjKey[2]);
         
         findInfo.getFindByIndex().getObjKeys()[0] = new ObjKey();
         findInfo.getFindByIndex().getObjKeys()[0].setName("ELOOUTL1");
         findInfo.getFindByIndex().getObjKeys()[0].setData(new String[] {from});
         
         findInfo.getFindByIndex().getObjKeys()[1] = new ObjKey();
         findInfo.getFindByIndex().getObjKeys()[1].setName("ELOOUTL2");
         findInfo.getFindByIndex().getObjKeys()[1].setData(new String[] {to});
        
         // Set search mode to determine whether AND or OR is used in the search
         findInfo.setFindOptions(new FindOptions());
         findInfo.getFindOptions().setSearchMode(mode);
         
         return findInfo;
     }
    
    public static void connectIx() throws RemoteException {
        Properties connProps = IXConnFactory.createConnProps(IX_URL);
        Properties sessOpts = IXConnFactory.createSessionOptions("IX-Example", "1.0");
        IXConnFactory connFact = new IXConnFactory(connProps, sessOpts);
        ix = connFact.create(LOGIN_NAME, LOGIN_PWD, CNN_NAME, null);
        
        // Get contstant values (cached by IXClient object)
        CONS = ix.getCONST();
        EDIT_INFO = CONS.getEDIT_INFO();
        SORD = CONS.getSORD();
        LOCK = CONS.getLOCK();
        SEARCH_MODE = CONS.getSEARCH_MODE();
        
    }
    
    
    // Logout from IndexServer
    public static void disconnectIx() {
         if (ix != null) {
           ix.logout();
         }
         System.out.println("Logged off");
    }
    
}
