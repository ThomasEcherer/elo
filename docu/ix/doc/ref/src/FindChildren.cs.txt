using System;

namespace Examples
{
	/// <summary>
	/// This sample shows how to browse throu the archive hirarchie
	/// 1. Create root folder with 30 children
	/// 2. List children of root folder
	/// </summary>
	public class FindChildren
	{
		public int nbOfChildren = 30;

		// URL to IndexServer
		public String url;

		// [X] Account to authenticate 
		public String userName = "Administrator"; 
		public String userPwd = "";					

		public void run()
		{
			// IndexServer stub
			IXClient ix = null;
			try 
			{
				// Create IndexServer object
				Logger.instance().log("create IX...");
				ix = new IXClient(url);
				Logger.instance().log("create IX OK");

				// Prepare ClientInfo object with language and country
				IndexServer.ClientInfo ci = new IndexServer.ClientInfo();
				ci.language = "de";
				ci.country = "DE";

				// LOGIN
				Logger.instance().log("login...");
				IndexServer.LoginResult loginResult = ix.login2(ci, userName, userPwd, "myComputer", null);
				ci = loginResult.clientInfo;
				Logger.instance().log("login OK");

				// get constants
				Logger.instance().log("get const...");
				IndexServer.IXServicePortC CONST = ix.getCONST(ci);
				Logger.instance().log("get const OK");
				
				// 1. Create archive hirarchie

				// root folder
				IndexServer.Sord sordRoot = ix.createSord(ci, "1", null, CONST.EDIT_INFO.mbSord).sord;
				sordRoot.name = "C# example FindFirstFindNext";
				sordRoot.id = ix.checkinSord(ci, sordRoot, CONST.SORD.mbAll, CONST.LOCK.NO);
                
				// create sords
				Logger.instance().log("create sords...");
				for (int i = 0; i < nbOfChildren; i++) 
				{
					String namePrefix = "" + i;
					while (namePrefix.Length < 4) namePrefix = "0" + namePrefix;
					IndexServer.Sord sord = ix.createSord(ci, sordRoot.guid, null, CONST.EDIT_INFO.mbSord).sord;
					sord.name = namePrefix + "-o-" + namePrefix;
					sord.id = ix.checkinSord(ci, sord, CONST.SORD.mbAll, CONST.LOCK.NO);
				}
				Logger.instance().log("create sords OK");

				// 2. List hirarchie
				Logger.instance().log("find...");

				// Prepare FindInfo object
				IndexServer.FindInfo findInfo = new IndexServer.FindInfo();
				findInfo.findChildren = new IndexServer.FindChildren();
				findInfo.findChildren.parentId = sordRoot.guid;

				// find
				IndexServer.FindResult findResult = ix.findFirstSords(ci, findInfo, 1000, CONST.SORD.mbAll);
				Logger.instance().log("found #=" + findResult.sords.Length);
				for (int i = 0; i < findResult.sords.Length; i++) 
				{
					Logger.instance().log("sord.id=" + findResult.sords[i].id + ", sord.name=" + findResult.sords[i].name);
				}
				ix.findClose(ci, findResult.searchId);
				Logger.instance().log("find OK");

				bool cleanUp = true;
				if (cleanUp)
				{
					Logger.instance().log("clean up...");
          IndexServer.DeleteOptions delOpts = new IndexServer.DeleteOptions();
          delOpts.deleteFinally = true;
          ix.deleteSord(ci, null, sordRoot.guid, CONST.LOCK.NO, null);
          ix.deleteSord(ci, null, sordRoot.guid, CONST.LOCK.NO, delOpts);
					Logger.instance().log("clean up OK");
				}
			} 
			catch (Exception e) 
			{
				throw e;
			} 
			finally 
			{
				// Always release IXClient object to make sure 
				// that all all open sessions are closed on exit
				if (ix != null) 
				{
					Logger.instance().log("IX done...");
					ix.done();
					Logger.instance().log("IX done OK");
				}
			}
		}

	}
}