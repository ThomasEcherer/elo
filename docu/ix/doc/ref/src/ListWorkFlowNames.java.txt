package de.elo.ix.workflowexamples;

import de.elo.ix.client.ClientInfo;
import de.elo.ix.client.EditInfo;
import de.elo.ix.client.EditInfoC;
import de.elo.ix.client.IXConnFactory;
import de.elo.ix.client.IXConnection;
import de.elo.ix.client.IXServicePortC;
import de.elo.ix.client.SordC;
import de.elo.ix.client.LockC;
import de.elo.ix.client.WFDiagram;
import de.elo.ix.client.WFDiagramC;
import de.elo.ix.client.WFTypeC;
import de.elo.ix.client.WFCollectNode;
import de.elo.ix.client.WFNode;
import de.elo.ix.client.WFEditNode;
import de.elo.ix.client.IdName;
import java.rmi.RemoteException;
import java.util.Date;
import java.util.Properties;

/**
 *
 * @author Shipton
 */
public class ListWorkFlowNames {
    
    private final static String IX_URL = "http://localhost:8080/ix-elotest1/ix";
    private final static String LOGIN_NAME = "Administrator";
    private final static String LOGIN_PWD = "elo";
    private final static String CNN_NAME = "IX-Workshop";
    private static ClientInfo ci;
    private static IXConnection ix;
    private static IXServicePortC CONS;
    private static EditInfoC EDIT_INFO;
    private static SordC SORD;
    private static LockC LOCK;
    private static WFDiagramC WORKFLOW;
    private static WFTypeC WORKFLOW_TYPE;
    
    public static void main(String[] args){
        
         try {
            // Login
            connectIx();
            
            // Insert a new workflow template
            createFromTemplate();

            
        } catch (RemoteException e) {
            System.out.println(e.toString());
            
        } finally {
            
            // logout from Index Server
            disconnectIx();
        }    
        
    }
    
    public static void createFromTemplate() throws RemoteException{
        
        // Create a user
        int userId = WFHelper.createNewUser(ix, "WF-User1", "elo", false);
        String[] userNames = new String[] {"WF-User1"};
        
        // Create 3 simple workflow templates to list
        String templateName = "";
        for (int i = 1; i < 4; i++){
            templateName = ("Demo Template " + i + " - " + (new Date()));
            WFDiagram wf = WFHelper.createSeqTemplateForUsers(ix, templateName, userNames);
            System.out.println("Created template called " + wf.getName());
        }
        
        // Create 3 Sord objects
        // Save sord ids in array to delete later
        EditInfo ed = new EditInfo();
        int objId[] = new int[3];
        for (int i = 1; i < 4; i++){
            ed = ix.ix().createSord("1", "0", EDIT_INFO.getMbSord());
            ed.getSord().setName("WF-Sord " + i +  (new Date()));
            objId[i-1] = ix.ix().checkinSord(ed.getSord(), SORD.getMbMin(), LOCK.getNO());
            System.out.println("Created sord called " + ed.getSord().getName() + " with id = " + objId[i-1]);
        }

        // Start 3 workflows
        String flowName = new String();
        int flowId = 0;
        for (int i = 1; i < 4; i++){
            flowName = ("WF List demo " + i + " - " + (new Date()));
            flowId = ix.ix().startWorkFlow(templateName, flowName, ed.getSord().getGuid());
            System.out.println("started WF: sordName=" + ed.getSord().getName() + 
                               ", flowId=" + flowId + 
                               ", flowName=" + flowName);
        }


        // Search for active workflow node(s) with workflow name 
        // Forward the first node in the third workflow
        WFCollectNode[] nodes = ix.ix().collectWorkFlowNodes(
                                                           flowName,        // Name of workflow
                                                           null,            // WF type - null = active
                                                           null,            // Node name
                                                           0,               // Node type - 0 = all nodes
                                                           Integer.toString(objId[2]), // objId for object
                                                           null,            // Enter date
                                                           null,            // Exit date
                                                           null,            // User ids
                                                           true,            // Only active nodes
                                                           false);          // Only start nodes

      
        // Forward node
        // Lock the node and get the required values to fill a dialogue
        WFEditNode editNode = ix.ix().beginEditWorkFlowNode(
                                                          nodes[0].getFlowId(), 
                                                          nodes[0].getNodeId(),
                                                          CONS.getLOCK().getYES());
        
        // forward to successor
        WFNode[] succNodes = editNode.getSuccNodes();
        int [] arrEnterNodesIds = null;
        if (succNodes.length > 0) {
            arrEnterNodesIds = new int[1];
            arrEnterNodesIds[0] = succNodes[0].getId();
        }
                 
        // forward
        ix.ix().endEditWorkFlowNode(
                nodes[0].getFlowId(), 
                nodes[0].getNodeId(), 
                false,                 // do not terminate flow
                false,                 // do not cancel editing
                editNode.getNode().getName(), // new node name = old name
                "Forward first node!",
                arrEnterNodesIds
                );
        
        System.out.println("Forwarded node!");
    
        // Display current templates
        IdName[] template = ix.ix().collectWorkFlows(WORKFLOW_TYPE.getTEMPLATE());
        IdName[] active = ix.ix().collectWorkFlows(WORKFLOW_TYPE.getACTIVE());
        IdName[] finished = ix.ix().collectWorkFlows(WORKFLOW_TYPE.getFINISHED());
        
        //Display templates
        System.out.print("TEMPLATES");
        WFDiagram wfTemplate = new WFDiagram();
        //Only display non-deleted templates
        for (int i = 0; i < template.length; i++){
            wfTemplate = ix.ix().checkoutWorkFlow(
                                                template[i].getName(), 
                                                WORKFLOW_TYPE.getTEMPLATE(), 
                                                WORKFLOW.getMbAll(), 
                                                LOCK.getNO());
            if (wfTemplate.isDeleted() == false){
                System.out.println("  Template found with name " + template[i].getName());
            }
        }
        
        // Display active workflows
        System.out.println("ACTIVE");
        for (int i = 0; i < active.length; i++){
            System.out.println("  Active workflow found with name " + active[i].getName());
        }
        
        // Display finished workflows
        System.out.println("FINISHED");
        for (int i = 0; i < finished.length; i++){
            System.out.println("  Finished workflow found with name " + finished[i].getName());
        }
        
        // Delete Sords
        boolean delete = true;
        if (delete == true){
            
            for (int i = 0; i < template.length; i++){
                // Delete templates
                ix.ix().deleteWorkFlow(template[i].getName(), WORKFLOW_TYPE.getTEMPLATE(), LOCK.getNO());
            }
            for (int i = 0; i < active.length; i++){
                // Delete workflows
                ix.ix().deleteWorkFlow(active[i].getName(), WORKFLOW_TYPE.getACTIVE(), LOCK.getNO());
            }
            for (int i = 0; i < finished.length; i++){
                // Delete workflows
                try {
                    ix.ix().deleteWorkFlow(finished[i].getName(), WORKFLOW_TYPE.getFINISHED(), LOCK.getNO());
                    System.out.println("ERROR - finished workflows cannot be deleted");
                } catch (RemoteException re) {
                    System.out.println("Finished workflows cannot be deleted!");
                }
                
            }
            
            }for (int i = 0; i < objId.length; i++){
                // Delete sords
                ix.ix().deleteSord(null, Integer.toString(objId[i]), LOCK.getNO(), null);
        }
 
    }
    
    /**
     * Connect and login to IndexServer
     */
    public static void connectIx() throws RemoteException {
        Properties connProps = IXConnFactory.createConnProps(IX_URL);
        Properties sessOpts = IXConnFactory.createSessionOptions("IX-Example", "1.0");
        IXConnFactory connFact = new IXConnFactory(connProps, sessOpts);
        ix = connFact.create(LOGIN_NAME, LOGIN_PWD, CNN_NAME, null);
        
        // Get contstant values (cached by IXClient object)
        CONS = ix.getCONST();
        EDIT_INFO = CONS.getEDIT_INFO();
        SORD = CONS.getSORD();
        LOCK = CONS.getLOCK();
        WORKFLOW = CONS.getWORKFLOW();
        WORKFLOW_TYPE = CONS.getWORKFLOW_TYPE();
    }
    
    /**
     * Logout from IndexServer
     */
    // Logout from IndexServer
    public static void disconnectIx() {
         if (ix != null) {
           ix.logout();
         }
         System.out.println("Logged off");
    }
}
