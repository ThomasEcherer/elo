using System;

namespace Examples
{
	/// <summary>
	/// Lists the currently acitve workflow nodes for a given user.
	/// </summary>
	public class ListWorkFlowNodes
	{
		// URL to IndexServer
		public String url;

		// [X] Account to authenticate 
		public String userName = "Administrator"; 
		public String userPwd = "";					

		public void run()
		{
			// IndexServer stub
			IXClient ix = null;
			try 
			{
				// Create IndexServer object
				Logger.instance().log("create IX...");
				ix = new IXClient(url);
				Logger.instance().log("create IX OK");

				// Prepare ClientInfo object with language and country
				IndexServer.ClientInfo ci = new IndexServer.ClientInfo();
				ci.language = "de";
				ci.country = "DE";

				// LOGIN
				Logger.instance().log("login...");
				IndexServer.LoginResult loginResult = ix.login2(ci, userName, userPwd, "myComputer", null);
				ci = loginResult.clientInfo;
				Logger.instance().log("login OK");

				// get constants
				Logger.instance().log("get const...");
				IndexServer.IXServicePortC CONST = ix.getCONST(ci);
				Logger.instance().log("get const OK");

				Logger.instance().log("get nodes...");
        IndexServer.FindTasksInfo findInfo = new IndexServer.FindTasksInfo();
        findInfo.inclWorkflows = true;
        IndexServer.FindResult findResult = ix.findFirstTasks(ci, findInfo, 10);

        int idx = 0;
        while (true)
        {
          Logger.instance().log("#nodes=" + findResult.tasks.Length);
          for (int i = 0; i < findResult.tasks.Length; i++)
          {
            IndexServer.WFCollectNode node = findResult.tasks[i].wfNode;
            Logger.instance().log("name=" + node.nodeName);
            Logger.instance().log("  flowId=" + node.nodeId + ", nodeId=" + node.nodeId);
            Logger.instance().log("  objId=" + node.objId + ", userId=" + node.userId);
          }

          if (!findResult.moreResults)
          {
            break;
          }

          idx += findResult.tasks.Length;
          findResult = ix.findNextTasks(ci, findResult.searchId, idx, 10);
        }

        Logger.instance().log("get nodes OK");

        // LOGOUT
				ix.logout(ci);
			} 
			catch (Exception e) 
			{
				throw e;
			} 
			finally 
			{
				// Always release IXClient object to make sure 
				// that all all open sessions are closed on exit
				if (ix != null) 
				{
					Logger.instance().log("IX done...");
					ix.done();
					Logger.instance().log("IX done OK");
				}
			}
		}
	}
}
