using System;

namespace Examples
{
	/// <summary>
	/// 
	/// 1. Create Sord 
	/// 2. Create a test user "Fritz"
	/// 3. Assign read access to Sord for user "Fritz"
	/// 4. Login as "Fritz" and try to read Sord
	/// 5. Try to lock, write and delete as "Fritz" (exception expected)
	///
	/// </summary>
	public class SordACL
	{
		// URL to IndexServer
		public String url;

		// [X] Account to authenticate 
		public String userName = "Administrator"; 
		public String userPwd = "";					

		public void run()
		{
			// IndexServer stub
			IXClient ix = null;
			try 
			{
				// Create IndexServer object
				Logger.instance().log("create IX...");
				ix = new IXClient(url);
				Logger.instance().log("create IX OK");

				// Prepare ClientInfo object with language and country
				IndexServer.ClientInfo ci = new IndexServer.ClientInfo();
				ci.language = "de";
				ci.country = "DE";

				// LOGIN
				Logger.instance().log("login...");
				IndexServer.LoginResult loginResult = ix.login2(ci, userName, userPwd, "myComputer", null);
				ci = loginResult.clientInfo;
				Logger.instance().log("login OK");

				// get constants
				Logger.instance().log("get const...");
				IndexServer.IXServicePortC CONST = ix.getCONST(ci);
				Logger.instance().log("get const OK");

				String fritzName = "Fritz"; // [X]

				// 1. Create Sord
				IndexServer.Sord sord = ix.createSord(ci, "1", "0", CONST.EDIT_INFO.mbSord).sord;
				sord.name = "C# example SordACL";

				// 2. Create a new test user (if nessesary)
				IndexServer.UserInfo uiFritz = ix.createUser(ci, null);
				uiFritz.name = fritzName; 
				uiFritz.pwd = fritzName + " password";
				uiFritz.flags = CONST.ACCESS.FLAG_EDITSTRUCTURE; // Fritz is allowed to edit structure elements in general
				int[] uids = ix.checkinUsers(ci, new IndexServer.UserInfo[] {uiFritz}, CONST.CHECKIN_USERS.PASSWORD, CONST.LOCK.NO);
				uiFritz.id = uids[0];
				Logger.instance().log("created account for " + uiFritz.name + ", uid=" + uids[0]);

				// 3. Assign read access to Sord for user "Fritz"
				IndexServer.AclItem aclItemFritz = new IndexServer.AclItem();
				aclItemFritz.name = uiFritz.name; 
				// alternative: aclItem.id = uiFritz.id
				aclItemFritz.access = CONST.ACCESS.LUR_READ;

				// assign all access for current user
				IndexServer.AclItem aclItemCu = new IndexServer.AclItem();
				aclItemCu.name = userName; 
				aclItemCu.access = CONST.ACCESS.LUR_ALL;

				// checkin
				sord.aclItems = new IndexServer.AclItem[] {aclItemFritz, aclItemCu};
				sord.id = ix.checkinSord(ci, sord, CONST.SORD.mbAll, CONST.LOCK.NO);
				Logger.instance().log("created sord with read access for Fritz: id=" + sord.id);

				// 4. Login as "Fritz" and try to read Sord
				IndexServer.ClientInfo ciFritz = new IndexServer.ClientInfo();
				ciFritz.language = "de";
				ciFritz.country = "DE";
				IndexServer.LoginResult lrFritz = ix.login2(ci, uiFritz.name, uiFritz.pwd, "mycomp", null);
				ciFritz = lrFritz.clientInfo;
				Logger.instance().log(uiFritz.name + " logged in successfully");

				// read Sord
				IndexServer.Sord sordForFritz = ix.checkoutSord(ciFritz, sord.guid, CONST.EDIT_INFO.mbSord, CONST.LOCK.NO).sord;
				Logger.instance().log(uiFritz.name + " read sord successfully");

				// 5. Try to lock, write and delete as "Fritz" (exception expected)
				try
				{
					// lock
					sord = ix.checkoutSord(ciFritz, sord.guid, CONST.EDIT_INFO.mbSord, CONST.LOCK.YES).sord;
					Logger.instance().log("ERROR: " + uiFritz.name + " must not be able to checkout sord");
				}
				catch (Exception e)
				{
					Logger.instance().log("OK, " + uiFritz.name + " is not allowed to lock sord, exception=" + formatException(e));
				}
				try
				{
					// write
					sord = ix.checkoutSord(ciFritz, sord.guid, CONST.EDIT_INFO.mbSord, CONST.LOCK.NO).sord;
					sord.desc = "changed by Fritz";
					ix.checkinSord(ciFritz, sord, CONST.SORD.mbAll, CONST.LOCK.NO);
					Logger.instance().log("ERROR: " + uiFritz.name + " must not be able to write sord");
				}
				catch (Exception e)
				{
					Logger.instance().log("OK, " + uiFritz.name + " is not allowed to write sord, exception=" + formatException(e));
				}
				try
				{
					// delete
          IndexServer.DeleteOptions delOpts = new IndexServer.DeleteOptions();
          delOpts.deleteFinally = true;
          ix.deleteSord(ciFritz, null, sord.guid, CONST.LOCK.NO, delOpts);
					Logger.instance().log("ERROR: " + uiFritz.name + " must not be able to delete sord");
				}
				catch (Exception e)
				{
					Logger.instance().log("OK, " + uiFritz.name + " is not allowed to delete sord, exception=" + formatException(e));
				}

				// logout Fritz
				ix.logout2(ciFritz);
				ix.deleteUsers(ci, new String[] {uiFritz.name}, CONST.LOCK.NO);

				bool cleanUp = true;
				if (cleanUp) 
				{
          IndexServer.DeleteOptions delOpts = new IndexServer.DeleteOptions();
          delOpts.deleteFinally = true;
          ix.deleteSord(ci, null, sord.guid, CONST.LOCK.NO, delOpts);
				}
			}
			catch (Exception e) 
			{
				throw e;
			} 
			finally 
			{
				// Always release IXClient object to make sure 
				// that all all open sessions are closed on exit
				if (ix != null) 
				{
					Logger.instance().log("IX done...");
					ix.done();
					Logger.instance().log("IX done OK");
				}
			}

		}

		private String formatException(Exception e) 
		{
			String raw = e.ToString();
			int p = raw.IndexOf("[ELOIX");
			if (p < 0) return raw;
			int start = raw.IndexOf("]", p);
			if (start < 0) return raw;
			start++;
			int end = raw.IndexOf(")\r\n", start);
			if (end < 0) end = raw.Length;
			String msg = raw.Substring(start, end - start);
			return msg;
		}
	}
}
